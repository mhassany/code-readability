{
    "url": "https://api.github.com/repos/pallets/flask/issues/621",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/621/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/621/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/621/events",
    "html_url": "https://github.com/pallets/flask/issues/621",
    "id": 7855249,
    "node_id": "MDU6SXNzdWU3ODU1MjQ5",
    "number": 621,
    "title": "Local extensions fail to import",
    "user": {
        "login": "Soviut",
        "id": 226882,
        "node_id": "MDQ6VXNlcjIyNjg4Mg==",
        "avatar_url": "https://avatars1.githubusercontent.com/u/226882?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Soviut",
        "html_url": "https://github.com/Soviut",
        "followers_url": "https://api.github.com/users/Soviut/followers",
        "following_url": "https://api.github.com/users/Soviut/following{/other_user}",
        "gists_url": "https://api.github.com/users/Soviut/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Soviut/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Soviut/subscriptions",
        "organizations_url": "https://api.github.com/users/Soviut/orgs",
        "repos_url": "https://api.github.com/users/Soviut/repos",
        "events_url": "https://api.github.com/users/Soviut/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Soviut/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 8,
    "created_at": "2012-10-25T10:54:57Z",
    "updated_at": "2012-10-26T14:19:36Z",
    "closed_at": "2012-10-25T20:41:52Z",
    "author_association": "NONE",
    "body": "I have a Flask 0.9 project that has all dependencies stored locally beside my app.py file. The intention is to keep everything self-contained within a version control repository so anyone using or contributing to it won't need to make any additional installations.\n\nThis being the case, I want to use some Flask extensions and decided try manually installing the Flask-Login extension. I copied the `flask_login.py` file to the `flask/ext` directory and tried to `import flask.ext.login` from my app.py file the same way the example does. I got an `ImportError: No module named login`. I then tried `import flask.ext.flask_login` and that too failed.\n\nThe solution I wound up with from Stack Overflow was to comment out the `setup()` function in the `flask/ext/__init__.py` file and `import flask.ext.flask_login` directly in my app.py file.\n\nhttp://stackoverflow.com/questions/13065682/how-to-manually-install-flask-extensions\n\nI would _really_ like to be able to use an unmodified version of Flask locally and without a virtual environment that can still import extensions the expected way.\n",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/9776485",
            "html_url": "https://github.com/pallets/flask/issues/621#issuecomment-9776485",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/621",
            "id": 9776485,
            "node_id": "MDEyOklzc3VlQ29tbWVudDk3NzY0ODU=",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2012-10-25T13:00:08Z",
            "updated_at": "2012-10-25T13:00:08Z",
            "author_association": "MEMBER",
            "body": "It seems like i read the whole thing to fast. I deleted my previous answers. So:\n\nI think it's a bad idea to include the extensions into the app itself. That said, you should do something like `from myapp import flask_foo`, and your app should be a multi-file package with the plugin in it. Because the plugin is not actually \"globally\" installed, Flask' special wrapper package `flask.ext` can't find it if you do `import flask.ext.foo`.\n\nIt would be a better idea, however, to use virtualenv. It's made for your case.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/9776960",
            "html_url": "https://github.com/pallets/flask/issues/621#issuecomment-9776960",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/621",
            "id": 9776960,
            "node_id": "MDEyOklzc3VlQ29tbWVudDk3NzY5NjA=",
            "user": {
                "login": "Soviut",
                "id": 226882,
                "node_id": "MDQ6VXNlcjIyNjg4Mg==",
                "avatar_url": "https://avatars1.githubusercontent.com/u/226882?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/Soviut",
                "html_url": "https://github.com/Soviut",
                "followers_url": "https://api.github.com/users/Soviut/followers",
                "following_url": "https://api.github.com/users/Soviut/following{/other_user}",
                "gists_url": "https://api.github.com/users/Soviut/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/Soviut/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Soviut/subscriptions",
                "organizations_url": "https://api.github.com/users/Soviut/orgs",
                "repos_url": "https://api.github.com/users/Soviut/repos",
                "events_url": "https://api.github.com/users/Soviut/events{/privacy}",
                "received_events_url": "https://api.github.com/users/Soviut/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2012-10-25T13:15:33Z",
            "updated_at": "2012-10-25T13:15:33Z",
            "author_association": "NONE",
            "body": "Why is it a bad idea to include the extensions directly? I'd like my repository to contain a complete snapshot of the dependencies. I'd prefer if these dependencies didn't require a virtual environment just to run, especially considering how the python path works. I've been able to effectively \"snapshot\" Django projects this way.\n\nI would argue that the way Flask looks for extensions is flawed. It eschews typical Python import conventions and uses a lot of \"magic\" that is poorly documented and difficult to comprehend.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/9779409",
            "html_url": "https://github.com/pallets/flask/issues/621#issuecomment-9779409",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/621",
            "id": 9779409,
            "node_id": "MDEyOklzc3VlQ29tbWVudDk3Nzk0MDk=",
            "user": {
                "login": "boris317",
                "id": 339231,
                "node_id": "MDQ6VXNlcjMzOTIzMQ==",
                "avatar_url": "https://avatars1.githubusercontent.com/u/339231?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/boris317",
                "html_url": "https://github.com/boris317",
                "followers_url": "https://api.github.com/users/boris317/followers",
                "following_url": "https://api.github.com/users/boris317/following{/other_user}",
                "gists_url": "https://api.github.com/users/boris317/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/boris317/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/boris317/subscriptions",
                "organizations_url": "https://api.github.com/users/boris317/orgs",
                "repos_url": "https://api.github.com/users/boris317/repos",
                "events_url": "https://api.github.com/users/boris317/events{/privacy}",
                "received_events_url": "https://api.github.com/users/boris317/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2012-10-25T14:24:50Z",
            "updated_at": "2012-10-25T14:25:25Z",
            "author_association": "NONE",
            "body": "I would argue the way you are managing your dependencies if flawed and heavy handed. I think it would feel very strange to work on such a project. What is your problem with using a virtualenv. You could solve this issue by shipping a pip freeze file with your project. Anyone that clones your project would simply need to \n\n```\npip install -r your_frozen_requirements.txt.\n```\n\nHaving gotten that off my chest, you should simply be able to copy `flask_login.py` to the same directory as your `myapp.py` file. As long as `flask_login.py` is on your python path  `flask.ext` should pick it up.\n\nI just tested this on my machine and it worked. My project structure looks like this\n\n```\nboris317-mac:test_local_deps boris317$ ls\nflask       flask_login.py  myapp.py    werkzeug\n```\n\nand finally the contents of `myapp.py`\n\n``` python\nfrom flask import Flask\nfrom flask.ext.login import LoginManager\n\napp = Flask(__name__)\n\nlogin_manager = LoginManager()\nlogin_manager.setup_app(app)\n\n@app.route(\"/hello\")\ndef hello():\n    return \"Hello\"\n\nif __name__ == \"__main__\":\n    app.run()\n```\n\nIs your project structured in a similar way?\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/9785729",
            "html_url": "https://github.com/pallets/flask/issues/621#issuecomment-9785729",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/621",
            "id": 9785729,
            "node_id": "MDEyOklzc3VlQ29tbWVudDk3ODU3Mjk=",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2012-10-25T17:09:46Z",
            "updated_at": "2012-10-25T17:09:46Z",
            "author_association": "MEMBER",
            "body": "The one who is eschewing typical Python importing convention is you. I doesn't make any sense for a module to appear somewhere where Flask's **compatibility layer** could find it if you are _eschewing_ typical Python packaging conventions.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/9792920",
            "html_url": "https://github.com/pallets/flask/issues/621#issuecomment-9792920",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/621",
            "id": 9792920,
            "node_id": "MDEyOklzc3VlQ29tbWVudDk3OTI5MjA=",
            "user": {
                "login": "Soviut",
                "id": 226882,
                "node_id": "MDQ6VXNlcjIyNjg4Mg==",
                "avatar_url": "https://avatars1.githubusercontent.com/u/226882?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/Soviut",
                "html_url": "https://github.com/Soviut",
                "followers_url": "https://api.github.com/users/Soviut/followers",
                "following_url": "https://api.github.com/users/Soviut/following{/other_user}",
                "gists_url": "https://api.github.com/users/Soviut/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/Soviut/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Soviut/subscriptions",
                "organizations_url": "https://api.github.com/users/Soviut/orgs",
                "repos_url": "https://api.github.com/users/Soviut/repos",
                "events_url": "https://api.github.com/users/Soviut/events{/privacy}",
                "received_events_url": "https://api.github.com/users/Soviut/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2012-10-25T20:29:51Z",
            "updated_at": "2012-10-25T20:33:10Z",
            "author_association": "NONE",
            "body": "@boris317 My app is structured identically to that.\n\nI had originally put flask_login.py in my root directory but then noticed the /flask/ext/ folder, the assumption being that extensions belonged there. This assumption was based on the `import flask.ext.login` statement.\n\nHowever, I now realize the extension manager clearly doesn't look there. Instead, it looks on the python path as I'd originally expected. My confusion lay in not understanding that the flask.ext module is not a container for extensions, just a loader.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/9793299",
            "html_url": "https://github.com/pallets/flask/issues/621#issuecomment-9793299",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/621",
            "id": 9793299,
            "node_id": "MDEyOklzc3VlQ29tbWVudDk3OTMyOTk=",
            "user": {
                "login": "Soviut",
                "id": 226882,
                "node_id": "MDQ6VXNlcjIyNjg4Mg==",
                "avatar_url": "https://avatars1.githubusercontent.com/u/226882?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/Soviut",
                "html_url": "https://github.com/Soviut",
                "followers_url": "https://api.github.com/users/Soviut/followers",
                "following_url": "https://api.github.com/users/Soviut/following{/other_user}",
                "gists_url": "https://api.github.com/users/Soviut/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/Soviut/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Soviut/subscriptions",
                "organizations_url": "https://api.github.com/users/Soviut/orgs",
                "repos_url": "https://api.github.com/users/Soviut/repos",
                "events_url": "https://api.github.com/users/Soviut/events{/privacy}",
                "received_events_url": "https://api.github.com/users/Soviut/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2012-10-25T20:41:52Z",
            "updated_at": "2012-10-25T20:50:30Z",
            "author_association": "NONE",
            "body": "I also understand that in most cases, package management is the way to go. But in my case, I'm looking for self-containment that requires no additional installations other than Python itself. This isn't unreasonable since its possible with the majority of Python modules and was the only sane way to support different versions of libraries on the same system before the advent of tools like virtualenv.\n\nIt may be archaic, but it's as simple as possible. Given that it's intended for educational purposes, I'd rather my students didn't have to cope with any extraneous tasks or systems. They're not at that stage yet.\n\nI've written an answer to my question on Stack Overflow as well.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/9813214",
            "html_url": "https://github.com/pallets/flask/issues/621#issuecomment-9813214",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/621",
            "id": 9813214,
            "node_id": "MDEyOklzc3VlQ29tbWVudDk4MTMyMTQ=",
            "user": {
                "login": "techniq",
                "id": 177476,
                "node_id": "MDQ6VXNlcjE3NzQ3Ng==",
                "avatar_url": "https://avatars2.githubusercontent.com/u/177476?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/techniq",
                "html_url": "https://github.com/techniq",
                "followers_url": "https://api.github.com/users/techniq/followers",
                "following_url": "https://api.github.com/users/techniq/following{/other_user}",
                "gists_url": "https://api.github.com/users/techniq/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/techniq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/techniq/subscriptions",
                "organizations_url": "https://api.github.com/users/techniq/orgs",
                "repos_url": "https://api.github.com/users/techniq/repos",
                "events_url": "https://api.github.com/users/techniq/events{/privacy}",
                "received_events_url": "https://api.github.com/users/techniq/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2012-10-26T13:41:34Z",
            "updated_at": "2012-10-26T13:41:34Z",
            "author_association": "NONE",
            "body": "Since Google App Engine doesn't allow for virtualenv / site-packages, I copy all my extensions to a \"packages\" directory at the root of the project and then having the following \"path_fixer.py\" file at the root\n\n``` python\n# Allow unzipped packages to be imported from packages folder\nimport os\nimport sys\npackage_dirs = [\"site-packages\", \"packages\"]\n\nfor package_dir in package_dirs:\n    if os.path.exists(package_dir):\n        package_dir_path = os.path.join(os.path.dirname(__file__), package_dir)\n        sys.path.insert(0, package_dir_path)\n\n        # Append zip archives to path for zipimport\n        for filename in os.listdir(package_dir_path):\n            if filename.endswith((\".zip\", \".egg\")):\n                sys.path.insert(0, \"%s/%s\" % (package_dir_path, filename))\n```\n\nI import this module before any entry points (before my main function, in **init**.py of my tests folder, before Flask-Script runs, etc).\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/9814485",
            "html_url": "https://github.com/pallets/flask/issues/621#issuecomment-9814485",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/621",
            "id": 9814485,
            "node_id": "MDEyOklzc3VlQ29tbWVudDk4MTQ0ODU=",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2012-10-26T14:19:36Z",
            "updated_at": "2012-10-26T14:19:36Z",
            "author_association": "MEMBER",
            "body": "+1 @techniq, That's what I used to do on shared webhosting.\n"
        }
    ]
}