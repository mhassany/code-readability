{
    "url": "https://api.github.com/repos/pallets/flask/issues/3291",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/3291/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/3291/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/3291/events",
    "html_url": "https://github.com/pallets/flask/issues/3291",
    "id": 465354956,
    "node_id": "MDU6SXNzdWU0NjUzNTQ5NTY=",
    "number": 3291,
    "title": "Custom Response force_type is now never called",
    "user": {
        "login": "jaos",
        "id": 229517,
        "node_id": "MDQ6VXNlcjIyOTUxNw==",
        "avatar_url": "https://avatars1.githubusercontent.com/u/229517?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jaos",
        "html_url": "https://github.com/jaos",
        "followers_url": "https://api.github.com/users/jaos/followers",
        "following_url": "https://api.github.com/users/jaos/following{/other_user}",
        "gists_url": "https://api.github.com/users/jaos/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jaos/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jaos/subscriptions",
        "organizations_url": "https://api.github.com/users/jaos/orgs",
        "repos_url": "https://api.github.com/users/jaos/repos",
        "events_url": "https://api.github.com/users/jaos/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jaos/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2019-07-08T16:34:06Z",
    "updated_at": "2019-07-08T16:43:25Z",
    "closed_at": "2019-07-08T16:43:25Z",
    "author_association": "NONE",
    "body": "<!-- **This issue tracker is a tool to address bugs in Flask itself.\r\nPlease use the #pocoo IRC channel on freenode or Stack Overflow for general\r\nquestions about using Flask or issues not related to Flask.** -->\r\n\r\n<!-- If you'd like to report a bug in Flask, fill out the template below. Provide\r\nany extra information that may be useful / related to your problem.\r\nIdeally, create an [MCVE](https://stackoverflow.com/help/mcve), which helps us\r\nunderstand the problem and helps check that it is not caused by something in\r\nyour code. -->\r\n\r\nSince #3214 I am no longer able to use a custom Response class to catch and format internal objects.\r\n\r\nIs there a more appropriate way to accomplish the same thing now that 1.1.0 is being picked up in my CI env?\r\n\r\n### Expected Behavior\r\n<!-- Tell us what should happen. -->\r\n\r\n```python\r\nfrom flask import Flask, Response, Blueprint                                    \r\nimport json                                                                     \r\n                                                                                \r\nclass BizModel():                                                               \r\n    def __init__(self, name):                                                   \r\n        self.name = name                                                        \r\n    def to_jsonable(self):                                                      \r\n        return {\"name\": self.name}                                              \r\n                                                                                \r\nclass BizResponse(Response):                                                    \r\n    @classmethod                                                                \r\n    def force_type(cls, rv, environ=None):                                      \r\n        if isinstance(rv, BizModel):                                            \r\n            return Response(json.dumps(rv.to_jsonable(), indent=4), mimetype='application/json', status=200)\r\n        return super(BizResponse, cls).force_type(rv, environ)                  \r\n                                                                                \r\napp = Flask(__name__)                                                           \r\napp.response_class = BizResponse                                                \r\n                                                                                \r\n@app.route('/biz')                                                              \r\ndef showbiz():                                                                  \r\n    return BizModel('showbiz')                                                  \r\n                                                                                \r\nif __name__ == \"__main__\":                                                      \r\n    test = app.test_client()                                                    \r\n    r = test.get('/biz')                                                        \r\n    assert r.is_json                                                            \r\n    assert r.json['name'] == 'showbiz'\r\n```\r\n\r\n### Actual Behavior\r\n<!-- Tell us what happens instead. -->\r\n\r\n```pytb\r\n[2019-07-08 12:24:58,237] ERROR in app: Exception on /biz [GET]\r\nTraceback (most recent call last):\r\n  File \"/private/tmp/py3venv/lib/python3.7/site-packages/Flask-1.1.0-py3.7.egg/flask/app.py\", line 2446, in wsgi_app\r\n    response = self.full_dispatch_request()\r\n  File \"/private/tmp/py3venv/lib/python3.7/site-packages/Flask-1.1.0-py3.7.egg/flask/app.py\", line 1952, in full_dispatch_request\r\n    return self.finalize_request(rv)\r\n  File \"/private/tmp/py3venv/lib/python3.7/site-packages/Flask-1.1.0-py3.7.egg/flask/app.py\", line 1967, in finalize_request\r\n    response = self.make_response(rv)\r\n  File \"/private/tmp/py3venv/lib/python3.7/site-packages/Flask-1.1.0-py3.7.egg/flask/app.py\", line 2130, in make_response\r\n    \" {rv.__class__.__name__}.\".format(rv=rv)\r\nTypeError: The view function did not return a valid response. The return type must be a string, dict, tuple, Response instance, or WSGI callable, but it was a BizModel.                                                                                                                     \r\nTraceback (most recent call last):\r\n  File \"./flask3214.py\", line 28, in <module>\r\n    assert r.is_json\r\nAssertionError\r\n```\r\n\r\n### Environment\r\n\r\n* Python version: 3.7.2\r\n* Flask version: 1.1.0\r\n* Werkzeug version: 0.15.4\r\n",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/509300008",
            "html_url": "https://github.com/pallets/flask/issues/3291#issuecomment-509300008",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/3291",
            "id": 509300008,
            "node_id": "MDEyOklzc3VlQ29tbWVudDUwOTMwMDAwOA==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2019-07-08T16:37:19Z",
            "updated_at": "2019-07-08T16:37:19Z",
            "author_association": "MEMBER",
            "body": "You are misusing `force_type`, which is intended for coercing WSGI responses from WSGI callables. A model is not (typically) a WSGI callable. `force_type` is still called on `Response` subclasses and callables, as intended. You should override `Flask.make_response`:\r\n\r\n```python\r\nclass SpecialFlask(Flask):\r\n    def make_response(self, rv):\r\n        if isinstance(rv, BizModel):\r\n            return Response(...)\r\n        return super().make_response(rv)\r\n```"
        }
    ]
}