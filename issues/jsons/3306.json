{
    "url": "https://api.github.com/repos/pallets/flask/issues/3306",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/3306/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/3306/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/3306/events",
    "html_url": "https://github.com/pallets/flask/issues/3306",
    "id": 470174556,
    "node_id": "MDU6SXNzdWU0NzAxNzQ1NTY=",
    "number": 3306,
    "title": "copy_current_request_context creates new global app context",
    "user": {
        "login": "kaos",
        "id": 72965,
        "node_id": "MDQ6VXNlcjcyOTY1",
        "avatar_url": "https://avatars0.githubusercontent.com/u/72965?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kaos",
        "html_url": "https://github.com/kaos",
        "followers_url": "https://api.github.com/users/kaos/followers",
        "following_url": "https://api.github.com/users/kaos/following{/other_user}",
        "gists_url": "https://api.github.com/users/kaos/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/kaos/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/kaos/subscriptions",
        "organizations_url": "https://api.github.com/users/kaos/orgs",
        "repos_url": "https://api.github.com/users/kaos/repos",
        "events_url": "https://api.github.com/users/kaos/events{/privacy}",
        "received_events_url": "https://api.github.com/users/kaos/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 3,
    "created_at": "2019-07-19T07:12:04Z",
    "updated_at": "2019-09-29T00:22:41Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "Related to #2935 but for `g`.\r\n\r\n### Expected Behavior\r\n\r\nWhen I use `@copy_current_request_context` it should preserve the contents in `flask.g`.\r\n\r\nI would expect that the `g` object is transparent to whether I'm in a normal request context, or one that has been copied using the `copy_current_request_context` decorator in another greenlet.\r\n\r\nI borrowed the very nice test-script from #2935 and adapted it for `g` instead.\r\n\r\n```python\r\nimport concurrent.futures\r\nimport random\r\n\r\nfrom flask import Flask, g, copy_current_request_context, request, session\r\n\r\napp = Flask(__name__)\r\napp.config['SECRET_KEY'] = 'test'\r\nexecutor = concurrent.futures.ThreadPoolExecutor()\r\n\r\n@app.route('/')\r\ndef session_context():\r\n    test_value = random.randint(1, 1001)\r\n    g.test_value = test_value\r\n\r\n    original_context = (\r\n        ('g', getattr(g, 'test_value', None))\r\n    )\r\n\r\n    @copy_current_request_context\r\n    def debug_session():\r\n        return (\r\n            ('g', getattr(g, 'test_value', None))\r\n        )\r\n\r\n    future = executor.submit(debug_session)\r\n    print('original_context:', original_context)\r\n    print('copied_context:', future.result())\r\n    return 'ok'\r\n\r\n\r\nif __name__ == '__main__':\r\n    client = app.test_client()\r\n    print('### Request ###')\r\n    client.get('/')\r\n```\r\n\r\n### Actual Behavior\r\n\r\nI get a new empty `g` object in the decorated function.\r\n\r\n```\r\n### Request ###\r\noriginal_context: ('g', 750)\r\ncopied_context: ('g', None)\r\n```\r\n\r\n### Environment\r\n\r\n* Python version: 3.7.3\r\n* Flask version: 1.1.1\r\n* Werkzeug version: 0.15.5\r\n\r\n",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/514247356",
            "html_url": "https://github.com/pallets/flask/issues/3306#issuecomment-514247356",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/3306",
            "id": 514247356,
            "node_id": "MDEyOklzc3VlQ29tbWVudDUxNDI0NzM1Ng==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2019-07-23T14:57:10Z",
            "updated_at": "2019-07-23T14:57:10Z",
            "author_association": "MEMBER",
            "body": "I can see why it's confusing, but I'm not sure how we would change this. You copied the *request* context, not the *app* context. Pushing a request context pushes an app context if there isn't one, and that's what `g` is tied to."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/514651816",
            "html_url": "https://github.com/pallets/flask/issues/3306#issuecomment-514651816",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/3306",
            "id": 514651816,
            "node_id": "MDEyOklzc3VlQ29tbWVudDUxNDY1MTgxNg==",
            "user": {
                "login": "kaos",
                "id": 72965,
                "node_id": "MDQ6VXNlcjcyOTY1",
                "avatar_url": "https://avatars0.githubusercontent.com/u/72965?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/kaos",
                "html_url": "https://github.com/kaos",
                "followers_url": "https://api.github.com/users/kaos/followers",
                "following_url": "https://api.github.com/users/kaos/following{/other_user}",
                "gists_url": "https://api.github.com/users/kaos/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/kaos/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/kaos/subscriptions",
                "organizations_url": "https://api.github.com/users/kaos/orgs",
                "repos_url": "https://api.github.com/users/kaos/repos",
                "events_url": "https://api.github.com/users/kaos/events{/privacy}",
                "received_events_url": "https://api.github.com/users/kaos/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2019-07-24T14:18:46Z",
            "updated_at": "2019-07-24T14:19:14Z",
            "author_association": "NONE",
            "body": "Confusing indeed. What is the purpose of the app context, then? \r\nHow are you supposed to use it, that isn't solved by using the request context? \r\nI've adapted, and now use the request context rather than the app context, but it wasn't really clear to me that we could use the request context for storing arbitrary data. Also, it lacks some of the get/set methods present on `g`, adding to the assumption that `g` is the object to put your data in, rather than the request context.\r\n\r\nWouldn't it make sense to keep the same app context, also for the newly pushed (copied) request context?"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/536235466",
            "html_url": "https://github.com/pallets/flask/issues/3306#issuecomment-536235466",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/3306",
            "id": 536235466,
            "node_id": "MDEyOklzc3VlQ29tbWVudDUzNjIzNTQ2Ng==",
            "user": {
                "login": "dchevell",
                "id": 4359608,
                "node_id": "MDQ6VXNlcjQzNTk2MDg=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/4359608?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/dchevell",
                "html_url": "https://github.com/dchevell",
                "followers_url": "https://api.github.com/users/dchevell/followers",
                "following_url": "https://api.github.com/users/dchevell/following{/other_user}",
                "gists_url": "https://api.github.com/users/dchevell/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/dchevell/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dchevell/subscriptions",
                "organizations_url": "https://api.github.com/users/dchevell/orgs",
                "repos_url": "https://api.github.com/users/dchevell/repos",
                "events_url": "https://api.github.com/users/dchevell/events{/privacy}",
                "received_events_url": "https://api.github.com/users/dchevell/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2019-09-29T00:22:41Z",
            "updated_at": "2019-09-29T00:22:41Z",
            "author_association": "CONTRIBUTOR",
            "body": "@kaos for what it's worth, I discovered this when I was raising #2935 and `g` being bound to the app context caught be by surprise too. I haven't found a great solution, because pushing/copying the app context a) doesn't have a built in decorator (leading me to believe it's not something we're expected to be doing) and b) tends to have weird side effects when used in combination with important extensions like Flask-SQLAlchemy.\r\n\r\nI'm currently trying to untangle one of these side effects in my own Flask-Executor extension: https://github.com/dchevell/flask-executor/issues/15. FWIW, that extension does what you're trying to do automatically - by pushing the app context with every request it supports accessing `g` from threads, and I suspect your example would succeed there. \r\n\r\nAssuming this is closed as \"not a bug\", perhaps you could pop over there and see if it solves your problem."
        }
    ]
}