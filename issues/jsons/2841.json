{
    "url": "https://api.github.com/repos/pallets/flask/issues/2841",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/2841/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/2841/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/2841/events",
    "html_url": "https://github.com/pallets/flask/issues/2841",
    "id": 335779821,
    "node_id": "MDU6SXNzdWUzMzU3Nzk4MjE=",
    "number": 2841,
    "title": "Flask 1.0: global exception handler handles not found now?",
    "user": {
        "login": "danieljacobs1",
        "id": 19263953,
        "node_id": "MDQ6VXNlcjE5MjYzOTUz",
        "avatar_url": "https://avatars2.githubusercontent.com/u/19263953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/danieljacobs1",
        "html_url": "https://github.com/danieljacobs1",
        "followers_url": "https://api.github.com/users/danieljacobs1/followers",
        "following_url": "https://api.github.com/users/danieljacobs1/following{/other_user}",
        "gists_url": "https://api.github.com/users/danieljacobs1/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/danieljacobs1/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/danieljacobs1/subscriptions",
        "organizations_url": "https://api.github.com/users/danieljacobs1/orgs",
        "repos_url": "https://api.github.com/users/danieljacobs1/repos",
        "events_url": "https://api.github.com/users/danieljacobs1/events{/privacy}",
        "received_events_url": "https://api.github.com/users/danieljacobs1/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 32876,
            "node_id": "MDU6TGFiZWwzMjg3Ng==",
            "url": "https://api.github.com/repos/pallets/flask/labels/docs",
            "name": "docs",
            "color": "0e8a16",
            "default": false,
            "description": null
        }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": {
        "url": "https://api.github.com/repos/pallets/flask/milestones/3",
        "html_url": "https://github.com/pallets/flask/milestone/3",
        "labels_url": "https://api.github.com/repos/pallets/flask/milestones/3/labels",
        "id": 3093266,
        "node_id": "MDk6TWlsZXN0b25lMzA5MzI2Ng==",
        "number": 3,
        "title": "1.1.0",
        "description": "",
        "creator": {
            "login": "davidism",
            "id": 1242887,
            "node_id": "MDQ6VXNlcjEyNDI4ODc=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/davidism",
            "html_url": "https://github.com/davidism",
            "followers_url": "https://api.github.com/users/davidism/followers",
            "following_url": "https://api.github.com/users/davidism/following{/other_user}",
            "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
            "organizations_url": "https://api.github.com/users/davidism/orgs",
            "repos_url": "https://api.github.com/users/davidism/repos",
            "events_url": "https://api.github.com/users/davidism/events{/privacy}",
            "received_events_url": "https://api.github.com/users/davidism/received_events",
            "type": "User",
            "site_admin": false
        },
        "open_issues": 0,
        "closed_issues": 48,
        "state": "closed",
        "created_at": "2018-02-06T16:14:43Z",
        "updated_at": "2019-07-06T22:03:23Z",
        "due_on": null,
        "closed_at": "2019-07-06T22:03:23Z"
    },
    "comments": 12,
    "created_at": "2018-06-26T11:41:53Z",
    "updated_at": "2019-06-21T15:34:00Z",
    "closed_at": "2019-06-21T15:34:00Z",
    "author_association": "NONE",
    "body": "Hi,\r\n\r\nWe're looking at upgrading from Flask 0.12 to 1.0, and have run into an issue with routes that don't exist.\r\n\r\nWe have a custom error handler that we install for Python's built-in `Exception` class so that we can have a useful error message should any error occur during request execution. With Flask 1.0, we are finding that URLs that don't exist are triggering a call to the custom error handler.\r\n\r\nWe would like to preserve the behaviour so that non-existent URLs continue to return a 404/Not Found response.\r\n\r\nI've tried reading the docs and couldn't see a way, so might have missed something:\r\nhttp://flask.pocoo.org/docs/1.0/errorhandling/#error-handlers\r\n\r\nWhat is the recommended way of doing this? Or is this a bug?\r\n\r\nI wasn't 100% sure, but this could be the same as https://github.com/pallets/flask/issues/2778?\r\n\r\n---\r\n\r\n### Expected Behavior\r\n\r\nWith the Flask app running as below, the following command:\r\n\r\n`curl -XGET http://127.0.0.1:5001/does-not-exist`\r\n\r\nshould return 404/Not Found.\r\n\r\n\r\n```\r\n#! python\r\n\r\n\"\"\"\r\nSimple Flask app with a global exception handler.\r\n\"\"\"\r\n\r\nfrom http import HTTPStatus\r\n\r\nfrom flask import Flask\r\n\r\n\r\napp = Flask(__name__)\r\n\r\n\r\n@app.errorhandler(Exception)\r\ndef global_exception_handler(err):\r\n    \"\"\" Global exception handler.\r\n    \"\"\"\r\n    print(\"In global_exception_handler\", err)\r\n    return \"From global_exception_handler\\n\", HTTPStatus.INTERNAL_SERVER_ERROR\r\n\r\n\r\n@app.route(\"/error\")\r\ndef error():\r\n    \"\"\" Simple endpoint that raises an exception\r\n    \"\"\"\r\n    # simulate a real error that can occur during request processing\r\n    raise AttributeError(\"These aren't the attributes you are looking for.\")\r\n\r\n\r\n@app.route(\"/simple\")\r\ndef simple():\r\n    \"\"\" Simple endpoint\r\n    \"\"\"\r\n    # sanity check\r\n    return \"Hello World!\\n\", HTTPStatus.OK\r\n\r\n\r\ndef main():\r\n    \"\"\" The entry point\r\n    \"\"\"\r\n    app.run(port=5001)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n\r\n```\r\n\r\n### Actual Behavior\r\n\r\nOur global exception handler is invoked and instead of 404/Not found we get what it returns (500/internal server error).\r\n\r\n\r\nCommand line output when running the app with Flask 1.0.2:\r\n\r\n```\r\ndan@dan-desktop:/tmp $ curl -XGET http://127.0.0.1:5001/error\r\nFrom global_exception_handler\r\ndan@dan-desktop:/tmp $ curl -XGET http://127.0.0.1:5001/does-not-exist\r\nFrom global_exception_handler\r\ndan@dan-desktop:/tmp $ curl -XGET http://127.0.0.1:5001/simple\r\nHello World!\r\n```\r\n\r\nCommand line output when running the app with Flask 0.12.4:\r\n\r\n```\r\ndan@dan-desktop:/tmp $ curl -XGET http://127.0.0.1:5001/error\r\nFrom global_exception_handler\r\ndan@dan-desktop:/tmp $ curl -XGET http://127.0.0.1:5001/does-not-exist\r\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\r\n<title>404 Not Found</title>\r\n<h1>Not Found</h1>\r\n<p>The requested URL was not found on the server.  If you entered the URL manually please check your spelling and try again.</p>\r\ndan@dan-desktop:/tmp $ curl -XGET http://127.0.0.1:5001/simple\r\nHello World!\r\n```\r\n\r\n### Environment\r\n\r\n* Python version: Python 3.6.2\r\n* Flask version: 1.0.2\r\n* Werkzeug version: 0.14.1",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/402910928",
            "html_url": "https://github.com/pallets/flask/issues/2841#issuecomment-402910928",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2841",
            "id": 402910928,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQwMjkxMDkyOA==",
            "user": {
                "login": "mecforlove",
                "id": 18254803,
                "node_id": "MDQ6VXNlcjE4MjU0ODAz",
                "avatar_url": "https://avatars1.githubusercontent.com/u/18254803?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/mecforlove",
                "html_url": "https://github.com/mecforlove",
                "followers_url": "https://api.github.com/users/mecforlove/followers",
                "following_url": "https://api.github.com/users/mecforlove/following{/other_user}",
                "gists_url": "https://api.github.com/users/mecforlove/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/mecforlove/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mecforlove/subscriptions",
                "organizations_url": "https://api.github.com/users/mecforlove/orgs",
                "repos_url": "https://api.github.com/users/mecforlove/repos",
                "events_url": "https://api.github.com/users/mecforlove/events{/privacy}",
                "received_events_url": "https://api.github.com/users/mecforlove/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2018-07-06T02:56:54Z",
            "updated_at": "2018-07-06T02:56:54Z",
            "author_association": "NONE",
            "body": "I think registering an handler with `Exception` is too hack.Maybe you can create a base custom Exception for your global error handler:\r\n```python\r\nclass CustomGlobalException(Exception):\r\n    pass\r\n```"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/402973961",
            "html_url": "https://github.com/pallets/flask/issues/2841#issuecomment-402973961",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2841",
            "id": 402973961,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQwMjk3Mzk2MQ==",
            "user": {
                "login": "danieljacobs1",
                "id": 19263953,
                "node_id": "MDQ6VXNlcjE5MjYzOTUz",
                "avatar_url": "https://avatars2.githubusercontent.com/u/19263953?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/danieljacobs1",
                "html_url": "https://github.com/danieljacobs1",
                "followers_url": "https://api.github.com/users/danieljacobs1/followers",
                "following_url": "https://api.github.com/users/danieljacobs1/following{/other_user}",
                "gists_url": "https://api.github.com/users/danieljacobs1/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/danieljacobs1/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/danieljacobs1/subscriptions",
                "organizations_url": "https://api.github.com/users/danieljacobs1/orgs",
                "repos_url": "https://api.github.com/users/danieljacobs1/repos",
                "events_url": "https://api.github.com/users/danieljacobs1/events{/privacy}",
                "received_events_url": "https://api.github.com/users/danieljacobs1/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2018-07-06T09:00:31Z",
            "updated_at": "2018-07-06T09:00:31Z",
            "author_association": "NONE",
            "body": "> Maybe you can create a base custom Exception for your global error handler:\r\n\r\nUnfortunately that won't help because exceptions from third-party libraries won't subclass this. For instance, in our Flask app we use SQLAlchemy, whose exceptions definitely don't subclass from this and will end up being uncaught."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/402974156",
            "html_url": "https://github.com/pallets/flask/issues/2841#issuecomment-402974156",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2841",
            "id": 402974156,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQwMjk3NDE1Ng==",
            "user": {
                "login": "ThiefMaster",
                "id": 179599,
                "node_id": "MDQ6VXNlcjE3OTU5OQ==",
                "avatar_url": "https://avatars1.githubusercontent.com/u/179599?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/ThiefMaster",
                "html_url": "https://github.com/ThiefMaster",
                "followers_url": "https://api.github.com/users/ThiefMaster/followers",
                "following_url": "https://api.github.com/users/ThiefMaster/following{/other_user}",
                "gists_url": "https://api.github.com/users/ThiefMaster/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/ThiefMaster/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ThiefMaster/subscriptions",
                "organizations_url": "https://api.github.com/users/ThiefMaster/orgs",
                "repos_url": "https://api.github.com/users/ThiefMaster/repos",
                "events_url": "https://api.github.com/users/ThiefMaster/events{/privacy}",
                "received_events_url": "https://api.github.com/users/ThiefMaster/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2018-07-06T09:01:16Z",
            "updated_at": "2018-07-06T09:01:16Z",
            "author_association": "MEMBER",
            "body": "Also, it is perfectly valid that you want to have a custom handler for all exceptions so you can show a nicer error to users."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/402976315",
            "html_url": "https://github.com/pallets/flask/issues/2841#issuecomment-402976315",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2841",
            "id": 402976315,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQwMjk3NjMxNQ==",
            "user": {
                "login": "mecforlove",
                "id": 18254803,
                "node_id": "MDQ6VXNlcjE4MjU0ODAz",
                "avatar_url": "https://avatars1.githubusercontent.com/u/18254803?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/mecforlove",
                "html_url": "https://github.com/mecforlove",
                "followers_url": "https://api.github.com/users/mecforlove/followers",
                "following_url": "https://api.github.com/users/mecforlove/following{/other_user}",
                "gists_url": "https://api.github.com/users/mecforlove/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/mecforlove/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mecforlove/subscriptions",
                "organizations_url": "https://api.github.com/users/mecforlove/orgs",
                "repos_url": "https://api.github.com/users/mecforlove/repos",
                "events_url": "https://api.github.com/users/mecforlove/events{/privacy}",
                "received_events_url": "https://api.github.com/users/mecforlove/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2018-07-06T09:09:56Z",
            "updated_at": "2018-07-06T09:09:56Z",
            "author_association": "NONE",
            "body": "I see. So it's an issue about how flask deal with url mapping failure. Is it a bug?"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/403037572",
            "html_url": "https://github.com/pallets/flask/issues/2841#issuecomment-403037572",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2841",
            "id": 403037572,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQwMzAzNzU3Mg==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2018-07-06T13:40:50Z",
            "updated_at": "2018-07-06T15:57:39Z",
            "author_association": "MEMBER",
            "body": "I understand the issue, and I'm not dismissing it.\r\n\r\nYou're basically doing the equivalent of `except Exception`, which is not a good design pattern in most cases. Flask fixed error handlers so this actually propagates correctly, and now people are noticing that they didn't write their handler robustly enough for this very generic exception.\r\n\r\nI'm not sure what the answer here is. What do you expect Flask to do here while still respecting the MRO of other exceptions? A temporary fix is to return any `HTTPException` with a non-error code.\r\n\r\n```python\r\n@app.errorhandler(Exception)\r\ndef handle_generic(e):\r\n    if isinstance(e, HTTPException) and (500 <= e.code < 600):\r\n        return e\r\n\r\n    # handle actual error\r\n```"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/403058056",
            "html_url": "https://github.com/pallets/flask/issues/2841#issuecomment-403058056",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2841",
            "id": 403058056,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQwMzA1ODA1Ng==",
            "user": {
                "login": "danieljacobs1",
                "id": 19263953,
                "node_id": "MDQ6VXNlcjE5MjYzOTUz",
                "avatar_url": "https://avatars2.githubusercontent.com/u/19263953?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/danieljacobs1",
                "html_url": "https://github.com/danieljacobs1",
                "followers_url": "https://api.github.com/users/danieljacobs1/followers",
                "following_url": "https://api.github.com/users/danieljacobs1/following{/other_user}",
                "gists_url": "https://api.github.com/users/danieljacobs1/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/danieljacobs1/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/danieljacobs1/subscriptions",
                "organizations_url": "https://api.github.com/users/danieljacobs1/orgs",
                "repos_url": "https://api.github.com/users/danieljacobs1/repos",
                "events_url": "https://api.github.com/users/danieljacobs1/events{/privacy}",
                "received_events_url": "https://api.github.com/users/danieljacobs1/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2018-07-06T14:54:52Z",
            "updated_at": "2018-07-06T14:54:52Z",
            "author_association": "NONE",
            "body": "This isn't what's causing a problem for us, but rather the fact that failures in routing look ups (in the Flask app's routing table) call the global exception handler in Flask 1.0 but didn't before.\r\n\r\nI would have to add this:\r\n```\r\nif isinstance(e, werkzeug.exceptions.NotFound):\r\n        return e\r\n```\r\nto the exception handler to obtain 404/Not Found status in the above `curl` examples, rather than @davidism's suggestion.\r\n\r\n(Of course, our endpoints might also return 404/Not Found since they rely on databases etc.)"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/403058432",
            "html_url": "https://github.com/pallets/flask/issues/2841#issuecomment-403058432",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2841",
            "id": 403058432,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQwMzA1ODQzMg==",
            "user": {
                "login": "ThiefMaster",
                "id": 179599,
                "node_id": "MDQ6VXNlcjE3OTU5OQ==",
                "avatar_url": "https://avatars1.githubusercontent.com/u/179599?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/ThiefMaster",
                "html_url": "https://github.com/ThiefMaster",
                "followers_url": "https://api.github.com/users/ThiefMaster/followers",
                "following_url": "https://api.github.com/users/ThiefMaster/following{/other_user}",
                "gists_url": "https://api.github.com/users/ThiefMaster/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/ThiefMaster/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ThiefMaster/subscriptions",
                "organizations_url": "https://api.github.com/users/ThiefMaster/orgs",
                "repos_url": "https://api.github.com/users/ThiefMaster/repos",
                "events_url": "https://api.github.com/users/ThiefMaster/events{/privacy}",
                "received_events_url": "https://api.github.com/users/ThiefMaster/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2018-07-06T14:56:03Z",
            "updated_at": "2018-07-06T14:56:03Z",
            "author_association": "MEMBER",
            "body": "Adding this handler might do what you are looking for:\r\n\r\n```python\r\n@app.errorhandler(HTTPException)\r\ndef handle_http_exception(e):\r\n    return e\r\n```"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/403074312",
            "html_url": "https://github.com/pallets/flask/issues/2841#issuecomment-403074312",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2841",
            "id": 403074312,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQwMzA3NDMxMg==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2018-07-06T15:54:56Z",
            "updated_at": "2018-07-06T15:58:26Z",
            "author_association": "MEMBER",
            "body": "> failures in routing look ups (in the Flask app's routing table) call the global exception handler in Flask 1.0 but didn't before\r\n\r\nThey always did, but it didn't propagate correctly.\r\n\r\nNot sure what's different about your example from mine, `NotFound` is a subclass of `HTTPException` so yours is just a more specific case."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/403075972",
            "html_url": "https://github.com/pallets/flask/issues/2841#issuecomment-403075972",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2841",
            "id": 403075972,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQwMzA3NTk3Mg==",
            "user": {
                "login": "danieljacobs1",
                "id": 19263953,
                "node_id": "MDQ6VXNlcjE5MjYzOTUz",
                "avatar_url": "https://avatars2.githubusercontent.com/u/19263953?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/danieljacobs1",
                "html_url": "https://github.com/danieljacobs1",
                "followers_url": "https://api.github.com/users/danieljacobs1/followers",
                "following_url": "https://api.github.com/users/danieljacobs1/following{/other_user}",
                "gists_url": "https://api.github.com/users/danieljacobs1/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/danieljacobs1/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/danieljacobs1/subscriptions",
                "organizations_url": "https://api.github.com/users/danieljacobs1/orgs",
                "repos_url": "https://api.github.com/users/danieljacobs1/repos",
                "events_url": "https://api.github.com/users/danieljacobs1/events{/privacy}",
                "received_events_url": "https://api.github.com/users/danieljacobs1/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2018-07-06T16:01:14Z",
            "updated_at": "2018-07-06T16:01:30Z",
            "author_association": "NONE",
            "body": "> They always did, but it didn't propagate correctly.\r\n\r\nThanks! This is what I didn't understand properly. :man_facepalming: "
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/403078114",
            "html_url": "https://github.com/pallets/flask/issues/2841#issuecomment-403078114",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2841",
            "id": 403078114,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQwMzA3ODExNA==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2018-07-06T16:09:03Z",
            "updated_at": "2018-07-06T16:09:35Z",
            "author_association": "MEMBER",
            "body": "What should Flask do here, if anything? Adding some special case so that `except Exception` isn't actually completely generic doesn't seem correct. Maybe we need to document this better so that users know they need to handle *all* unhandled exceptions?\r\n\r\nRelated to #2778."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/403085464",
            "html_url": "https://github.com/pallets/flask/issues/2841#issuecomment-403085464",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2841",
            "id": 403085464,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQwMzA4NTQ2NA==",
            "user": {
                "login": "danieljacobs1",
                "id": 19263953,
                "node_id": "MDQ6VXNlcjE5MjYzOTUz",
                "avatar_url": "https://avatars2.githubusercontent.com/u/19263953?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/danieljacobs1",
                "html_url": "https://github.com/danieljacobs1",
                "followers_url": "https://api.github.com/users/danieljacobs1/followers",
                "following_url": "https://api.github.com/users/danieljacobs1/following{/other_user}",
                "gists_url": "https://api.github.com/users/danieljacobs1/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/danieljacobs1/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/danieljacobs1/subscriptions",
                "organizations_url": "https://api.github.com/users/danieljacobs1/orgs",
                "repos_url": "https://api.github.com/users/danieljacobs1/repos",
                "events_url": "https://api.github.com/users/danieljacobs1/events{/privacy}",
                "received_events_url": "https://api.github.com/users/danieljacobs1/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2018-07-06T16:37:42Z",
            "updated_at": "2018-07-06T16:37:42Z",
            "author_association": "NONE",
            "body": "> Maybe we need to document this better so that users know they need to handle all unhandled exceptions?\r\n\r\nThis is probably the most useful thing to do, and (for people like me) emphasising that the handlers also deal with exceptions outside of view function code."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/455550628",
            "html_url": "https://github.com/pallets/flask/issues/2841#issuecomment-455550628",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2841",
            "id": 455550628,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NTU1MDYyOA==",
            "user": {
                "login": "Flameeyes",
                "id": 74834,
                "node_id": "MDQ6VXNlcjc0ODM0",
                "avatar_url": "https://avatars0.githubusercontent.com/u/74834?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/Flameeyes",
                "html_url": "https://github.com/Flameeyes",
                "followers_url": "https://api.github.com/users/Flameeyes/followers",
                "following_url": "https://api.github.com/users/Flameeyes/following{/other_user}",
                "gists_url": "https://api.github.com/users/Flameeyes/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/Flameeyes/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Flameeyes/subscriptions",
                "organizations_url": "https://api.github.com/users/Flameeyes/orgs",
                "repos_url": "https://api.github.com/users/Flameeyes/repos",
                "events_url": "https://api.github.com/users/Flameeyes/events{/privacy}",
                "received_events_url": "https://api.github.com/users/Flameeyes/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2019-01-18T13:44:38Z",
            "updated_at": "2019-01-18T13:44:38Z",
            "author_association": "NONE",
            "body": "I just stumbled across this behaviour while trying to upgrade Flask for an app I didn't write.\r\n\r\nI found a cleaner workaround by using\r\n\r\n```python\r\n@app.errorhandler(http_client.INTERNAL_SERVER_ERROR)\r\ndef generic_error_handler(error):\r\n  ...\r\n```\r\n\r\nThis passes through any handler that already provided more specific error codes, such as `BAD_REQUEST` or `NOT_FOUND`.\r\n"
        }
    ]
}