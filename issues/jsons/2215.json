{
    "url": "https://api.github.com/repos/pallets/flask/issues/2215",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/2215/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/2215/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/2215/events",
    "html_url": "https://github.com/pallets/flask/issues/2215",
    "id": 215442841,
    "node_id": "MDU6SXNzdWUyMTU0NDI4NDE=",
    "number": 2215,
    "title": "Support for dict-like arguments in request.args",
    "user": {
        "login": "Mahi",
        "id": 11020883,
        "node_id": "MDQ6VXNlcjExMDIwODgz",
        "avatar_url": "https://avatars3.githubusercontent.com/u/11020883?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Mahi",
        "html_url": "https://github.com/Mahi",
        "followers_url": "https://api.github.com/users/Mahi/followers",
        "following_url": "https://api.github.com/users/Mahi/following{/other_user}",
        "gists_url": "https://api.github.com/users/Mahi/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Mahi/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Mahi/subscriptions",
        "organizations_url": "https://api.github.com/users/Mahi/orgs",
        "repos_url": "https://api.github.com/users/Mahi/repos",
        "events_url": "https://api.github.com/users/Mahi/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Mahi/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 4,
    "created_at": "2017-03-20T14:44:59Z",
    "updated_at": "2017-03-21T12:40:10Z",
    "closed_at": "2017-03-21T12:25:02Z",
    "author_association": "NONE",
    "body": "Sometimes you need key-value pairs in your query params, and at those times it would be nice to have a built-in support. Here's what I've seen some APIs use, which looks reasonable to me:\r\n\r\n    http://example.com/api/search?name=Markus&hobby[football]=1&hobby[basketball]=0\r\n\r\nWhich would construct `request.args` like so:\r\n\r\n    {\r\n        'name': 'Markus',\r\n        'hobby': {\r\n            'football': 1,\r\n            'basketball': 0,\r\n        }\r\n    }",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/287868334",
            "html_url": "https://github.com/pallets/flask/issues/2215#issuecomment-287868334",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2215",
            "id": 287868334,
            "node_id": "MDEyOklzc3VlQ29tbWVudDI4Nzg2ODMzNA==",
            "user": {
                "login": "ThiefMaster",
                "id": 179599,
                "node_id": "MDQ6VXNlcjE3OTU5OQ==",
                "avatar_url": "https://avatars1.githubusercontent.com/u/179599?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/ThiefMaster",
                "html_url": "https://github.com/ThiefMaster",
                "followers_url": "https://api.github.com/users/ThiefMaster/followers",
                "following_url": "https://api.github.com/users/ThiefMaster/following{/other_user}",
                "gists_url": "https://api.github.com/users/ThiefMaster/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/ThiefMaster/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ThiefMaster/subscriptions",
                "organizations_url": "https://api.github.com/users/ThiefMaster/orgs",
                "repos_url": "https://api.github.com/users/ThiefMaster/repos",
                "events_url": "https://api.github.com/users/ThiefMaster/events{/privacy}",
                "received_events_url": "https://api.github.com/users/ThiefMaster/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2017-03-20T19:17:23Z",
            "updated_at": "2017-03-20T19:17:23Z",
            "author_association": "MEMBER",
            "body": "I think the better solution for this is to POST a JSON payload.\r\n\r\nEither way, the format of such nested values would probably be application-specific - some use `foo[bar]`, others would prefer `foo.bar`. Flask on the other hand isn't really opinionated in most regards.\r\n\r\nFWIW, in your example a URL like this would be much cleaner (not sending deselected values at all.\r\n\r\n    /api/search?name=Markus&hobby=football\r\n\r\nTo handle multiple values for an option you'd  use `request.args.getlist('hobby')`\r\n\r\n\r\nPS: Letting the client change the type of `request.*` items is unacceptable for sure, this was (is?) already cancerous in PHP (code expecting a string suddenly getting an array etc). So you'd need something like `.getstruct()` similar to `.getlist()` but I'm strongly \ud83d\udc4e to this idea nonetheless."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/288051681",
            "html_url": "https://github.com/pallets/flask/issues/2215#issuecomment-288051681",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2215",
            "id": 288051681,
            "node_id": "MDEyOklzc3VlQ29tbWVudDI4ODA1MTY4MQ==",
            "user": {
                "login": "Mahi",
                "id": 11020883,
                "node_id": "MDQ6VXNlcjExMDIwODgz",
                "avatar_url": "https://avatars3.githubusercontent.com/u/11020883?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/Mahi",
                "html_url": "https://github.com/Mahi",
                "followers_url": "https://api.github.com/users/Mahi/followers",
                "following_url": "https://api.github.com/users/Mahi/following{/other_user}",
                "gists_url": "https://api.github.com/users/Mahi/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/Mahi/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Mahi/subscriptions",
                "organizations_url": "https://api.github.com/users/Mahi/orgs",
                "repos_url": "https://api.github.com/users/Mahi/repos",
                "events_url": "https://api.github.com/users/Mahi/events{/privacy}",
                "received_events_url": "https://api.github.com/users/Mahi/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2017-03-21T11:33:20Z",
            "updated_at": "2017-03-21T11:34:59Z",
            "author_association": "NONE",
            "body": "> FWIW, in your example a URL like this would be much cleaner (not sending deselected values at all.\r\n>\r\n> `/api/search?name=Markus&hobby=football`\r\n\r\nThis wouldn't quite work, since I want to particularly search for Markus who *does* play football and *does not* play basketball. I don't care if he plays ice hockey or not. Surely I could add `hobby_not` param, but the more complex the search gets, the more complex this would get. Also, sometimes it's not just `0`/`1` for the value, maybe you want a really complex attribute search for a free key-value pair.\r\n\r\n> I think the better solution for this is to POST a JSON payload.\r\n\r\nBetter in terms of programming, but often harder to use for the clients using the search, unfortunately.\r\n\r\n> some use `foo[bar]`, others would prefer `foo.bar`\r\n\r\nEveryone has their preferences, sure, but right now we have no option at all to do this. I don't mind if it's `foo[bar]` or `foo.bar` or `<:foo:>//--->@bar@` (okay I do mind that) as long as we'd have *some* way of doing this. Yes of course someone might argue that `foo.bar` would've been better than `foo[bar]`, but I don't think anyone would argue at that point that having nothing would've been better than having the \"less preferred\" one."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/288052758",
            "html_url": "https://github.com/pallets/flask/issues/2215#issuecomment-288052758",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2215",
            "id": 288052758,
            "node_id": "MDEyOklzc3VlQ29tbWVudDI4ODA1Mjc1OA==",
            "user": {
                "login": "ThiefMaster",
                "id": 179599,
                "node_id": "MDQ6VXNlcjE3OTU5OQ==",
                "avatar_url": "https://avatars1.githubusercontent.com/u/179599?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/ThiefMaster",
                "html_url": "https://github.com/ThiefMaster",
                "followers_url": "https://api.github.com/users/ThiefMaster/followers",
                "following_url": "https://api.github.com/users/ThiefMaster/following{/other_user}",
                "gists_url": "https://api.github.com/users/ThiefMaster/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/ThiefMaster/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ThiefMaster/subscriptions",
                "organizations_url": "https://api.github.com/users/ThiefMaster/orgs",
                "repos_url": "https://api.github.com/users/ThiefMaster/repos",
                "events_url": "https://api.github.com/users/ThiefMaster/events{/privacy}",
                "received_events_url": "https://api.github.com/users/ThiefMaster/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2017-03-21T11:38:27Z",
            "updated_at": "2017-03-21T11:38:27Z",
            "author_association": "MEMBER",
            "body": "I think you should be doing it in your application. `args = parse_structured_args(request.args)` wouldn't be too ugly. And if you want to use it for `request.args` you can always override the storage class for `request.args` on your Flask instance (but in that case I'd really go for a subclass that only exposes structured data when using e.g. `.getstruct()`)"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/288066123",
            "html_url": "https://github.com/pallets/flask/issues/2215#issuecomment-288066123",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2215",
            "id": 288066123,
            "node_id": "MDEyOklzc3VlQ29tbWVudDI4ODA2NjEyMw==",
            "user": {
                "login": "Mahi",
                "id": 11020883,
                "node_id": "MDQ6VXNlcjExMDIwODgz",
                "avatar_url": "https://avatars3.githubusercontent.com/u/11020883?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/Mahi",
                "html_url": "https://github.com/Mahi",
                "followers_url": "https://api.github.com/users/Mahi/followers",
                "following_url": "https://api.github.com/users/Mahi/following{/other_user}",
                "gists_url": "https://api.github.com/users/Mahi/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/Mahi/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Mahi/subscriptions",
                "organizations_url": "https://api.github.com/users/Mahi/orgs",
                "repos_url": "https://api.github.com/users/Mahi/repos",
                "events_url": "https://api.github.com/users/Mahi/events{/privacy}",
                "received_events_url": "https://api.github.com/users/Mahi/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2017-03-21T12:40:10Z",
            "updated_at": "2017-03-21T12:40:10Z",
            "author_association": "NONE",
            "body": "Yeah that's what I'm doing right now, but I was thinking others might want it too. What's the main reason not to have it built-in though? Adding `.getstruct()` would still be completely backwards compatible."
        }
    ]
}