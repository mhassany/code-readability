{
    "url": "https://api.github.com/repos/pallets/flask/issues/2563",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/2563/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/2563/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/2563/events",
    "html_url": "https://github.com/pallets/flask/issues/2563",
    "id": 283219331,
    "node_id": "MDU6SXNzdWUyODMyMTkzMzE=",
    "number": 2563,
    "title": "teardown_request not executing on first request in debug/uwsgi (works without debug)",
    "user": {
        "login": "iScrE4m",
        "id": 6594163,
        "node_id": "MDQ6VXNlcjY1OTQxNjM=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/6594163?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/iScrE4m",
        "html_url": "https://github.com/iScrE4m",
        "followers_url": "https://api.github.com/users/iScrE4m/followers",
        "following_url": "https://api.github.com/users/iScrE4m/following{/other_user}",
        "gists_url": "https://api.github.com/users/iScrE4m/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/iScrE4m/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/iScrE4m/subscriptions",
        "organizations_url": "https://api.github.com/users/iScrE4m/orgs",
        "repos_url": "https://api.github.com/users/iScrE4m/repos",
        "events_url": "https://api.github.com/users/iScrE4m/events{/privacy}",
        "received_events_url": "https://api.github.com/users/iScrE4m/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 5,
    "created_at": "2017-12-19T12:57:19Z",
    "updated_at": "2017-12-23T20:51:48Z",
    "closed_at": "2017-12-23T16:52:50Z",
    "author_association": "NONE",
    "body": "### Expected Behavior\r\n\r\nGiven we have an app with a `teardown_request` and a `route` that always raises exception, when the app is first launched either with `debug=True` or through `uWSGI`, the teardown request should execute. \r\n\r\n```python\r\nfrom flask import Flask\r\n\r\napp = Flask(__name__)\r\n\r\n\r\n@app.teardown_request\r\ndef teardown(exc):\r\n    print('Teardown request executed')\r\n\r\n@app.route('/')\r\ndef error_route():\r\n    e = 3 / 0\r\n\r\nif __name__ == '__main__':\r\n    app.run(debug=True)\r\n```\r\n\r\n### Actual Behavior\r\n\r\nInstead for the first request (in uWSGI case, for each worker's first request), the teardown does not execute. After few hours debugging with PyCharm the best information we can share (I hope it's actually useful) is that in `flask.ctx.RequestContext.push()` the `_request_ctx_stack.top` is None.\r\n\r\n### Environment\r\n\r\n* Python version: 3.5\r\n* Flask version: 0.12.2\r\n* Werkzeug version: 0.13\r\n",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/353733262",
            "html_url": "https://github.com/pallets/flask/issues/2563#issuecomment-353733262",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2563",
            "id": 353733262,
            "node_id": "MDEyOklzc3VlQ29tbWVudDM1MzczMzI2Mg==",
            "user": {
                "login": "wgwz",
                "id": 10120306,
                "node_id": "MDQ6VXNlcjEwMTIwMzA2",
                "avatar_url": "https://avatars2.githubusercontent.com/u/10120306?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/wgwz",
                "html_url": "https://github.com/wgwz",
                "followers_url": "https://api.github.com/users/wgwz/followers",
                "following_url": "https://api.github.com/users/wgwz/following{/other_user}",
                "gists_url": "https://api.github.com/users/wgwz/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/wgwz/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wgwz/subscriptions",
                "organizations_url": "https://api.github.com/users/wgwz/orgs",
                "repos_url": "https://api.github.com/users/wgwz/repos",
                "events_url": "https://api.github.com/users/wgwz/events{/privacy}",
                "received_events_url": "https://api.github.com/users/wgwz/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2017-12-23T15:51:43Z",
            "updated_at": "2017-12-23T15:52:45Z",
            "author_association": "CONTRIBUTOR",
            "body": "Why not do something like this? \r\n```from flask import Flask\r\n\r\napp = Flask(__name__)\r\n\r\n@app.teardown_request\r\ndef teardown(exc):\r\n    print('Teardown request executed')\r\n\r\n@app.route('/')\r\ndef error_route():\r\n    try:\r\n    \te = 3 / 0\r\n    except ZeroDivisionError:\r\n        pass\r\n    return 'error route'\r\n\t\r\nif __name__ == '__main__':\r\n    app.run(debug=True)\r\n```"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/353733879",
            "html_url": "https://github.com/pallets/flask/issues/2563#issuecomment-353733879",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2563",
            "id": 353733879,
            "node_id": "MDEyOklzc3VlQ29tbWVudDM1MzczMzg3OQ==",
            "user": {
                "login": "iScrE4m",
                "id": 6594163,
                "node_id": "MDQ6VXNlcjY1OTQxNjM=",
                "avatar_url": "https://avatars0.githubusercontent.com/u/6594163?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/iScrE4m",
                "html_url": "https://github.com/iScrE4m",
                "followers_url": "https://api.github.com/users/iScrE4m/followers",
                "following_url": "https://api.github.com/users/iScrE4m/following{/other_user}",
                "gists_url": "https://api.github.com/users/iScrE4m/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/iScrE4m/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/iScrE4m/subscriptions",
                "organizations_url": "https://api.github.com/users/iScrE4m/orgs",
                "repos_url": "https://api.github.com/users/iScrE4m/repos",
                "events_url": "https://api.github.com/users/iScrE4m/events{/privacy}",
                "received_events_url": "https://api.github.com/users/iScrE4m/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2017-12-23T16:03:39Z",
            "updated_at": "2017-12-23T16:04:55Z",
            "author_association": "NONE",
            "body": "Because I don't want to catch the exception. Teardown request should execute every single time. In our case, we want to log every single exception with a custom logger - especially those unhandled. The real solution is to set `PRESERVE_CONTEXT_ON_EXCEPTION` to False. \r\n\r\nAt first I thought it was a bug, then I learned it's somewhat intended, but the documentation surrounding `PRESERVE_CONTEXT_ON_EXCEPTION` is very poor and in no way does it suggest it's connected. It also doesn't make sense that uWSGI is setting this variable to `True`.\r\n\r\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/353735716",
            "html_url": "https://github.com/pallets/flask/issues/2563#issuecomment-353735716",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2563",
            "id": 353735716,
            "node_id": "MDEyOklzc3VlQ29tbWVudDM1MzczNTcxNg==",
            "user": {
                "login": "wgwz",
                "id": 10120306,
                "node_id": "MDQ6VXNlcjEwMTIwMzA2",
                "avatar_url": "https://avatars2.githubusercontent.com/u/10120306?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/wgwz",
                "html_url": "https://github.com/wgwz",
                "followers_url": "https://api.github.com/users/wgwz/followers",
                "following_url": "https://api.github.com/users/wgwz/following{/other_user}",
                "gists_url": "https://api.github.com/users/wgwz/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/wgwz/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wgwz/subscriptions",
                "organizations_url": "https://api.github.com/users/wgwz/orgs",
                "repos_url": "https://api.github.com/users/wgwz/repos",
                "events_url": "https://api.github.com/users/wgwz/events{/privacy}",
                "received_events_url": "https://api.github.com/users/wgwz/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2017-12-23T16:36:54Z",
            "updated_at": "2017-12-23T16:36:54Z",
            "author_association": "CONTRIBUTOR",
            "body": "I checked what you mean by `PRESERVE_CONTEXT_ON_EXCEPTION` being the solution. It seems like the teardown request gets executed either way. I think the key word in the doc is \"immediately\". So it seems like this is an intended behavior which seems reasonable to me. Do have suggestions on how to improve the docs?\r\n>In debug mode Flask will not tear down a request on an exception immediately. Instead it will keep it alive so that the interactive debugger can still access it. This behavior can be controlled by the PRESERVE_CONTEXT_ON_EXCEPTION configuration variable.\r\n- http://flask.pocoo.org/docs/dev/api/#flask.Flask.teardown_request. \r\n```\r\nfrom flask import Flask\r\n\r\napp = Flask(__name__)\r\napp.config.update({\r\n    'PRESERVE_CONTEXT_ON_EXCEPTION': True\r\n})\r\napp.logger.info(app.config)\r\n\r\n@app.teardown_request\r\ndef teardown(exc):\r\n    app.logger.info('Teardown request executed')\r\n\r\n@app.route('/')\r\ndef error_route():\r\n    e = 3 / 0\r\n    return 'error route'\r\n```"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/353736539",
            "html_url": "https://github.com/pallets/flask/issues/2563#issuecomment-353736539",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2563",
            "id": 353736539,
            "node_id": "MDEyOklzc3VlQ29tbWVudDM1MzczNjUzOQ==",
            "user": {
                "login": "iScrE4m",
                "id": 6594163,
                "node_id": "MDQ6VXNlcjY1OTQxNjM=",
                "avatar_url": "https://avatars0.githubusercontent.com/u/6594163?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/iScrE4m",
                "html_url": "https://github.com/iScrE4m",
                "followers_url": "https://api.github.com/users/iScrE4m/followers",
                "following_url": "https://api.github.com/users/iScrE4m/following{/other_user}",
                "gists_url": "https://api.github.com/users/iScrE4m/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/iScrE4m/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/iScrE4m/subscriptions",
                "organizations_url": "https://api.github.com/users/iScrE4m/orgs",
                "repos_url": "https://api.github.com/users/iScrE4m/repos",
                "events_url": "https://api.github.com/users/iScrE4m/events{/privacy}",
                "received_events_url": "https://api.github.com/users/iScrE4m/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2017-12-23T16:52:50Z",
            "updated_at": "2017-12-23T16:52:50Z",
            "author_association": "NONE",
            "body": "I see, so the executed request is just delayed. I (and my colleagues) somehow missed that \ud83d\ude28 . So if there's an ok request following the error request, you see two teardowns executing. That also means that if a life of a process ends with a error request, that error disappears from any evidence.  As it's a debug intended behavior, it's very reasonable. I am confused by uWSGI, but that's not a Flask issue.\r\n\r\nSince you found it in the doc quickly, I guess the doc is okay too.  What still doesn't make much sense to me is the name of the variable - preserve context != delay teardown until another request is made - but that might be just us being non-native speakers, since now that I'm trying to provide an argument and analyzing it, it started making lots of sense.\r\n\r\nClosing it, as it was very obviously my fault. Thanks for the breakdown!"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/353747349",
            "html_url": "https://github.com/pallets/flask/issues/2563#issuecomment-353747349",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2563",
            "id": 353747349,
            "node_id": "MDEyOklzc3VlQ29tbWVudDM1Mzc0NzM0OQ==",
            "user": {
                "login": "wgwz",
                "id": 10120306,
                "node_id": "MDQ6VXNlcjEwMTIwMzA2",
                "avatar_url": "https://avatars2.githubusercontent.com/u/10120306?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/wgwz",
                "html_url": "https://github.com/wgwz",
                "followers_url": "https://api.github.com/users/wgwz/followers",
                "following_url": "https://api.github.com/users/wgwz/following{/other_user}",
                "gists_url": "https://api.github.com/users/wgwz/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/wgwz/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wgwz/subscriptions",
                "organizations_url": "https://api.github.com/users/wgwz/orgs",
                "repos_url": "https://api.github.com/users/wgwz/repos",
                "events_url": "https://api.github.com/users/wgwz/events{/privacy}",
                "received_events_url": "https://api.github.com/users/wgwz/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2017-12-23T20:49:14Z",
            "updated_at": "2017-12-23T20:51:48Z",
            "author_association": "CONTRIBUTOR",
            "body": "I also agree it is not obvious (at least at first glance) what that configuration parameter name means, but I think it is well-named now that I've looked into it. Also to the documentations credit, there is a big disclaimer \"Debug Note\" in the section for `teardown_request` which mentions it. I'm glad it's making sense! "
        }
    ]
}