{
    "url": "https://api.github.com/repos/pallets/flask/issues/1719",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/1719/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/1719/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/1719/events",
    "html_url": "https://github.com/pallets/flask/issues/1719",
    "id": 131478567,
    "node_id": "MDU6SXNzdWUxMzE0Nzg1Njc=",
    "number": 1719,
    "title": "Flask will prevents media downloads while playing -- ",
    "user": {
        "login": "jackmullen",
        "id": 125346,
        "node_id": "MDQ6VXNlcjEyNTM0Ng==",
        "avatar_url": "https://avatars0.githubusercontent.com/u/125346?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jackmullen",
        "html_url": "https://github.com/jackmullen",
        "followers_url": "https://api.github.com/users/jackmullen/followers",
        "following_url": "https://api.github.com/users/jackmullen/following{/other_user}",
        "gists_url": "https://api.github.com/users/jackmullen/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jackmullen/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jackmullen/subscriptions",
        "organizations_url": "https://api.github.com/users/jackmullen/orgs",
        "repos_url": "https://api.github.com/users/jackmullen/repos",
        "events_url": "https://api.github.com/users/jackmullen/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jackmullen/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2016-02-04T21:24:55Z",
    "updated_at": "2016-02-07T21:08:06Z",
    "closed_at": "2016-02-07T21:08:06Z",
    "author_association": "NONE",
    "body": "Hello:  \n\nI am using flask 0.10.1\nI have attempted the solution to this problem using several server configurations including the built in testing server, the eventlet server along with Miguel Grinberg's flask-socketio module ( as I want to use this module in the final product) and also using nginx setup with uwsgi and also as a proxy server listening on port 5000 for flask activity.   \n\nI am attempting to serve media files, for download not streaming. I have been using flask.send_from_directory() and using the appropriate headers to cause down load in a browser and for the most part that works -- the as_attachment header causes a download box and download begins.  I have also written a wrapper around send_file() and attached headers to the response object and finally I have ignored a route and just allowed flask to deal with the static file alone. \n\nThe issue is this.  A media file such as an .mp3 file should be able to be downloaded while playing as is the standard behavior of nginx standalone ( which I tried ) and apache ( which I setup and tried ) .. But with flash (regardless of the headers provided ) an .mp3 file and for that matter, any media file, is streamed to the player.  In other words it is not spun out as fast as bandwidth permits and does not trigger the player to gobble up the data and fill a buffer and start player when sufficient data arrives. What happens is the player thinks it has a \"live broadcast\" -- like an icecast server or similar. \n\n Now this is a problem for the application I am building because the idea is to provide low bandwidth audio files for play back in a mobile or other device (say a itunes player or quicktime) -- In this way the file is quickly downloaded and begins playing as soon as enough data is available to meet the players buffer requirement. \n\nNext I did an experiment where I used the uwsgi server before the nginx and let nginx start the flask application when requested as specified in the uwsgi ini file and the nginx config file.  When I set up the server configuration this way -- nginx WILL serve the file  with the behavior I was expecting -- in other words, the file will be gobbled up by the player and play will begin when enough data is accumulated. \n\nI have tried all possible headers to cause the flask/nginx flask/eventlet flask/test-server to not stream the file but rather feed out as fast as bandwidth permits.   I believe this is a problem for people wanting to use Flask for purpose of serving media files in a specialized ways.  Having the flask server baby sit the stream leads to \"broken pipe\" problems in the player and the stream is restarted again.  I have also included the 'accept-ranges' = 'bytes' header with no difference.  I have compared the request headers with other download sites providing mp3 files for listening and they are the same -- except that the other sites do not stream the data is downloaded by the player while playing. \n\nlastly -- Please note that I can cause a download box to open on the browser using the as_attachment =true header .. but this does not affect the behavior with player apps such as quicktime or VLC etc .. \n\nIs there one or more things I might be overlooking?  Has anyone observed this phenomenon ?  Is there a work around ?  \n",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/181113520",
            "html_url": "https://github.com/pallets/flask/issues/1719#issuecomment-181113520",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1719",
            "id": 181113520,
            "node_id": "MDEyOklzc3VlQ29tbWVudDE4MTExMzUyMA==",
            "user": {
                "login": "jackmullen",
                "id": 125346,
                "node_id": "MDQ6VXNlcjEyNTM0Ng==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/125346?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/jackmullen",
                "html_url": "https://github.com/jackmullen",
                "followers_url": "https://api.github.com/users/jackmullen/followers",
                "following_url": "https://api.github.com/users/jackmullen/following{/other_user}",
                "gists_url": "https://api.github.com/users/jackmullen/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/jackmullen/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jackmullen/subscriptions",
                "organizations_url": "https://api.github.com/users/jackmullen/orgs",
                "repos_url": "https://api.github.com/users/jackmullen/repos",
                "events_url": "https://api.github.com/users/jackmullen/events{/privacy}",
                "received_events_url": "https://api.github.com/users/jackmullen/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2016-02-07T20:42:34Z",
            "updated_at": "2016-02-07T20:42:34Z",
            "author_association": "NONE",
            "body": "Ok .. I have found a solution to my own issue .. Using nginx as a proxy -- have succeeded in obtaining the desired response by including a location definition for the static files .. like this : \nlocation  /static {\n        alias /var/www/html/testserver/static;\n        autoindex on;\n        expires max;\n    }\n\nnginx serves the file and the mobile player consume the stream as a download while playing \n"
        }
    ]
}