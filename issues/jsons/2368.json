{
    "url": "https://api.github.com/repos/pallets/flask/issues/2368",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/2368/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/2368/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/2368/events",
    "html_url": "https://github.com/pallets/flask/issues/2368",
    "id": 235097126,
    "node_id": "MDU6SXNzdWUyMzUwOTcxMjY=",
    "number": 2368,
    "title": "Discussion: from_envvar's behavior",
    "user": {
        "login": "tony",
        "id": 26336,
        "node_id": "MDQ6VXNlcjI2MzM2",
        "avatar_url": "https://avatars0.githubusercontent.com/u/26336?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tony",
        "html_url": "https://github.com/tony",
        "followers_url": "https://api.github.com/users/tony/followers",
        "following_url": "https://api.github.com/users/tony/following{/other_user}",
        "gists_url": "https://api.github.com/users/tony/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/tony/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tony/subscriptions",
        "organizations_url": "https://api.github.com/users/tony/orgs",
        "repos_url": "https://api.github.com/users/tony/repos",
        "events_url": "https://api.github.com/users/tony/events{/privacy}",
        "received_events_url": "https://api.github.com/users/tony/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 4,
    "created_at": "2017-06-11T22:43:52Z",
    "updated_at": "2017-06-13T13:34:58Z",
    "closed_at": "2017-06-13T13:30:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "There is an issue I've been having for a few years regarding Flask and I failed to articulate it correctly. I find ``from_envvar``'s behavior unintuitive. Also, I haven't been able to find prior discussions mentioning it. Probably because of [Chesterton's fence](https://en.wikipedia.org/wiki/Wikipedia:Chesterton%27s_fence), or they feel they'd be told to work around it. Which only takes one line:\r\n\r\n``app.config.from_object(os.environ[\"app.config.dev\"])``, see [Google results](https://www.google.com/search?q=%22from_object(os.environ%22)) \ud83d\ude04 \r\n\r\nThe first google result I see is [people perplexed by from_envvar](https://stackoverflow.com/questions/20062256/how-to-use-app-config-from-envvar-flask). Why? I'm not sure. For some reason, in recent years, Django (and frankly, Flask also) got devs accustomed to importing modules via strings.\r\n\r\nCurrent behavior: \r\n\r\n- ``from_envvar`` forwards to ``from_pyfile``, which strictly requires an absolute/relative file path (*i.e. not a module string*).\r\n\r\nExpected behavior:\r\n\r\n- ``from_envvar`` should wrap ``from_object``\r\n\r\n   Why:\r\n\r\n   - ``from_envvar`` [only works with files](https://github.com/pallets/flask/blob/789715a/flask/config.py#L109)\r\n   -  File from ``from_envvar`` [are interpreted as modules anyway](https://github.com/pallets/flask/blob/789715a/flask/config.py#L111)\r\n   - ``from_envvar`` (``from_pyfile``) cannot point to classes\r\n   - ``from_object`` supports **string**  module/class paths (e.g. ``app.config.dev``), which works with environmental variables\r\n   - ``from_object``supports both [classes and modules](https://github.com/pallets/flask/blob/789715a/flask/config.py#L139). Especially important since the official documentation [gives examples of using classes](http://flask.pocoo.org/docs/0.12/config/#development-production).\r\n   - It's more customary for users invoking configuration by *files* to do so via CLI arguments.\r\n   - A local, dev, staging, or production deployment in practice would opt to use environmental variables to point to a python object (module/class) via string.\r\n\r\n      For instance: Let's say we're deploying to production with a uwsgi config. Since python production deployment is highly driven by packages, *we've likely already done the work of figuring out our python environmental / package locations*. It'd be more intuitive to point to a python object by string, rather than by file path.\r\n\r\n- Alternative: ``from_envvar`` should additionally wrap ``from_object`` for non-file paths.\r\n\r\n* Python version: 3.6\r\n* Flask version: 1.12\r\n* Werkzeug version: 0.12.2\r\n",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/307662307",
            "html_url": "https://github.com/pallets/flask/issues/2368#issuecomment-307662307",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2368",
            "id": 307662307,
            "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzY2MjMwNw==",
            "user": {
                "login": "ThiefMaster",
                "id": 179599,
                "node_id": "MDQ6VXNlcjE3OTU5OQ==",
                "avatar_url": "https://avatars1.githubusercontent.com/u/179599?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/ThiefMaster",
                "html_url": "https://github.com/ThiefMaster",
                "followers_url": "https://api.github.com/users/ThiefMaster/followers",
                "following_url": "https://api.github.com/users/ThiefMaster/following{/other_user}",
                "gists_url": "https://api.github.com/users/ThiefMaster/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/ThiefMaster/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ThiefMaster/subscriptions",
                "organizations_url": "https://api.github.com/users/ThiefMaster/orgs",
                "repos_url": "https://api.github.com/users/ThiefMaster/repos",
                "events_url": "https://api.github.com/users/ThiefMaster/events{/privacy}",
                "received_events_url": "https://api.github.com/users/ThiefMaster/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2017-06-11T22:50:36Z",
            "updated_at": "2017-06-11T22:54:37Z",
            "author_association": "MEMBER",
            "body": "IMO a config file does not belong the package directory, but your suggestion sounds a lot like you want the environment variable to specify an import name (such as `myapp.config`) instead of a path (e.g. `/opt/myapp/etc/myapp.conf`)'. I don't think this makes much sense.\r\n\r\nLet's say I install my app in `/opt/myapp`. So I have a virtualenv in `/opt/myapp/.venv` and the myapp package ends up inside its site-packages directory when installed. However, does a config file belong in site-packages? IMO the answer here is a clear no. It should be in *some* other location. Could be `/opt/myapp/myapp.conf` or `/opt/myapp/etc/myapp.conf` or really anything else. It's a config file. Pretty much everything that lets the user override the default config takes a file path specifying where the config can be found. I don't think Flask (or any other framework) should go a different path here.\r\n\r\nI know there are some example projects out there that have `config/{defaults,dev,prod}.py` inside the package but I think this is an awful idea. Except for default configs, configuration files for deployment do not belong into the package (or the repo containing the package). When publishing an application to PyPI (or even a local pypiserver in case it's not a public/open-source project), you might want to be able to install it on different environments which may require different configs - sure, these config files should probably be versioned somewhere. But I think deployment configs and the application codebase itself should remain separate."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/307664230",
            "html_url": "https://github.com/pallets/flask/issues/2368#issuecomment-307664230",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2368",
            "id": 307664230,
            "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzY2NDIzMA==",
            "user": {
                "login": "tony",
                "id": 26336,
                "node_id": "MDQ6VXNlcjI2MzM2",
                "avatar_url": "https://avatars0.githubusercontent.com/u/26336?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/tony",
                "html_url": "https://github.com/tony",
                "followers_url": "https://api.github.com/users/tony/followers",
                "following_url": "https://api.github.com/users/tony/following{/other_user}",
                "gists_url": "https://api.github.com/users/tony/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/tony/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tony/subscriptions",
                "organizations_url": "https://api.github.com/users/tony/orgs",
                "repos_url": "https://api.github.com/users/tony/repos",
                "events_url": "https://api.github.com/users/tony/events{/privacy}",
                "received_events_url": "https://api.github.com/users/tony/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2017-06-11T23:31:36Z",
            "updated_at": "2017-06-11T23:33:23Z",
            "author_association": "CONTRIBUTOR",
            "body": "> IMO a config file does not belong the package directory\r\n>  However, does a config file belong in site-packages?  IMO the answer here is a clear no. \r\n\r\nIt's a common pattern in Django, and even in the Flask community.\r\n\r\nExample: https://github.com/rtfd/readthedocs.org/tree/master/readthedocs/settings\r\n\r\nA check of github code search shows a decent share of Flask, >50%, use ``from_object``:\r\n\r\n- from_object: https://github.com/search?utf8=%E2%9C%93&q=%22config.from_object%22+flask&type=Code (21.5k)\r\n- from_pyfile: https://github.com/search?l=Python&q=%22config.from_pyfile%22+flask&type=Code&utf8=%E2%9C%93 (11k)\r\n- from_envvar: https://github.com/search?l=Python&q=%22config.from_envvar%22+flask&type=Code&utf8=%E2%9C%93 (10.3k)\r\n\r\nA popular flask example, [flask-overholt](https://github.com/mattupstate/overholt/) using a [config in its own package](https://github.com/mattupstate/overholt/blob/e8cfe87/overholt/settings.py) and [applying it in a factory](https://github.com/mattupstate/overholt/blob/e8cfe871fc1cb4312636704dd5639ba8f4f8eff4/overholt/factory.py#L35).\r\n\r\nI could probably give a lot more to support that module strings are commonplace.\r\n\r\nI'm not saying that it's righteous or technically superior, but it's a de facto way of loading configs, especially in Flask.\r\n\r\n>  Pretty much everything that lets the user override the default config takes a file path specifying where the config can be found. I don't think Flask (or any other framework) should go a different path here.\r\n\r\nI'm trying to make sure I'm understanding that correctly.\r\n\r\nFlask supports [importing from objects](http://flask.pocoo.org/docs/0.12/api/#flask.Config.from_object). There's also examples in [official documentation](http://flask.pocoo.org/docs/0.12/config/#development-production).\r\n\r\nIn addition, what if the configuration deliberately wants to use site-packages? Especially when they deploy? For instance, [dj-database-url](https://github.com/kennethreitz/dj-database-url) is imported in django settings. (I'm assuming they're using project's site-packages and not their system's.)\r\n\r\nEven in situations where configurations are not stored in site-packages, people try to do add the directory to site-packages manually anyway: Here are a few cases of [uwsgi scripts adding directories for settings by hand](https://www.google.com/#q=sys.path+insert+settings+uwsgi.py) via ``sys.path.append`` and ``site.addsitedir``."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/307664823",
            "html_url": "https://github.com/pallets/flask/issues/2368#issuecomment-307664823",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2368",
            "id": 307664823,
            "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzY2NDgyMw==",
            "user": {
                "login": "tony",
                "id": 26336,
                "node_id": "MDQ6VXNlcjI2MzM2",
                "avatar_url": "https://avatars0.githubusercontent.com/u/26336?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/tony",
                "html_url": "https://github.com/tony",
                "followers_url": "https://api.github.com/users/tony/followers",
                "following_url": "https://api.github.com/users/tony/following{/other_user}",
                "gists_url": "https://api.github.com/users/tony/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/tony/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tony/subscriptions",
                "organizations_url": "https://api.github.com/users/tony/orgs",
                "repos_url": "https://api.github.com/users/tony/repos",
                "events_url": "https://api.github.com/users/tony/events{/privacy}",
                "received_events_url": "https://api.github.com/users/tony/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2017-06-11T23:43:03Z",
            "updated_at": "2017-06-11T23:45:47Z",
            "author_association": "CONTRIBUTOR",
            "body": "> I know there are some example projects out there that have config/{defaults,dev,prod}.py inside the package but I think this is an awful idea. Except for default configs, configuration files for deployment do not belong into the package (or the repo containing the package). When publishing an application to PyPI (or even a local pypiserver in case it's not a public/open-source project), you might want to be able to install it on different environments which may require different configs - sure, these config files should probably be versioned somewhere. But I think deployment configs and the application codebase itself should remain separate.\r\n\r\nLet's assume you're right. Keeping configs with special/sensitive stuff (like db credentials) there is a bad idea. \r\n\r\nFlask has already been around and supported configs that are in classes. These can't be invoked via ``from_envvar``. So are the people who went the class route for configs on their own?\r\n\r\nKeep in mind, this discussion *is not* about removing ``from_pyfile``. It's about ``from_envvar``'s default behavior. Primarily that it doesn't support ``from_object`` at all, and feels out of place with the rest of the config features. There's a lot more happening than just files.\r\n\r\n> Except for default configs, configuration files for deployment do not belong into the package (or the repo containing the package).\r\n\r\nThat makes sense.\r\n\r\n> When publishing an application to PyPI (or even a local pypiserver in case it's not a public/open-source project), you might want to be able to install it on different environments which may require different configs - sure, these config files should probably be versioned somewhere. But I think deployment configs and the application codebase itself should remain separate.\r\n\r\nLet's assume that.\r\n\r\nIt doesn't rule out having settings added to site packages from outside the project's code being imported via a string (``from_object``). And by extension, from an environmental variable. I assume, some of the people using ``app.config.from_object(os.environ['foo'])`` are splitting things up securely. How? I don't know. It likely varies and since it's internal and special to their setup, they don't need to go into specifics publicly."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/308116267",
            "html_url": "https://github.com/pallets/flask/issues/2368#issuecomment-308116267",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2368",
            "id": 308116267,
            "node_id": "MDEyOklzc3VlQ29tbWVudDMwODExNjI2Nw==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2017-06-13T13:30:17Z",
            "updated_at": "2017-06-13T13:34:58Z",
            "author_association": "MEMBER",
            "body": "I'm happy with the `app.config.from_object(os.environ['FLASK_CONFIG'])` solution. As Thief says, `from_envvar` is intended for local one off files. These files are exec'd in the current env, so there's no reason they couldn't import other things from the env.\r\n\r\nThe next version will also allow `FLASK_APP=app:factory('dev')` to pass arguments to an app factory, which I think is the most common case for this."
        }
    ]
}