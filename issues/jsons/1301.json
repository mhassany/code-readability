{
    "url": "https://api.github.com/repos/pallets/flask/issues/1301",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/1301/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/1301/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/1301/events",
    "html_url": "https://github.com/pallets/flask/pull/1301",
    "id": 53198902,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MjY3MzI4Nzk=",
    "number": 1301,
    "title": "Allow to know about Blueprints registeration state",
    "user": {
        "login": "noirbizarre",
        "id": 15725,
        "node_id": "MDQ6VXNlcjE1NzI1",
        "avatar_url": "https://avatars0.githubusercontent.com/u/15725?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/noirbizarre",
        "html_url": "https://github.com/noirbizarre",
        "followers_url": "https://api.github.com/users/noirbizarre/followers",
        "following_url": "https://api.github.com/users/noirbizarre/following{/other_user}",
        "gists_url": "https://api.github.com/users/noirbizarre/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/noirbizarre/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/noirbizarre/subscriptions",
        "organizations_url": "https://api.github.com/users/noirbizarre/orgs",
        "repos_url": "https://api.github.com/users/noirbizarre/repos",
        "events_url": "https://api.github.com/users/noirbizarre/events{/privacy}",
        "received_events_url": "https://api.github.com/users/noirbizarre/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 11,
    "created_at": "2014-12-31T19:15:00Z",
    "updated_at": "2015-01-01T14:49:50Z",
    "closed_at": "2015-01-01T14:32:34Z",
    "author_association": "NONE",
    "pull_request": {
        "url": "https://api.github.com/repos/pallets/flask/pulls/1301",
        "html_url": "https://github.com/pallets/flask/pull/1301",
        "diff_url": "https://github.com/pallets/flask/pull/1301.diff",
        "patch_url": "https://github.com/pallets/flask/pull/1301.patch"
    },
    "body": "This pull-request permit to know if a blueprint has already been registered or not (very usefull for extensions).\n\nIt also remove the never used (and misleading) `Blueprint._got_registered_once` attribute.\n\nNow, you can write:\n\n``` python\nblueprint = Blueprint('blueprint', __name__)\n\nassert not blueprint.is_registered\n\napp = Flask(__name__)\napp.register_blueprint(blueprint)\nassert blueprint.is_registered\n```\n\nIt also allows to specify than a blueprint can't be registered twice with the `register_once` constructor kwarg:\n\n``` python\nblueprint = Blueprint('blueprint', __name__, register_once=True)\napp = Flask(__name__)\napp.register_blueprint(blueprint)\napp.register_blueprint(blueprint) # Raise a warning\n```\n",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/68485147",
            "html_url": "https://github.com/pallets/flask/pull/1301#issuecomment-68485147",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1301",
            "id": 68485147,
            "node_id": "MDEyOklzc3VlQ29tbWVudDY4NDg1MTQ3",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-01-01T11:57:28Z",
            "updated_at": "2015-01-01T11:57:28Z",
            "author_association": "MEMBER",
            "body": "In which specific situation do you need this information?\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/68486826",
            "html_url": "https://github.com/pallets/flask/pull/1301#issuecomment-68486826",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1301",
            "id": 68486826,
            "node_id": "MDEyOklzc3VlQ29tbWVudDY4NDg2ODI2",
            "user": {
                "login": "noirbizarre",
                "id": 15725,
                "node_id": "MDQ6VXNlcjE1NzI1",
                "avatar_url": "https://avatars0.githubusercontent.com/u/15725?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/noirbizarre",
                "html_url": "https://github.com/noirbizarre",
                "followers_url": "https://api.github.com/users/noirbizarre/followers",
                "following_url": "https://api.github.com/users/noirbizarre/following{/other_user}",
                "gists_url": "https://api.github.com/users/noirbizarre/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/noirbizarre/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/noirbizarre/subscriptions",
                "organizations_url": "https://api.github.com/users/noirbizarre/orgs",
                "repos_url": "https://api.github.com/users/noirbizarre/repos",
                "events_url": "https://api.github.com/users/noirbizarre/events{/privacy}",
                "received_events_url": "https://api.github.com/users/noirbizarre/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-01-01T13:36:15Z",
            "updated_at": "2015-01-01T13:36:15Z",
            "author_association": "NONE",
            "body": "In my case, I want it for two reasons:\n\nBeing able to raise an explicit and detailled error message on multiple blueprint registerations.\n\nBeing able to provide an optionnal helper function with assets provided by a blueprint (and needed to be registered only in this case):\n\n``` python\nblueprint = Blueprint('helper', __name__,\n    template_folder='templates',\n    static_folder='static'\n)\ndef my_helper(obj):\n    '''Render a SwaggerUI for a given API'''\n    if not blueprint.is_registered:\n        current_app.register_blueprint(blueprint)\n    return render_template('something.html', obj=obj)\n```\n\nAllowing to write somewhere else:\n\n``` python\nfrom mylib import my_helper\nbp = Blueprint('test', __name__)\n\n@bp.route('/somewhere')\ndef my_route():\n    obj = build()\n    do_something(obj)\n    return my_helper(obj)\n```\n\nWithout, I need to register an extra blueprint.\nI don't want the developper to register himself the blueprint as it does not expose any URL, only assets.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/68487169",
            "html_url": "https://github.com/pallets/flask/pull/1301#issuecomment-68487169",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1301",
            "id": 68487169,
            "node_id": "MDEyOklzc3VlQ29tbWVudDY4NDg3MTY5",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-01-01T13:54:36Z",
            "updated_at": "2015-01-01T13:56:29Z",
            "author_association": "MEMBER",
            "body": "Afaik it is a explicitly prohibited (via code in Flask itself) to lazily\nregister blueprints this way (during execution of the endpoint function), as\nthe routing system needs to be completely set up before the first request comes\nin.\n\nIt also seems like a bad idea in any way because the blueprint could override\nsome other templates, altering the behavior of the whole application when the\nuser issues a request to a GET endpoint (which are supposed to be idempotent).\n\nI recommend you do the following:\n\n```\nclass MyHelper(object):\n    def __init__(self, app=None):\n        self.app = app\n        if app is not None:\n            self.init_app(app)\n\n    def init_app(self, app):\n        app.register_blueprint(blueprint)\n\n    @staticmethod\n    def get_swagger_ui(obj):\n        return render_template('something.html', obj=obj)\n```\n\nYou can also detach `get_swagger_ui` from MyHelper and make it a global\nfunction. In any case, the usage would be:\n\n```\nhelper = MyHelper(app)\n\n@app.route('/somewhere')\ndef my_route():\n    ...\n    helper.get_swagger_ui(obj)\n```\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/68487217",
            "html_url": "https://github.com/pallets/flask/pull/1301#issuecomment-68487217",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1301",
            "id": 68487217,
            "node_id": "MDEyOklzc3VlQ29tbWVudDY4NDg3MjE3",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-01-01T13:57:28Z",
            "updated_at": "2015-01-01T13:57:28Z",
            "author_association": "MEMBER",
            "body": "Huh, it seems GitHub doesn't correctly format email messages anymore.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/68487533",
            "html_url": "https://github.com/pallets/flask/pull/1301#issuecomment-68487533",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1301",
            "id": 68487533,
            "node_id": "MDEyOklzc3VlQ29tbWVudDY4NDg3NTMz",
            "user": {
                "login": "noirbizarre",
                "id": 15725,
                "node_id": "MDQ6VXNlcjE1NzI1",
                "avatar_url": "https://avatars0.githubusercontent.com/u/15725?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/noirbizarre",
                "html_url": "https://github.com/noirbizarre",
                "followers_url": "https://api.github.com/users/noirbizarre/followers",
                "following_url": "https://api.github.com/users/noirbizarre/following{/other_user}",
                "gists_url": "https://api.github.com/users/noirbizarre/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/noirbizarre/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/noirbizarre/subscriptions",
                "organizations_url": "https://api.github.com/users/noirbizarre/orgs",
                "repos_url": "https://api.github.com/users/noirbizarre/repos",
                "events_url": "https://api.github.com/users/noirbizarre/events{/privacy}",
                "received_events_url": "https://api.github.com/users/noirbizarre/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-01-01T14:14:27Z",
            "updated_at": "2015-01-01T14:14:27Z",
            "author_association": "NONE",
            "body": "I already have class like `MyHelper`.\nMy problem is that this is class that can be registered many times, not like the blueprint.\nSo, the problem is the same, I need to be able to write:\n\n``` python\nclass MyHelper(object):\n    def __init__(self, app=None):\n        self.app = app\n        if app is not None:\n            self.init_app(app)\n\n    def init_app(self, app):\n        if not blueprint.is_registered:\n            app.register_blueprint(blueprint)\n\n    @staticmethod\n    def get_swagger_ui(obj):\n        return render_template('something.html', obj=obj)\n```\n\nand then:\n\n``` python\nhelper1 = MyHelper(app)\nhelper2 = MyHelper(app)\n\n@app.route('/somewhere')\ndef my_route():\n    ...\n    helper1.get_swagger_ui(obj)\n```\n\nBy the way, to avoid collision, my blueprint is declared with an url_prefix:\n\n``` python\nblueprint = Blueprint('helper', __name__,\n    template_folder='templates',\n    static_folder='static',\n    url_prefix='/libprefix'\n)\n```\n\nIf you look at the code, there was an attribute meant to implement that: `_got_registered_once`.\nThe problem: it wasn't working and induces me in error.\nThis is why I started this pull-request.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/68487679",
            "html_url": "https://github.com/pallets/flask/pull/1301#issuecomment-68487679",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1301",
            "id": 68487679,
            "node_id": "MDEyOklzc3VlQ29tbWVudDY4NDg3Njc5",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-01-01T14:22:29Z",
            "updated_at": "2015-01-01T14:22:29Z",
            "author_association": "MEMBER",
            "body": "Good point. Your approach breaks down when using the same extension object on different apps though (which is a valid usage of most extension objects). The solution would be to store this kind of information on the app object (and not on the blueprint):\n\n```\next_dict = app.extensions.setdefault('myhelper', {})\nif not ext_dict.get('registered_bp', False):\n    app.register_blueprint(blueprint)\next_dict['registered_bp'] = True\n```\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/68487716",
            "html_url": "https://github.com/pallets/flask/pull/1301#issuecomment-68487716",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1301",
            "id": 68487716,
            "node_id": "MDEyOklzc3VlQ29tbWVudDY4NDg3NzE2",
            "user": {
                "login": "noirbizarre",
                "id": 15725,
                "node_id": "MDQ6VXNlcjE1NzI1",
                "avatar_url": "https://avatars0.githubusercontent.com/u/15725?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/noirbizarre",
                "html_url": "https://github.com/noirbizarre",
                "followers_url": "https://api.github.com/users/noirbizarre/followers",
                "following_url": "https://api.github.com/users/noirbizarre/following{/other_user}",
                "gists_url": "https://api.github.com/users/noirbizarre/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/noirbizarre/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/noirbizarre/subscriptions",
                "organizations_url": "https://api.github.com/users/noirbizarre/orgs",
                "repos_url": "https://api.github.com/users/noirbizarre/repos",
                "events_url": "https://api.github.com/users/noirbizarre/events{/privacy}",
                "received_events_url": "https://api.github.com/users/noirbizarre/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-01-01T14:24:15Z",
            "updated_at": "2015-01-01T14:24:15Z",
            "author_association": "NONE",
            "body": "I like your approach. I will give it a try.\n\nBut, I still think removing `_got_registered_once` is good idea if it's not working, not used, and not documented.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/68487738",
            "html_url": "https://github.com/pallets/flask/pull/1301#issuecomment-68487738",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1301",
            "id": 68487738,
            "node_id": "MDEyOklzc3VlQ29tbWVudDY4NDg3NzM4",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-01-01T14:25:29Z",
            "updated_at": "2015-01-01T14:25:29Z",
            "author_association": "MEMBER",
            "body": "I agree.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/68487891",
            "html_url": "https://github.com/pallets/flask/pull/1301#issuecomment-68487891",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1301",
            "id": 68487891,
            "node_id": "MDEyOklzc3VlQ29tbWVudDY4NDg3ODkx",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-01-01T14:32:34Z",
            "updated_at": "2015-01-01T14:32:34Z",
            "author_association": "MEMBER",
            "body": "Actually `_got_registered_once` is used inside `Blueprint.record` and set inside `Blueprint.register`. Seems to work fine, but the value should apparently not be used by users.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/68488213",
            "html_url": "https://github.com/pallets/flask/pull/1301#issuecomment-68488213",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1301",
            "id": 68488213,
            "node_id": "MDEyOklzc3VlQ29tbWVudDY4NDg4MjEz",
            "user": {
                "login": "noirbizarre",
                "id": 15725,
                "node_id": "MDQ6VXNlcjE1NzI1",
                "avatar_url": "https://avatars0.githubusercontent.com/u/15725?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/noirbizarre",
                "html_url": "https://github.com/noirbizarre",
                "followers_url": "https://api.github.com/users/noirbizarre/followers",
                "following_url": "https://api.github.com/users/noirbizarre/following{/other_user}",
                "gists_url": "https://api.github.com/users/noirbizarre/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/noirbizarre/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/noirbizarre/subscriptions",
                "organizations_url": "https://api.github.com/users/noirbizarre/orgs",
                "repos_url": "https://api.github.com/users/noirbizarre/repos",
                "events_url": "https://api.github.com/users/noirbizarre/events{/privacy}",
                "received_events_url": "https://api.github.com/users/noirbizarre/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-01-01T14:47:19Z",
            "updated_at": "2015-01-01T14:47:28Z",
            "author_association": "NONE",
            "body": "Yes, I know, but it's actually not working.\nI provided a test case with `is_registered`, but for the original `_got_registered_once` you can test with:\n\n``` python\nbp1 = Blueprint('bp1', __name__)\nbp2 = Blueprint('bp2', __name__)\n\nassert not bp1._got_registered_once\nassert not bp2._got_registered_once\n\napp = Flask(__name__)\napp.register_blueprint(bp1)\n\nassert bp1._got_registered_once\nassert not bp2._got_registered_once  # Fails\n```\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/68488269",
            "html_url": "https://github.com/pallets/flask/pull/1301#issuecomment-68488269",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1301",
            "id": 68488269,
            "node_id": "MDEyOklzc3VlQ29tbWVudDY4NDg4MjY5",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-01-01T14:49:50Z",
            "updated_at": "2015-01-01T14:49:50Z",
            "author_association": "MEMBER",
            "body": "That runs fine for me. Which version of Flask is this?\n"
        }
    ]
}