{
    "url": "https://api.github.com/repos/pallets/flask/issues/3352",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/3352/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/3352/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/3352/events",
    "html_url": "https://github.com/pallets/flask/issues/3352",
    "id": 489337787,
    "node_id": "MDU6SXNzdWU0ODkzMzc3ODc=",
    "number": 3352,
    "title": "@app.after_request not running when send_directory 304's",
    "user": {
        "login": "kafonek",
        "id": 3867768,
        "node_id": "MDQ6VXNlcjM4Njc3Njg=",
        "avatar_url": "https://avatars3.githubusercontent.com/u/3867768?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kafonek",
        "html_url": "https://github.com/kafonek",
        "followers_url": "https://api.github.com/users/kafonek/followers",
        "following_url": "https://api.github.com/users/kafonek/following{/other_user}",
        "gists_url": "https://api.github.com/users/kafonek/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/kafonek/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/kafonek/subscriptions",
        "organizations_url": "https://api.github.com/users/kafonek/orgs",
        "repos_url": "https://api.github.com/users/kafonek/repos",
        "events_url": "https://api.github.com/users/kafonek/events{/privacy}",
        "received_events_url": "https://api.github.com/users/kafonek/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 3,
    "created_at": "2019-09-04T18:58:54Z",
    "updated_at": "2019-09-05T14:40:35Z",
    "closed_at": "2019-09-04T19:37:09Z",
    "author_association": "NONE",
    "body": "### Expected Behavior\r\nI am adding headers to the response of every request in my app (a [pep 503](https://www.python.org/dev/peps/pep-0503/) style web-app to serve out internally hosted python libraries).  The extra header shows up in almost every response.\r\n\r\n```python\r\napp = Flask(__name__)\r\n\r\n@app.after_request\r\ndef extra_header(response):\r\n    response.headers['foo'] = 'bar'\r\n    return response\r\n\r\n### pep 503 endpoint to serve pip installs\r\n@app.route('/packages/<package_name>/<filename>')\r\ndef get_package(package_name, filename):\r\n    ### logic to get library from internal databases\r\n    ### directory, filename get defined here\r\n    return send_from_directory(directory, filename)\r\n```\r\n\r\nThen the users run a `pip install index-url=<flask-app url>`.  Every request/response must include the custom header though or it is blocked by internal gates.\r\n\r\n### Actual Behavior\r\nWhen a user runs a `pip install 'internal_library>1.2'` or similar syntax without a `--no-cache-dir` option, pip sends a GET to the server with `If-None-Match` and `If-Modified-Since` headers.  When those match, the web-server responds with status code **304** and headers that include `ETag` and `Cache-Control`, but not the custom headers specified in the `after_request` function.\r\n\r\n### Environment\r\n\r\n* Python version: 3.5.1\r\n* Flask version: 0.12.2\r\n* Werkzeug version: 0.12.2\r\n",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/528053014",
            "html_url": "https://github.com/pallets/flask/issues/3352#issuecomment-528053014",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/3352",
            "id": 528053014,
            "node_id": "MDEyOklzc3VlQ29tbWVudDUyODA1MzAxNA==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2019-09-04T19:37:09Z",
            "updated_at": "2019-09-04T19:37:09Z",
            "author_association": "MEMBER",
            "body": "I can't reproduce this issue as described. Nothing about `send_file` would be able to bypass `after_request`. I ran a sample application and observed the custom header with the 304 status code in the response.\r\n\r\n```python\r\nfrom flask import Flask\r\nfrom flask import send_from_directory\r\n\r\napp = Flask(__name__)\r\n\r\n\r\n@app.after_request\r\ndef special_header(response):\r\n    response.headers['foo'] = 'bar'\r\n    return response\r\n\r\n\r\n@app.route(\"/\")\r\ndef index():\r\n    return send_from_directory(\".\", \"LICENSE.rst\")\r\n\r\n\r\nif __name__ == '__main__':\r\n    import requests\r\n\r\n    rv = requests.get(\r\n        \"http://127.0.0.1:5000/static/LICENSE.rst\",\r\n        headers={\"If-None-Match\": '\"1561391683.603-1475-2062749753\"'},\r\n    )\r\n    print(rv.status_code)\r\n    print(rv.headers['foo'])\r\n```\r\n\r\n```\r\n$ FLASK_APP=example flask run\r\n```\r\n\r\n```\r\n$ python example.py\r\n304\r\nbar\r\n```"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/528053480",
            "html_url": "https://github.com/pallets/flask/issues/3352#issuecomment-528053480",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/3352",
            "id": 528053480,
            "node_id": "MDEyOklzc3VlQ29tbWVudDUyODA1MzQ4MA==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2019-09-04T19:38:35Z",
            "updated_at": "2019-09-04T19:39:02Z",
            "author_association": "MEMBER",
            "body": "Also note that Flask 0.12 and Werkzeug 0.12 are no longer directly supported. The latest versions are Flask 1.1 and Werkzeug 0.15. As far as I know, nothing should have changed this behavior, but it would still be good to upgrade if possible."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/528396049",
            "html_url": "https://github.com/pallets/flask/issues/3352#issuecomment-528396049",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/3352",
            "id": 528396049,
            "node_id": "MDEyOklzc3VlQ29tbWVudDUyODM5NjA0OQ==",
            "user": {
                "login": "kafonek",
                "id": 3867768,
                "node_id": "MDQ6VXNlcjM4Njc3Njg=",
                "avatar_url": "https://avatars3.githubusercontent.com/u/3867768?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/kafonek",
                "html_url": "https://github.com/kafonek",
                "followers_url": "https://api.github.com/users/kafonek/followers",
                "following_url": "https://api.github.com/users/kafonek/following{/other_user}",
                "gists_url": "https://api.github.com/users/kafonek/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/kafonek/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/kafonek/subscriptions",
                "organizations_url": "https://api.github.com/users/kafonek/orgs",
                "repos_url": "https://api.github.com/users/kafonek/repos",
                "events_url": "https://api.github.com/users/kafonek/events{/privacy}",
                "received_events_url": "https://api.github.com/users/kafonek/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2019-09-05T14:40:34Z",
            "updated_at": "2019-09-05T14:40:34Z",
            "author_association": "NONE",
            "body": "@davidism thanks for the quick response and tips on upgrading versions, looks like the default loads on our plaform-as-a-service tooling are out of date.  I upgraded to Flask 1.1 and Wekzeug 0.15 and still see the odd behavior of missing the custom headers only when `send_from_directory` returns the 304.  However, when I create a toy example like your code has and run it on my local machine, I can't replicate the problem.\r\n\r\nFor posterity, the production app uses a handful of flask extensions including `flask_cors`, `flask_bootstrap`, and `flask_nav` but I couldn't trigger this weird behavior when I included them in the toy example either.\r\n\r\nI'm happy to leave this closed for now since I can't replicate the problem outside of our platform-as-a-service environment and just including `add_etags=False` is a workaround solution.  If I can ever replicate the problem I'll re-open this issue.\r\n\r\nThanks again for the help."
        }
    ]
}