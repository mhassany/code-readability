{
    "url": "https://api.github.com/repos/pallets/flask/issues/3033",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/3033/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/3033/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/3033/events",
    "html_url": "https://github.com/pallets/flask/issues/3033",
    "id": 391459607,
    "node_id": "MDU6SXNzdWUzOTE0NTk2MDc=",
    "number": 3033,
    "title": "TypeError: __name__ must be set to a string object ",
    "user": {
        "login": "chuck-bass",
        "id": 28384212,
        "node_id": "MDQ6VXNlcjI4Mzg0MjEy",
        "avatar_url": "https://avatars3.githubusercontent.com/u/28384212?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/chuck-bass",
        "html_url": "https://github.com/chuck-bass",
        "followers_url": "https://api.github.com/users/chuck-bass/followers",
        "following_url": "https://api.github.com/users/chuck-bass/following{/other_user}",
        "gists_url": "https://api.github.com/users/chuck-bass/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/chuck-bass/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/chuck-bass/subscriptions",
        "organizations_url": "https://api.github.com/users/chuck-bass/orgs",
        "repos_url": "https://api.github.com/users/chuck-bass/repos",
        "events_url": "https://api.github.com/users/chuck-bass/events{/privacy}",
        "received_events_url": "https://api.github.com/users/chuck-bass/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2018-12-16T11:49:15Z",
    "updated_at": "2019-01-06T17:08:46Z",
    "closed_at": "2019-01-06T17:08:46Z",
    "author_association": "NONE",
    "body": "### Expected Behavior\r\n\r\n\r\nI wanna write code capable of python3. So i add \"from future import unicode_literals\" on the top of file.Meanwhile, i use MethodView to build rest api in the same file. I wish it could work fine.\r\n\r\nHere is an example:\r\n\r\n```\r\n  # -*- coding: utf-8 -*-\r\n\r\n  from __future__ import unicode_literals\r\n  from flask import Flask\r\n  from flask import Blueprint, request, current_app, g, abort\r\n  from flask.views import MethodView\r\n\r\n  masterviews = Blueprint('newmasterviews', __name__)\r\n\r\n\r\n  class TeamAPI(MethodView):\r\n\r\n      def get(self):\r\n          pass\r\n\r\n\r\n  team_view = TeamAPI.as_view('team_api')\r\n\r\n  app = Flask(__name__)\r\n\r\n  app.register_blueprint(masterviews, url_prefix='/rest/master')\r\n```\r\n\r\n\r\n### Actual Behavior\r\n\r\nHowever, when i run the web app, it thows the error,\r\n\r\n```\r\n\"lib/python2.7/site-packages/flask/views.py\", line 98, in as_view\r\nview.__name__ = name\r\nTypeError: __name__ must be set to a string object\". \r\n```\r\nI soon realize that because i use the \"from future import unicode_literals\" in py2 so the function name is unicode type, but the name of a function should be string type.So i wonder is it possible to change the\r\nsource code in the views.py and add the if-then workflow to convert name of function from unicode type into string type to handle the situation .\r\n\r\n### Environment\r\npython2.7\r\nFlask==1.0.2\r\nWerkzeug==0.14.1\r\n",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/449612297",
            "html_url": "https://github.com/pallets/flask/issues/3033#issuecomment-449612297",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/3033",
            "id": 449612297,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ0OTYxMjI5Nw==",
            "user": {
                "login": "greyli",
                "id": 12967000,
                "node_id": "MDQ6VXNlcjEyOTY3MDAw",
                "avatar_url": "https://avatars3.githubusercontent.com/u/12967000?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/greyli",
                "html_url": "https://github.com/greyli",
                "followers_url": "https://api.github.com/users/greyli/followers",
                "following_url": "https://api.github.com/users/greyli/following{/other_user}",
                "gists_url": "https://api.github.com/users/greyli/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/greyli/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/greyli/subscriptions",
                "organizations_url": "https://api.github.com/users/greyli/orgs",
                "repos_url": "https://api.github.com/users/greyli/repos",
                "events_url": "https://api.github.com/users/greyli/events{/privacy}",
                "received_events_url": "https://api.github.com/users/greyli/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2018-12-23T03:43:55Z",
            "updated_at": "2018-12-26T10:28:33Z",
            "author_association": "MEMBER",
            "body": "Thanks for reporting on this! You can fix it temporarily by using `str()` or `bytes()`, for example:\r\n```py\r\nteam_view = TeamAPI.as_view(str('team_api'))\r\n```\r\n@davidism Could we just add this under [flask/views.py: L102](https://github.com/pallets/flask/blob/master/flask/views.py#L102) and L91:\r\n```py\r\nname = str(name)\r\n```\r\nOr this:\r\n```py\r\nfrom _compat import PY2, text_type\r\n\r\nif PY2 and isinstance(name, text_type):\r\n    name = str(name)\r\n```"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/451757633",
            "html_url": "https://github.com/pallets/flask/issues/3033#issuecomment-451757633",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/3033",
            "id": 451757633,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTc1NzYzMw==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2019-01-06T17:08:46Z",
            "updated_at": "2019-01-06T17:08:46Z",
            "author_association": "MEMBER",
            "body": "This is one of the (many) downsides of using the `unicode_literals` future. It is not something we support. You'll need to be deliberate about the types you're passing in Python 2.\r\n\r\n`unicode_literals` doesn't make your code any more capable of running on Python 3, it just makes all strings Unicode, which is not supported consistently on Python 2 in general."
        }
    ]
}