{
    "url": "https://api.github.com/repos/pallets/flask/issues/1603",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/1603/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/1603/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/1603/events",
    "html_url": "https://github.com/pallets/flask/pull/1603",
    "id": 114505790,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NDkzODY1NTY=",
    "number": 1603,
    "title": "Added session regenerate/destroy methods",
    "user": {
        "login": "twolfson",
        "id": 902488,
        "node_id": "MDQ6VXNlcjkwMjQ4OA==",
        "avatar_url": "https://avatars3.githubusercontent.com/u/902488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/twolfson",
        "html_url": "https://github.com/twolfson",
        "followers_url": "https://api.github.com/users/twolfson/followers",
        "following_url": "https://api.github.com/users/twolfson/following{/other_user}",
        "gists_url": "https://api.github.com/users/twolfson/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/twolfson/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/twolfson/subscriptions",
        "organizations_url": "https://api.github.com/users/twolfson/orgs",
        "repos_url": "https://api.github.com/users/twolfson/repos",
        "events_url": "https://api.github.com/users/twolfson/events{/privacy}",
        "received_events_url": "https://api.github.com/users/twolfson/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 398835124,
            "node_id": "MDU6TGFiZWwzOTg4MzUxMjQ=",
            "url": "https://api.github.com/repos/pallets/flask/labels/session",
            "name": "session",
            "color": "1d76db",
            "default": false,
            "description": null
        }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 16,
    "created_at": "2015-11-02T00:58:21Z",
    "updated_at": "2018-10-23T17:43:47Z",
    "closed_at": "2017-04-22T18:39:55Z",
    "author_association": "NONE",
    "pull_request": {
        "url": "https://api.github.com/repos/pallets/flask/pulls/1603",
        "html_url": "https://github.com/pallets/flask/pull/1603",
        "diff_url": "https://github.com/pallets/flask/pull/1603.diff",
        "patch_url": "https://github.com/pallets/flask/pull/1603.patch"
    },
    "body": "In #1600, we have been discussing adding session regeneration/destroy methods to make preventing session fixation part of Flask. This is a rough draft based on that discussion. In this PR:\n- Added `app.session_regenerate` and `app.session_destroy` methods to `app.py`\n- Added `session_interface.regenerate_session` and `session_interface.destroy_session` to session interfaces\n- Added tests against cookie interface verifying the methods work as expected\n- Updated quickstart documentation to include notes on when to use `session_regenerate` and `session_destroy`\n\n**Missing:**\n- The documentation probably needs more thought/work (e.g. add to API, maybe other documents).\n",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/222099880",
            "html_url": "https://github.com/pallets/flask/pull/1603#issuecomment-222099880",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1603",
            "id": 222099880,
            "node_id": "MDEyOklzc3VlQ29tbWVudDIyMjA5OTg4MA==",
            "user": {
                "login": "RonnyPfannschmidt",
                "id": 156838,
                "node_id": "MDQ6VXNlcjE1NjgzOA==",
                "avatar_url": "https://avatars1.githubusercontent.com/u/156838?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/RonnyPfannschmidt",
                "html_url": "https://github.com/RonnyPfannschmidt",
                "followers_url": "https://api.github.com/users/RonnyPfannschmidt/followers",
                "following_url": "https://api.github.com/users/RonnyPfannschmidt/following{/other_user}",
                "gists_url": "https://api.github.com/users/RonnyPfannschmidt/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/RonnyPfannschmidt/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/RonnyPfannschmidt/subscriptions",
                "organizations_url": "https://api.github.com/users/RonnyPfannschmidt/orgs",
                "repos_url": "https://api.github.com/users/RonnyPfannschmidt/repos",
                "events_url": "https://api.github.com/users/RonnyPfannschmidt/events{/privacy}",
                "received_events_url": "https://api.github.com/users/RonnyPfannschmidt/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2016-05-27T09:17:28Z",
            "updated_at": "2016-05-27T09:17:28Z",
            "author_association": "CONTRIBUTOR",
            "body": "at first glace this looks like a \"breaking\" change to me (external session implementer will break)\n\nas such i think this needs a major release and/or compat handling\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/222117676",
            "html_url": "https://github.com/pallets/flask/pull/1603#issuecomment-222117676",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1603",
            "id": 222117676,
            "node_id": "MDEyOklzc3VlQ29tbWVudDIyMjExNzY3Ng==",
            "user": {
                "login": "ThiefMaster",
                "id": 179599,
                "node_id": "MDQ6VXNlcjE3OTU5OQ==",
                "avatar_url": "https://avatars1.githubusercontent.com/u/179599?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/ThiefMaster",
                "html_url": "https://github.com/ThiefMaster",
                "followers_url": "https://api.github.com/users/ThiefMaster/followers",
                "following_url": "https://api.github.com/users/ThiefMaster/following{/other_user}",
                "gists_url": "https://api.github.com/users/ThiefMaster/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/ThiefMaster/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ThiefMaster/subscriptions",
                "organizations_url": "https://api.github.com/users/ThiefMaster/orgs",
                "repos_url": "https://api.github.com/users/ThiefMaster/repos",
                "events_url": "https://api.github.com/users/ThiefMaster/events{/privacy}",
                "received_events_url": "https://api.github.com/users/ThiefMaster/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2016-05-27T10:50:57Z",
            "updated_at": "2016-05-27T10:52:21Z",
            "author_association": "MEMBER",
            "body": "~~~Since session interfaces are supposed to inherit from `SessionInterface` it'd only break custom interfaces that don't inherit from that class.~~~ Nevermind, I thought the base ones used `pass` instead of raising `NotImplementedError`\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/222207919",
            "html_url": "https://github.com/pallets/flask/pull/1603#issuecomment-222207919",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1603",
            "id": 222207919,
            "node_id": "MDEyOklzc3VlQ29tbWVudDIyMjIwNzkxOQ==",
            "user": {
                "login": "twolfson",
                "id": 902488,
                "node_id": "MDQ6VXNlcjkwMjQ4OA==",
                "avatar_url": "https://avatars3.githubusercontent.com/u/902488?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/twolfson",
                "html_url": "https://github.com/twolfson",
                "followers_url": "https://api.github.com/users/twolfson/followers",
                "following_url": "https://api.github.com/users/twolfson/following{/other_user}",
                "gists_url": "https://api.github.com/users/twolfson/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/twolfson/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/twolfson/subscriptions",
                "organizations_url": "https://api.github.com/users/twolfson/orgs",
                "repos_url": "https://api.github.com/users/twolfson/repos",
                "events_url": "https://api.github.com/users/twolfson/events{/privacy}",
                "received_events_url": "https://api.github.com/users/twolfson/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2016-05-27T17:36:18Z",
            "updated_at": "2016-05-27T17:36:18Z",
            "author_association": "NONE",
            "body": "It won't be a breaking change as people must call `regenerate` and `destroy` themselves (e.g. at login, logout). Since these are new methods, nobody will be using them yet so nobody will receive the `NotImplementedError`\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/222302083",
            "html_url": "https://github.com/pallets/flask/pull/1603#issuecomment-222302083",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1603",
            "id": 222302083,
            "node_id": "MDEyOklzc3VlQ29tbWVudDIyMjMwMjA4Mw==",
            "user": {
                "login": "RonnyPfannschmidt",
                "id": 156838,
                "node_id": "MDQ6VXNlcjE1NjgzOA==",
                "avatar_url": "https://avatars1.githubusercontent.com/u/156838?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/RonnyPfannschmidt",
                "html_url": "https://github.com/RonnyPfannschmidt",
                "followers_url": "https://api.github.com/users/RonnyPfannschmidt/followers",
                "following_url": "https://api.github.com/users/RonnyPfannschmidt/following{/other_user}",
                "gists_url": "https://api.github.com/users/RonnyPfannschmidt/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/RonnyPfannschmidt/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/RonnyPfannschmidt/subscriptions",
                "organizations_url": "https://api.github.com/users/RonnyPfannschmidt/orgs",
                "repos_url": "https://api.github.com/users/RonnyPfannschmidt/repos",
                "events_url": "https://api.github.com/users/RonnyPfannschmidt/events{/privacy}",
                "received_events_url": "https://api.github.com/users/RonnyPfannschmidt/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2016-05-28T10:42:01Z",
            "updated_at": "2016-05-28T10:42:01Z",
            "author_association": "CONTRIBUTOR",
            "body": "that makes breakage more devious, because the downstreams that implement the interface wont have a indication, and up-streams trying to use those projects will be unable to do so because the api changed in a non-indicative way\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/222320722",
            "html_url": "https://github.com/pallets/flask/pull/1603#issuecomment-222320722",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1603",
            "id": 222320722,
            "node_id": "MDEyOklzc3VlQ29tbWVudDIyMjMyMDcyMg==",
            "user": {
                "login": "twolfson",
                "id": 902488,
                "node_id": "MDQ6VXNlcjkwMjQ4OA==",
                "avatar_url": "https://avatars3.githubusercontent.com/u/902488?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/twolfson",
                "html_url": "https://github.com/twolfson",
                "followers_url": "https://api.github.com/users/twolfson/followers",
                "following_url": "https://api.github.com/users/twolfson/following{/other_user}",
                "gists_url": "https://api.github.com/users/twolfson/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/twolfson/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/twolfson/subscriptions",
                "organizations_url": "https://api.github.com/users/twolfson/orgs",
                "repos_url": "https://api.github.com/users/twolfson/repos",
                "events_url": "https://api.github.com/users/twolfson/events{/privacy}",
                "received_events_url": "https://api.github.com/users/twolfson/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2016-05-28T17:46:16Z",
            "updated_at": "2016-05-28T17:46:16Z",
            "author_association": "NONE",
            "body": "I think you are conflating an issue of documenting changes with the feature itself. As stated before, these methods are not automatically invoked so nothing can break.\n\nIf someone wants to use these features, then they must make sure that all the corresponding libraries using these features know to use these features. But that isn't a breaking change in this library, it's a breaking change when shifting around dependencies (in the projects that use said dependencies).\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/296165442",
            "html_url": "https://github.com/pallets/flask/pull/1603#issuecomment-296165442",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1603",
            "id": 296165442,
            "node_id": "MDEyOklzc3VlQ29tbWVudDI5NjE2NTQ0Mg==",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2017-04-21T11:20:40Z",
            "updated_at": "2017-04-21T11:20:40Z",
            "author_association": "MEMBER",
            "body": "I don't understand why the code in a potential `destroy_session` implementation\ncouldn't be added to the implementation of `clear`. Sure there is a semantic\ndifference between the two, but I can't imagine a situation where the\napplication developer would really like to just clear the session instead of\ndestroying it. I would therefore suggest that `clear` does the job of\n`destroy_session`. That's better than having some sort of opt-in security this\nPR provides.\n\nThe same can be said for `regenerate_session`.  Assuming `clear` changes the\nsession ID like I suggested above, you might as well just call `session.clear`\nbefore logging the user in. You would have to slightly change the\nimplementation of `clear` to actually reset the session when it is called, not\nwhen the session is empty. But in the end you would achieve all the desired\nresults without adding extra API surface.\n\nApart from that I don't consider it effective to call `regenerate_session` in\nyour code to mitigate the potential catastrophe an XSS in your application\ncould do (which is, as far as I understand, the only way you could steal the\ncookie here). It is not clear at all where one would have to put those\n`regenerate_session` calls. Doing it just before login doesn't fully mitigate\nthe effects an XSS could have. Better idea is to configure your CSP to avoid\nthe execution in the first place.\n\nOn Thu, Apr 20, 2017 at 06:04:14PM -0700, David Lord wrote:\n> @davidism requested your review on: pallets/flask#1603 Added session regenerate/destroy methods.\n> \n> -- \n> You are receiving this because you were mentioned.\n> Reply to this email directly or view it on GitHub:\n> https://github.com/pallets/flask/pull/1603#event-1051615060\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/296283564",
            "html_url": "https://github.com/pallets/flask/pull/1603#issuecomment-296283564",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1603",
            "id": 296283564,
            "node_id": "MDEyOklzc3VlQ29tbWVudDI5NjI4MzU2NA==",
            "user": {
                "login": "twolfson",
                "id": 902488,
                "node_id": "MDQ6VXNlcjkwMjQ4OA==",
                "avatar_url": "https://avatars3.githubusercontent.com/u/902488?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/twolfson",
                "html_url": "https://github.com/twolfson",
                "followers_url": "https://api.github.com/users/twolfson/followers",
                "following_url": "https://api.github.com/users/twolfson/following{/other_user}",
                "gists_url": "https://api.github.com/users/twolfson/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/twolfson/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/twolfson/subscriptions",
                "organizations_url": "https://api.github.com/users/twolfson/orgs",
                "repos_url": "https://api.github.com/users/twolfson/repos",
                "events_url": "https://api.github.com/users/twolfson/events{/privacy}",
                "received_events_url": "https://api.github.com/users/twolfson/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2017-04-21T19:16:57Z",
            "updated_at": "2017-04-21T19:16:57Z",
            "author_association": "NONE",
            "body": "@untitaker These methods are to prevent session fixation attacks. The simplest example is:\r\n\r\n- Attacker sets a user's session id before they log in\r\n- User visits site, logs in, and their session id doesn't change\r\n- Attacker can use the session id they gave to user to visit site as though they are user\r\n\r\nMore content here: https://www.owasp.org/index.php/Session_fixation\r\n\r\nWith respect to using `clear()` as a replacement, `clear()` would remove the contents of the session but the session id would stay the same.\r\n\r\nWith `destroy_session`, we both unset the session id cookie from the user's browser as well as delete it from the underlying store. This is typically used on log out. Due to erasure from the underlying store, it prevents the attacker from accessing the session content.\r\n\r\nWith `regenerate_session`, we generate a new session id, keep the same session data, update the session id cookie in the user's browser, and update the session's key in the underlying store. This is typically used on log in. Due to key shuffling, it prevents the attacker from reusing the previously given session id to access the logged in session.\r\n\r\nA scenario where we would want  a `regenerate_session` instead of a `clear()` would be something like restoring a user's page on log in (e.g. visit `/item/123` but it requires log in, after they log in we redirect back to `/item/123`)"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/296286914",
            "html_url": "https://github.com/pallets/flask/pull/1603#issuecomment-296286914",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1603",
            "id": 296286914,
            "node_id": "MDEyOklzc3VlQ29tbWVudDI5NjI4NjkxNA==",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2017-04-21T19:33:13Z",
            "updated_at": "2017-04-21T19:33:13Z",
            "author_association": "MEMBER",
            "body": "On Fri, Apr 21, 2017 at 12:17:08PM -0700, Todd Wolfson wrote:\n> @untitaker These methods are to prevent session fixation attacks. The simplest example is:\n> \n> - Attacker sets a user's session id before they log in\n> - User visits site, logs in, and their session id doesn't change\n> - Attacker can use the session id they gave to user to visit site as though they are user\n> \n> More content here: https://www.owasp.org/index.php/Session_fixation\n\nI know.\n\n> \n> With respect to using `clear()` as a replacement, `clear()` would remove the contents of the session but the session id would stay the same.\n\nI already said that `clear` might as well change the session ID. I know this\nisn't the case at the moment.\n\nThe rest of what you wrote misses the point I tried to make, which is that\nthere are much more points in time where an XSS could be used to steal an\nexisting session. Defending against all of them would imply that you have to\nsprinkle `regenerate_session` everywhere, which is a non-solution. The correct\nsolution is to prevent hijacking via e.g. CSP, not mitigating its effects.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/296292040",
            "html_url": "https://github.com/pallets/flask/pull/1603#issuecomment-296292040",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1603",
            "id": 296292040,
            "node_id": "MDEyOklzc3VlQ29tbWVudDI5NjI5MjA0MA==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2017-04-21T19:58:48Z",
            "updated_at": "2017-04-21T19:59:12Z",
            "author_association": "MEMBER",
            "body": "What session id are we referring to? Flask doesn't set one. Any implementation that does can easily clear it in `clear` if it's not cleared automatically for some reason. I agree with untitaker, this can already be done with the existing methods but should really be handled using CSP headers."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/296292917",
            "html_url": "https://github.com/pallets/flask/pull/1603#issuecomment-296292917",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1603",
            "id": 296292917,
            "node_id": "MDEyOklzc3VlQ29tbWVudDI5NjI5MjkxNw==",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2017-04-21T20:03:00Z",
            "updated_at": "2017-04-21T20:03:00Z",
            "author_association": "MEMBER",
            "body": "When I referred to session ids I was assuming a backend that had those. \n\nOn 21 April 2017 21:58:55 GMT+02:00, David Lord <notifications@github.com> wrote:\n>What session id are we referring to? Flask doesn't set one. Any\n>implementation that does can easily clear it in `clear`. I agree with\n>untitaker, this can already be done with the existing methods but\n>should really be handled using CSP headers.\n>\n>-- \n>You are receiving this because you were mentioned.\n>Reply to this email directly or view it on GitHub:\n>https://github.com/pallets/flask/pull/1603#issuecomment-296292040\n\n-- \nSent from my Android device with K-9 Mail. Please excuse my brevity."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/296297643",
            "html_url": "https://github.com/pallets/flask/pull/1603#issuecomment-296297643",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1603",
            "id": 296297643,
            "node_id": "MDEyOklzc3VlQ29tbWVudDI5NjI5NzY0Mw==",
            "user": {
                "login": "twolfson",
                "id": 902488,
                "node_id": "MDQ6VXNlcjkwMjQ4OA==",
                "avatar_url": "https://avatars3.githubusercontent.com/u/902488?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/twolfson",
                "html_url": "https://github.com/twolfson",
                "followers_url": "https://api.github.com/users/twolfson/followers",
                "following_url": "https://api.github.com/users/twolfson/following{/other_user}",
                "gists_url": "https://api.github.com/users/twolfson/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/twolfson/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/twolfson/subscriptions",
                "organizations_url": "https://api.github.com/users/twolfson/orgs",
                "repos_url": "https://api.github.com/users/twolfson/repos",
                "events_url": "https://api.github.com/users/twolfson/events{/privacy}",
                "received_events_url": "https://api.github.com/users/twolfson/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2017-04-21T20:26:21Z",
            "updated_at": "2017-04-21T20:26:37Z",
            "author_association": "NONE",
            "body": "Typically these methods are used sparsely (i.e. on login, forgot password success, and log out). I think \"sprinkingly everywhere\" is making it sound a lot more frequent than it is.\r\n\r\nWhile it's great to consider having no XSS issues as a solution to prevent leaking session ids, these are 2 different attacks; one sets the session id, the other extracts it. I would hope that adding these methods leads to more documentation and convention around always using `regenerate_session()` and `destroy_session()`, thus educating newer developers instead of handwaving that `clear()` should be used.\r\n\r\nWith respect to CSP, it's only supported by modern browsers whereas session destruction/regeneration is supported everywhere.\r\n\r\nFor reference, these methods already exist in a similar Node.js framework:\r\n\r\n- https://github.com/expressjs/session/tree/v1.15.2#sessionregeneratecallback"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/296299337",
            "html_url": "https://github.com/pallets/flask/pull/1603#issuecomment-296299337",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1603",
            "id": 296299337,
            "node_id": "MDEyOklzc3VlQ29tbWVudDI5NjI5OTMzNw==",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2017-04-21T20:34:38Z",
            "updated_at": "2017-04-21T20:34:38Z",
            "author_association": "MEMBER",
            "body": "What is handwavy about assigning this purpose to `clear()`?\n\nOn Fri, Apr 21, 2017 at 01:26:27PM -0700, Todd Wolfson wrote:\n> Typically these methods are used sparsely (i.e. on login, forgot password success, and log out). I think \"sprinkingly everywhere\" is making it sound a lot more common than it is.\n> \n> While it's great to consider having no XSS issues as a solution to prevent leaking session ids, these are 2 different attacks; one sets the session id, the other extracts it. I would hope that adding these methods leads to more documentation and convention around always using `regenerate_session()` and `destroy_session()`, thus educating newer developers instead of handwaving that `clear()` should be used.\n> \n> With respect to CSP, it's only supported by modern browsers whereas session destruction/regeneration is supported everywhere.\n> \n> For reference, these methods already exist in a similar Node.js framework:\n> \n> - https://github.com/expressjs/session/tree/v1.15.2#sessionregeneratecallback\n> \n> -- \n> You are receiving this because you were mentioned.\n> Reply to this email directly or view it on GitHub:\n> https://github.com/pallets/flask/pull/1603#issuecomment-296297643\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/296299605",
            "html_url": "https://github.com/pallets/flask/pull/1603#issuecomment-296299605",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1603",
            "id": 296299605,
            "node_id": "MDEyOklzc3VlQ29tbWVudDI5NjI5OTYwNQ==",
            "user": {
                "login": "twolfson",
                "id": 902488,
                "node_id": "MDQ6VXNlcjkwMjQ4OA==",
                "avatar_url": "https://avatars3.githubusercontent.com/u/902488?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/twolfson",
                "html_url": "https://github.com/twolfson",
                "followers_url": "https://api.github.com/users/twolfson/followers",
                "following_url": "https://api.github.com/users/twolfson/following{/other_user}",
                "gists_url": "https://api.github.com/users/twolfson/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/twolfson/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/twolfson/subscriptions",
                "organizations_url": "https://api.github.com/users/twolfson/orgs",
                "repos_url": "https://api.github.com/users/twolfson/repos",
                "events_url": "https://api.github.com/users/twolfson/events{/privacy}",
                "received_events_url": "https://api.github.com/users/twolfson/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2017-04-21T20:36:02Z",
            "updated_at": "2017-04-21T20:36:02Z",
            "author_association": "NONE",
            "body": "It's not semantic making it hard for experienced developers to find and doesn't educate developers unfamiliar with session fixation attacks"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/296393092",
            "html_url": "https://github.com/pallets/flask/pull/1603#issuecomment-296393092",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1603",
            "id": 296393092,
            "node_id": "MDEyOklzc3VlQ29tbWVudDI5NjM5MzA5Mg==",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2017-04-22T18:39:55Z",
            "updated_at": "2017-04-22T18:39:55Z",
            "author_association": "MEMBER",
            "body": "Again, CSP fully prevents this problem while regenerating session IDs fixes a very specific kind of attack that can be done via XSS. The vulnerability (the XSS) is still there, and can be exploited in other ways.\r\n\r\nThe worst about this though that it's basically opt-in security, and even then a very manual kind. It requires developers to add method calls \"strategically\".\r\n\r\nTherefore I will close this. I'm open to other ways to prevent session fixation, but this one isn't it."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/296394211",
            "html_url": "https://github.com/pallets/flask/pull/1603#issuecomment-296394211",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1603",
            "id": 296394211,
            "node_id": "MDEyOklzc3VlQ29tbWVudDI5NjM5NDIxMQ==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2017-04-22T18:59:06Z",
            "updated_at": "2017-04-22T18:59:06Z",
            "author_association": "MEMBER",
            "body": "Two good steps would be:\r\n\r\n* patch flask-session to reset the id on `clear`\r\n* adjust our tutorial to use `clear` during login and logout instead of `pop`-ing specific keys"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/296394875",
            "html_url": "https://github.com/pallets/flask/pull/1603#issuecomment-296394875",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1603",
            "id": 296394875,
            "node_id": "MDEyOklzc3VlQ29tbWVudDI5NjM5NDg3NQ==",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2017-04-22T19:10:11Z",
            "updated_at": "2017-04-22T19:10:11Z",
            "author_association": "MEMBER",
            "body": "Probably. I'm still unsure if we really want to encourage a practice that *only might decrease the likelyhood* of an exploit running, for a lack of data."
        }
    ]
}