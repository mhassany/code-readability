{
    "url": "https://api.github.com/repos/pallets/flask/issues/1701",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/1701/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/1701/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/1701/events",
    "html_url": "https://github.com/pallets/flask/issues/1701",
    "id": 128541132,
    "node_id": "MDU6SXNzdWUxMjg1NDExMzI=",
    "number": 1701,
    "title": "Is it needed to add a decorator like Flask.on_app_start ?",
    "user": {
        "login": "jjwt",
        "id": 1736499,
        "node_id": "MDQ6VXNlcjE3MzY0OTk=",
        "avatar_url": "https://avatars2.githubusercontent.com/u/1736499?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jjwt",
        "html_url": "https://github.com/jjwt",
        "followers_url": "https://api.github.com/users/jjwt/followers",
        "following_url": "https://api.github.com/users/jjwt/following{/other_user}",
        "gists_url": "https://api.github.com/users/jjwt/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jjwt/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jjwt/subscriptions",
        "organizations_url": "https://api.github.com/users/jjwt/orgs",
        "repos_url": "https://api.github.com/users/jjwt/repos",
        "events_url": "https://api.github.com/users/jjwt/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jjwt/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2016-01-25T13:50:17Z",
    "updated_at": "2016-01-27T15:05:20Z",
    "closed_at": "2016-01-25T15:02:30Z",
    "author_association": "NONE",
    "body": "There is a similar question at http://stackoverflow.com/questions/25504149/why-does-running-the-flask-dev-server-run-itself-twice.\nBut i do not think it is my case. I just save all \ncodes before run the server, but it still goes twice !\nI do not want to use Flask.before_first_request, for i want it run\non startup , not wailt util a request comes in.\n\nI write a small app with flask and celery.\nI add some periodic tasks and they work well.\nAnd I want a task run when the app starts, \nbut I find celery receives it and run it twice,\nwhy?\n\nmy `config.py` is\n\n```\nBROKER_URL = 'redis://localhost:6379/0'\nBROKER_TRANSPORT_OPTIONS = {'visibility_timeout': 3600}  \\# 1 hour.\nCELERY_RESULT_BACKEND = 'redis://localhost:6379/0'\nBROKER_TRANSPORT_OPTIONS = {'fanout_prefix': True}\nCELERY_ACCEPT_CONTENT = ['pickle', 'json', 'msgpack', 'yaml']\nCELERY_TASK_SERIALIZER = 'json'\nCELERY_RESULT_SERIALIZER = 'json'\nCELERY_TIMEZONE = 'Asia/Shanghai'\nCELERY_ENABLE_UTC = True\n\nCELERYBEAT_SCHEDULE = {\n    'delcookiefiles-every-1-hour': {\n        'task': 'TiebaTools.tasks.del_cookiefile',\n        'schedule': timedelta(hours=1),\n    },\n    'daily_sign': {\n        'task': 'TiebaTools.tasks.daily_sign',\n        'schedule': crontab(minute=30, hour=0),\n    },\n}\n...\n```\n\nmy `proj/TiebaTools/__init__.py` is\n\n```\n...\napp = Flask(__name__, instance_relative_config=True)\napp.config.from_object('config')\napp.config.from_pyfile('config.py')\n\n\\# integrae sqlalchemy\ndb.init_app(app)\n\n\\# integrae Celery\ncel.conf.update(app.config)\nTaskBase = cel.Task\n\n\nclass ContextTask(TaskBase):\n    abstract = True\n\n    def __call__(self, *args, **kwargs):\n        with app.app_context():\n            return TaskBase.__call__(self, *args, **kwargs)\n\ncel.Task = ContextTask\n...\n```\n\nmy `proj/run.py` is\n\n```\nfrom TiebaTools import app, db\nfrom TiebaTools.tasks import daily_sign\nwith app.app_context():\n    db.create_all()\n\ndaily_sign.delay()\napp.run()\n```\n\nI run the app as below\n\n```\nredis-server (in one terminal)\nvenv/bin/celery worker -B -A TiebaTools.cel --loglevel=info (in second terminal)\nvenv/bin/python run.py (in third terminal)\n```\n\nafter first two commands execute, all go well, no task received.\n   But after the third command executes, message as below comes out in the second terminal.\n\n```\n[2016-01-24 21:03:43,989: INFO/MainProcess] Received task: TiebaTools.tasks.daily_sign[7f229395-b403-4d4b-9d6f-a009b603f9f6]\n[2016-01-24 21:03:43,991: WARNING/Worker-6] \nDEBUG in tasks [/home/dyh/svn/Tieba-Tools/TiebaTools/tasks.py:99]:\nupdate_all_tblist task starts !\n\n[2016-01-24 21:03:43,991: DEBUG/Worker-6] update_all_tblist task starts !\n[2016-01-24 21:03:44,013: INFO/MainProcess] Task TiebaTools.tasks.daily_sign[7f229395-b403-4d4b-9d6f-a009b603f9f6] succeeded in 0.0229967209888855s: '{\"result\": \"none TiebaList to sign !\"}'\n[2016-01-24 21:03:44,346: INFO/MainProcess] Received task: TiebaTools.tasks.daily_sign[fca044d1-29d8-4910-b71b-a7fc44d8a9a1]\n[2016-01-24 21:03:44,347: WARNING/Worker-3] \nDEBUG in tasks [/home/dyh/svn/Tieba-Tools/TiebaTools/tasks.py:99]:\nupdate_all_tblist task starts !\n\n[2016-01-24 21:03:44,347: DEBUG/Worker-3] update_all_tblist task starts !\n[2016-01-24 21:03:44,368: INFO/MainProcess] Task TiebaTools.tasks.daily_sign[fca044d1-29d8-4910-b71b-a7fc44d8a9a1] succeeded in 0.02192131800984498s: '{\"result\": \"none TiebaList to sign !\"}'\n```\n\nSo, what's wrong? Finally I set DEBUG=False to resolve it . But how can I debug\nor is it a bug , or is it needed to add a decorator like Flask.on_app_start ?\n",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/174534284",
            "html_url": "https://github.com/pallets/flask/issues/1701#issuecomment-174534284",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1701",
            "id": 174534284,
            "node_id": "MDEyOklzc3VlQ29tbWVudDE3NDUzNDI4NA==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2016-01-25T15:02:30Z",
            "updated_at": "2016-01-25T15:02:30Z",
            "author_association": "MEMBER",
            "body": "It runs twice because in debug mode the reloader is enabled by default, so the code is immediately reloaded the first time you start and the code to schedule the task runs again.  When running the dev server with the reloader, you can check if `WERKZEUG_RUN_MAIN` is not set.\n\n``` python\nif os.environ.get('WERKZEUG_RUN_MAIN') is None:\n    print('once')\n```\n\nHowever, there's no way in general to guarantee that the Flask app only runs once.  Any WSGI server can chose how it executes code, handles multiple threads/processes, etc.  You need to add some sort of check, for example using a timestamp in that redis server you started, to make sure the task doesn't run too often, or separate scheduling the task from starting the app.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/175672934",
            "html_url": "https://github.com/pallets/flask/issues/1701#issuecomment-175672934",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1701",
            "id": 175672934,
            "node_id": "MDEyOklzc3VlQ29tbWVudDE3NTY3MjkzNA==",
            "user": {
                "login": "jjwt",
                "id": 1736499,
                "node_id": "MDQ6VXNlcjE3MzY0OTk=",
                "avatar_url": "https://avatars2.githubusercontent.com/u/1736499?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/jjwt",
                "html_url": "https://github.com/jjwt",
                "followers_url": "https://api.github.com/users/jjwt/followers",
                "following_url": "https://api.github.com/users/jjwt/following{/other_user}",
                "gists_url": "https://api.github.com/users/jjwt/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/jjwt/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jjwt/subscriptions",
                "organizations_url": "https://api.github.com/users/jjwt/orgs",
                "repos_url": "https://api.github.com/users/jjwt/repos",
                "events_url": "https://api.github.com/users/jjwt/events{/privacy}",
                "received_events_url": "https://api.github.com/users/jjwt/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2016-01-27T15:05:20Z",
            "updated_at": "2016-01-27T15:05:20Z",
            "author_association": "NONE",
            "body": "I see , thank you very much for your quick answer.\n"
        }
    ]
}