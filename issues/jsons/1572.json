{
    "url": "https://api.github.com/repos/pallets/flask/issues/1572",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/1572/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/1572/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/1572/events",
    "html_url": "https://github.com/pallets/flask/issues/1572",
    "id": 108370794,
    "node_id": "MDU6SXNzdWUxMDgzNzA3OTQ=",
    "number": 1572,
    "title": " Logging Documentation, Patterns & Extending",
    "user": {
        "login": "nfarrar",
        "id": 831349,
        "node_id": "MDQ6VXNlcjgzMTM0OQ==",
        "avatar_url": "https://avatars2.githubusercontent.com/u/831349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nfarrar",
        "html_url": "https://github.com/nfarrar",
        "followers_url": "https://api.github.com/users/nfarrar/followers",
        "following_url": "https://api.github.com/users/nfarrar/following{/other_user}",
        "gists_url": "https://api.github.com/users/nfarrar/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/nfarrar/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nfarrar/subscriptions",
        "organizations_url": "https://api.github.com/users/nfarrar/orgs",
        "repos_url": "https://api.github.com/users/nfarrar/repos",
        "events_url": "https://api.github.com/users/nfarrar/events{/privacy}",
        "received_events_url": "https://api.github.com/users/nfarrar/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 32876,
            "node_id": "MDU6TGFiZWwzMjg3Ng==",
            "url": "https://api.github.com/repos/pallets/flask/labels/docs",
            "name": "docs",
            "color": "0e8a16",
            "default": false,
            "description": null
        },
        {
            "id": 648340773,
            "node_id": "MDU6TGFiZWw2NDgzNDA3NzM=",
            "url": "https://api.github.com/repos/pallets/flask/labels/logging",
            "name": "logging",
            "color": "1d76db",
            "default": false,
            "description": null
        }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2015-09-25T17:20:10Z",
    "updated_at": "2017-07-17T16:47:43Z",
    "closed_at": "2017-07-17T16:47:43Z",
    "author_association": "NONE",
    "body": "I've spent the last month digging through flask and building a large application. Figuring out and configuring logging has been one of the most difficult things to get under control. I still don't understand it well enough that I'm comfortable or have things configured the way I'd like.\n\nWhen learning a new python package/framework/utility - the first thing I _typically_ do is setup debug logging, so that I can see exactly what's going on. The more verbose the debugging messages are, the easier things are to figure out. Typically - debugging logs will dump information like:\n- a configuration file was loaded\n- a configuration value was set\n- API providers have been initialized and are ready for use\n- when API calls are performed, etc.\n\nAs far as I can tell, Flask doesn't do any of that - 'logs' are reserved for the instantiated flask application object itself - out of the box, running in debug mode - the only information I get out of the logs is that a request was received and answered. The debug logs don't seem to provide any information about flask's internal activities, things like: \n- a flask object was instantiated\n- a blueprint was registered\n- a route was configured\n- an extension was loaded\n- an extension was configured\n- extension specific things\n\nThese are all things I've had to \"jump through hoops\" to understand (while designing my application, application structure, application patterns, etc) - things that seem like they would have been _much_ easier to understand, had logs been available. As I dig further into Flask Internals while building out my application further, there's more and more stuff I'd like to be dumping to my logs so I know exactly what's going on, internally.\n\nAs an initial attempt to set this up - I started by using [logging_tree](https://pypi.python.org/pypi/logging_tree) to dump out the logger heirarchy to see what's what. Based on that - I basically hooked the Config object (similar to how [flasky](https://github.com/miguelgrinberg/flasky/blob/master/config.py#L45) is doing this). Then I read through all the logger docs I could find, I started putting logging statements all over my application code, for example:\n\n```\n    app.logger.debug('ENV:          %s' % app.config['ENV'])\n    app.logger.debug('HOST_ADDRESS: %s' % app.config['HOST_ADDRESS'])\n    app.logger.debug('HOST_PORT:    %s' % app.config['HOST_PORT'])\n    app.logger.debug('SECRET_KEY:   %s' % app.config['SECRET_KEY'])\n    app.logger.debug('PROJECT_ROOT: %s' % app.config['PROJECT_ROOT'])\n    app.logger.debug('APP_ROOT:     %s' % app.config['APP_ROOT'])\n    app.logger.debug('TMP_PATH:     %s' % app.config['TMP_PATH'])\n```\n\nThis uses the default log format, which is very verbose (and is tailored to provide robust information about requests - not really great for what I'm trying to do here). Instead of getting 7 lines that that are tabularized and easy to read, this generates 28 lines, that not easy to scan for this use-case. I spent awhile trying to use `app.logger` as a `logging.logger` object, until I finally figured out (yes, it's in the docs, but a little counter-intuitive) that it's not actually a `logging.logger` object - it's actually a logging.StreamHandler() object.\n\nThen I spent a bunch of time learning more about logging and structured logging and reading through Flask's source, trying to understand exactly what's going on here. I've got some basic experience with structured logging in python, but what's going on here was well above my head and not easy to adjust. I ended up finding the [Flask.debug_log_format()](http://flask.pocoo.org/docs/0.10/api/#flask.Flask.debug_log_format) API, and used that to set my debug message format to the standard log messaging format - but when dealing with requests - now I miss the old format - and there's logs of other information I'd like to start injecting into _those_ debugging messages as well, that I don't want in my standard messages.\n\nSo now - I've been attempting to figure out a pattern that will let me do something like:\n- Create a logging object that handles messages just for debugging messages related to my application setup & initialization - so I can dump things like:\n  - when a flask object is instantiated (im working on dispatching multiplication wsgi applications, as apart of the same flask application)\n  - things specific to flask objects that have been instantiated:\n    - the configuration values\n    - the blueprints\n    - the routes\n    - the models\n- Create a separate request logger that:\n  - uses a log format similar to flask's default log format (very robust, specific to debugging requests)\n  - injects additional information about requests into the logging formatter\n- I'm still trying to figure out how to make this less explicit in my application code, so that _automatically_ display debugging information about what flask is doing, rather than having to put debugging statements all throughout my application code\n\nI'm working through these things step by step, but they're definitely taking a long time - and unless I'm missing some documentation here or being very dense - these seem like a big challenge for user's new to to the Flask framwork. I've found some examples (by scouring google, github.com, and gist.github.com) that are helping me along, but nothing that _really_ explains or walks through this kind of stuff.\n\nSo - am I missing some documentation here? Am I doing something that I shouldn't? Any suggestions or references you can point me to?\n",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/315811333",
            "html_url": "https://github.com/pallets/flask/issues/1572#issuecomment-315811333",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1572",
            "id": 315811333,
            "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTgxMTMzMw==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2017-07-17T16:47:43Z",
            "updated_at": "2017-07-17T16:47:43Z",
            "author_association": "MEMBER",
            "body": "Thanks for writing up your experience. However, I'm not sure what the action item here is. All of Flask's setup is controlled by the user, including everything in the first two bullet lists; it seems redundant to tell the user that the code did what they just told it to do. On failures, you can use the interactive debugger to inspect each frame of the failure. Or you can attach your own debugger such as PyCharm and step through what's happening.\r\n\r\nWhen logging things about your code, you should use [standard logging](https://docs.python.org/3/library/logging.html). Get the logger for your module with `logger = logging.getLogger(__name__)`, then log with it. If you need other information, attach a formatter to add that information, such as pulling attributes from `request` if a request is active."
        }
    ]
}