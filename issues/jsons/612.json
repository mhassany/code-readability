{
    "url": "https://api.github.com/repos/pallets/flask/issues/612",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/612/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/612/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/612/events",
    "html_url": "https://github.com/pallets/flask/issues/612",
    "id": 7634915,
    "node_id": "MDU6SXNzdWU3NjM0OTE1",
    "number": 612,
    "title": "blueprint options from register_blueprint",
    "user": {
        "login": "mizhi",
        "id": 901983,
        "node_id": "MDQ6VXNlcjkwMTk4Mw==",
        "avatar_url": "https://avatars1.githubusercontent.com/u/901983?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mizhi",
        "html_url": "https://github.com/mizhi",
        "followers_url": "https://api.github.com/users/mizhi/followers",
        "following_url": "https://api.github.com/users/mizhi/following{/other_user}",
        "gists_url": "https://api.github.com/users/mizhi/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/mizhi/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mizhi/subscriptions",
        "organizations_url": "https://api.github.com/users/mizhi/orgs",
        "repos_url": "https://api.github.com/users/mizhi/repos",
        "events_url": "https://api.github.com/users/mizhi/events{/privacy}",
        "received_events_url": "https://api.github.com/users/mizhi/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 16,
    "created_at": "2012-10-16T18:40:46Z",
    "updated_at": "2013-03-27T10:02:42Z",
    "closed_at": "2013-03-26T15:13:06Z",
    "author_association": "NONE",
    "body": "I've written a flask app that uses a blueprint to implement an API. When I create the server, I use register_blueprint to make the api available. I added a url_prefix parameter as a parameter to the call to register_blueprint. Thus, in theory, I could add multiple versions of this api for different instances.\n\nAs part of the blueprint, there is a particular method that needs to send a redirect to the requesting browser. This redirect is to another part of the blueprint. The problem is that url_prefix does not seem to be available within the request or current_app objects. At least, not in anyway that I've been able to see. \n\nHere's some code that illustrates the problem:\n\n```\n# server.py\nblueprint = flask.Blueprint(\"mybp\", __name__)\n\n@blueprint.before_request\ndef before_request():\n    if not flask.request.url.endswith(\"/auth/login/\"):\n        return flask.redirect( \"/auth/login/\")\n```\n\nAnd here's the part where the app server is created:\n\n```\napp = flask.Flask(\"myapp\")\napp.register_blueprint(server.blueprint, url_prefix=\"/instance1\")\napp.register_blueprint(server.blueprint, url_prefix=\"/instance2\")\n```\n\nThe correct behaviors would be to go to \"/instance1/auth/login\" or \"/instance2/auth/login.\" The problem is that the redirect code doesn't have a way (that I can see) of getting the url_prefix that was used to register the blueprint. \n\nMy initial thought was to see if I could get a hold of the Blueprint object that was registered on the app and maybe it would have the url_prefix that I could prepend on the redirect line.  This would look something like:\n\n```\n@blueprint.before_request\ndef before_request():\n    if not flask.request.url.endswith(\"/auth/login/\"):\n        url_prefix = flask.current_app.blueprints[flask.request.blueprint].url_prefix\n        return flask.redirect(url_prefix + \"/auth/login/\")\n```\n\nThe problem is that the way blueprint is stored in Flask.register_blueprint (https://github.com/mitsuhiko/flask/blob/master/flask/app.py#L867):\n\n```\nself.blueprints[blueprint.name] = blueprint\n```\n\nmeans that each separate registration of blueprint shares the same blueprint object and url_prefix may not be valid between registrations. E.g. it's not enough to simply set url_prefix on the blueprint.\n\nMy solution to this was to create a factory method:\n\n```\ndef make_blueprint(name, url_prefix):\n    blueprint = flask.Blueprint(name, __name__, url_prefix=url_prefix)\n\n    #\n    # Blueprint @route definitions follow\n    #\n\n    return blueprint\n```\n\nand in the server creation code:\n\n```\napp = flask.Flask(\"myapp\")\napp.register_blueprint(server.make_blueprint(\"instance1\", \"/instance1\"))\napp.register_blueprint(server.make_blueprint(\"instance2\", \"/instance2\"))\n```\n\nThis works, and I have access to url_prefix in the instances. It wasn't critical for my project, but it was a surprising property of Flask.\n\nIt seems awkward, and a violation of the principle-of-least surprise. Why wouldn't the blueprint methods have access to the url_prefix (or any other options passed in during blueprint registration)? Are there any more elegant solutions than the one above?\n",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/9529211",
            "html_url": "https://github.com/pallets/flask/issues/612#issuecomment-9529211",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/612",
            "id": 9529211,
            "node_id": "MDEyOklzc3VlQ29tbWVudDk1MjkyMTE=",
            "user": {
                "login": "ghost",
                "id": 10137,
                "node_id": "MDQ6VXNlcjEwMTM3",
                "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/ghost",
                "html_url": "https://github.com/ghost",
                "followers_url": "https://api.github.com/users/ghost/followers",
                "following_url": "https://api.github.com/users/ghost/following{/other_user}",
                "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
                "organizations_url": "https://api.github.com/users/ghost/orgs",
                "repos_url": "https://api.github.com/users/ghost/repos",
                "events_url": "https://api.github.com/users/ghost/events{/privacy}",
                "received_events_url": "https://api.github.com/users/ghost/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2012-10-17T14:28:33Z",
            "updated_at": "2012-10-17T14:28:33Z",
            "author_association": "NONE",
            "body": "Why not to use `url_for`? A relative url (`.login`) should work...\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/9529846",
            "html_url": "https://github.com/pallets/flask/issues/612#issuecomment-9529846",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/612",
            "id": 9529846,
            "node_id": "MDEyOklzc3VlQ29tbWVudDk1Mjk4NDY=",
            "user": {
                "login": "mizhi",
                "id": 901983,
                "node_id": "MDQ6VXNlcjkwMTk4Mw==",
                "avatar_url": "https://avatars1.githubusercontent.com/u/901983?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/mizhi",
                "html_url": "https://github.com/mizhi",
                "followers_url": "https://api.github.com/users/mizhi/followers",
                "following_url": "https://api.github.com/users/mizhi/following{/other_user}",
                "gists_url": "https://api.github.com/users/mizhi/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/mizhi/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mizhi/subscriptions",
                "organizations_url": "https://api.github.com/users/mizhi/orgs",
                "repos_url": "https://api.github.com/users/mizhi/repos",
                "events_url": "https://api.github.com/users/mizhi/events{/privacy}",
                "received_events_url": "https://api.github.com/users/mizhi/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2012-10-17T14:44:19Z",
            "updated_at": "2012-10-17T14:44:19Z",
            "author_association": "NONE",
            "body": "Unfortunately, not. According to the docs, that should work because it returns the url relative to the blueprint. When I actually test it out, however, I get different behavior.\n\nConsider this code:\n\n```\n# server.py\nblueprint = flask.Blueprint(\"mybp\", __name__)\n\n@blueprint.before_request\ndef before_request():\n    print flask.url_for(\".login\")\n\n@blueprint.route(\"/auth/login/\", methods=[\"GET\"])\ndef login():\n    flask.current_app.logger.debug(\"Going to login screen.\")\n    return flask.make_response(\"Login screen\")\n```\n\nAnd\n\n```\napp = flask.Flask(\"myapp\")\napp.register_blueprint(server.blueprint, url_prefix=\"/instance1\")\napp.register_blueprint(server.blueprint, url_prefix=\"/instance2\")\n```\n\nWhen I hit `/instance1/something` then this code should print out `/instance1/auth/login`\nWhen I hit `/instance2/something` then this code should print out `/instance2/auth/login`\n\nInstead, for both endpoints, it prints out `/instance1/auth/login` for both endpoints. The behavior depends on the order in which the blueprint is registered, so for example:\n\n```\napp = flask.Flask(\"myapp\")\napp.register_blueprint(server.blueprint, url_prefix=\"/instance2\")\napp.register_blueprint(server.blueprint, url_prefix=\"/instance1\")\n```\n\nThe url printed out would be `/instance2/auth/login`\n\nThis seems to be unintended behavior for a blueprint that has been attached to multiple prefixes in an application.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/9531061",
            "html_url": "https://github.com/pallets/flask/issues/612#issuecomment-9531061",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/612",
            "id": 9531061,
            "node_id": "MDEyOklzc3VlQ29tbWVudDk1MzEwNjE=",
            "user": {
                "login": "ghost",
                "id": 10137,
                "node_id": "MDQ6VXNlcjEwMTM3",
                "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/ghost",
                "html_url": "https://github.com/ghost",
                "followers_url": "https://api.github.com/users/ghost/followers",
                "following_url": "https://api.github.com/users/ghost/following{/other_user}",
                "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
                "organizations_url": "https://api.github.com/users/ghost/orgs",
                "repos_url": "https://api.github.com/users/ghost/repos",
                "events_url": "https://api.github.com/users/ghost/events{/privacy}",
                "received_events_url": "https://api.github.com/users/ghost/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2012-10-17T15:16:28Z",
            "updated_at": "2012-10-17T15:16:28Z",
            "author_association": "NONE",
            "body": "Ok, just checked the source. I have no clue what to do.\nI don't like too much the fact we need that `__name__` at creation time.\nCan we do something like this:\n\n```\nblueprint = flask.Blueprint(\"mybp\")\n\n@blueprint.before_request\ndef before_request():\n    print flask.url_for(\".login\")\n\n@blueprint.route(\"/auth/login/\", methods=[\"GET\"])\ndef login():\n    flask.current_app.logger.debug(\"Going to login screen.\")\n    return flask.make_response(\"Login screen\")\n```\n\nand then add a custom name while registering like this:\n\n```\napp = flask.Flask(\"myapp\")\napp.register_blueprint(server.blueprint, url_prefix=\"/instance2\", name=\"instance2\")\napp.register_blueprint(server.blueprint, url_prefix=\"/instance1\", name=\"instance1\")\n```\n\nI think this is more elegant than other solutions and not so difficult to implement. We could simply defer the initialization of `_PackageBoundObject` at registration time, right?\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/9533974",
            "html_url": "https://github.com/pallets/flask/issues/612#issuecomment-9533974",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/612",
            "id": 9533974,
            "node_id": "MDEyOklzc3VlQ29tbWVudDk1MzM5NzQ=",
            "user": {
                "login": "mizhi",
                "id": 901983,
                "node_id": "MDQ6VXNlcjkwMTk4Mw==",
                "avatar_url": "https://avatars1.githubusercontent.com/u/901983?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/mizhi",
                "html_url": "https://github.com/mizhi",
                "followers_url": "https://api.github.com/users/mizhi/followers",
                "following_url": "https://api.github.com/users/mizhi/following{/other_user}",
                "gists_url": "https://api.github.com/users/mizhi/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/mizhi/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mizhi/subscriptions",
                "organizations_url": "https://api.github.com/users/mizhi/orgs",
                "repos_url": "https://api.github.com/users/mizhi/repos",
                "events_url": "https://api.github.com/users/mizhi/events{/privacy}",
                "received_events_url": "https://api.github.com/users/mizhi/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2012-10-17T16:31:43Z",
            "updated_at": "2012-10-17T16:31:43Z",
            "author_association": "NONE",
            "body": "Since Blueprint is a subclass of `_PackageBoundObject`, I'm not sure that would work well. The key problem is that the blueprints can't really be used to create multiple endpoints with distinct properties. Currently, you can create multiple endpoints, but they share too many commonalities. E.g. url_prefix. Thus there's no way do things like redirect within the same blueprint correctly. The factory function I wrote above gets around this, but essentially by creating a new blueprint for every url_prefix. Seems that somehow a distinction needs to be drawn between blueprint properties and blueprint registration properties.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/9535031",
            "html_url": "https://github.com/pallets/flask/issues/612#issuecomment-9535031",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/612",
            "id": 9535031,
            "node_id": "MDEyOklzc3VlQ29tbWVudDk1MzUwMzE=",
            "user": {
                "login": "ghost",
                "id": 10137,
                "node_id": "MDQ6VXNlcjEwMTM3",
                "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/ghost",
                "html_url": "https://github.com/ghost",
                "followers_url": "https://api.github.com/users/ghost/followers",
                "following_url": "https://api.github.com/users/ghost/following{/other_user}",
                "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
                "organizations_url": "https://api.github.com/users/ghost/orgs",
                "repos_url": "https://api.github.com/users/ghost/repos",
                "events_url": "https://api.github.com/users/ghost/events{/privacy}",
                "received_events_url": "https://api.github.com/users/ghost/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2012-10-17T17:00:14Z",
            "updated_at": "2012-10-17T17:00:14Z",
            "author_association": "NONE",
            "body": "Actually, I'm pretty sure it's possible. You can simply do:\n\n```\nclass Dummy(object):\n    def __init__(self):\n        print 'This will be printed only calling initialize_dummy.'\n\nclass MyClass(Dummy):\n    def __init__(self):\n        print 'Initializing MyClass'\n\n    def initialize_dummy(self):\n        Dummy.__init__(self)\n\nMyClass().initialize_dummy()\n```\n\nBut do blueprints need to access `_PackageBoundObject` attributes/methods _before_ the registration? This is my question.\n\nThe problem you're having is this: Flask uses that `__name__` as _unique_ identifier. You can't use the same name twice, because it's used by the routing system to determine the relative path. Being able to see `url_prefix` within a blueprint _could_ be a solution, but there will be problems using the `url_for` system externally: `url_for('server.login')` can resolve to `instance1.login` and `instance2.login`. This is the same problem you where having using `url_for('.login')`.\n\nMy idea banally makes you able to define the name at registration time, thus you can use the same blueprint object twice by changing that unique identifier. This would allow to use `url_for('instance1.login')` and `url_for('instance2.login')`. That's a bit more flasky, I think, to solve routing problems, but this is not the right way if you'd like to use custom configuration for each blueprint. Mixins come to mind...\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/9538311",
            "html_url": "https://github.com/pallets/flask/issues/612#issuecomment-9538311",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/612",
            "id": 9538311,
            "node_id": "MDEyOklzc3VlQ29tbWVudDk1MzgzMTE=",
            "user": {
                "login": "mizhi",
                "id": 901983,
                "node_id": "MDQ6VXNlcjkwMTk4Mw==",
                "avatar_url": "https://avatars1.githubusercontent.com/u/901983?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/mizhi",
                "html_url": "https://github.com/mizhi",
                "followers_url": "https://api.github.com/users/mizhi/followers",
                "following_url": "https://api.github.com/users/mizhi/following{/other_user}",
                "gists_url": "https://api.github.com/users/mizhi/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/mizhi/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mizhi/subscriptions",
                "organizations_url": "https://api.github.com/users/mizhi/orgs",
                "repos_url": "https://api.github.com/users/mizhi/repos",
                "events_url": "https://api.github.com/users/mizhi/events{/privacy}",
                "received_events_url": "https://api.github.com/users/mizhi/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2012-10-17T18:28:32Z",
            "updated_at": "2012-10-17T18:28:32Z",
            "author_association": "NONE",
            "body": "Oh, it would work mechanically - never said it wouldn't. It's a question of the semantics of leaving an object partially **init**'ed after instantiation. Somehow that seems... wrong. :)\n\nThe problem is that `__name__` isn't what's actually used to set the `app.blueprints` dictionary. The first parameter is what's used to identify the blueprint. The second, `__name__`, is used to construct the fully qualified endpoint names for the werkzeug `Rules`. Taking that out would likely break things.\n\nRegardless, after noodling on this a bit - and becoming very familiar with the internals of flask - I think the best, least abrasive option is to simply use the factory pattern above. I may take a whack at writing code that allows access to the options passed in during blueprint registration at a later time.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/9573006",
            "html_url": "https://github.com/pallets/flask/issues/612#issuecomment-9573006",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/612",
            "id": 9573006,
            "node_id": "MDEyOklzc3VlQ29tbWVudDk1NzMwMDY=",
            "user": {
                "login": "ghost",
                "id": 10137,
                "node_id": "MDQ6VXNlcjEwMTM3",
                "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/ghost",
                "html_url": "https://github.com/ghost",
                "followers_url": "https://api.github.com/users/ghost/followers",
                "following_url": "https://api.github.com/users/ghost/following{/other_user}",
                "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
                "organizations_url": "https://api.github.com/users/ghost/orgs",
                "repos_url": "https://api.github.com/users/ghost/repos",
                "events_url": "https://api.github.com/users/ghost/events{/privacy}",
                "received_events_url": "https://api.github.com/users/ghost/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2012-10-18T17:25:04Z",
            "updated_at": "2012-10-18T17:26:17Z",
            "author_association": "NONE",
            "body": "Ok, you're indeed right ;-) BTW, you don't have to use `__name__`, of course!\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/15437756",
            "html_url": "https://github.com/pallets/flask/issues/612#issuecomment-15437756",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/612",
            "id": 15437756,
            "node_id": "MDEyOklzc3VlQ29tbWVudDE1NDM3NzU2",
            "user": {
                "login": "cbsmith",
                "id": 418385,
                "node_id": "MDQ6VXNlcjQxODM4NQ==",
                "avatar_url": "https://avatars3.githubusercontent.com/u/418385?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/cbsmith",
                "html_url": "https://github.com/cbsmith",
                "followers_url": "https://api.github.com/users/cbsmith/followers",
                "following_url": "https://api.github.com/users/cbsmith/following{/other_user}",
                "gists_url": "https://api.github.com/users/cbsmith/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/cbsmith/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cbsmith/subscriptions",
                "organizations_url": "https://api.github.com/users/cbsmith/orgs",
                "repos_url": "https://api.github.com/users/cbsmith/repos",
                "events_url": "https://api.github.com/users/cbsmith/events{/privacy}",
                "received_events_url": "https://api.github.com/users/cbsmith/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2013-03-26T02:34:41Z",
            "updated_at": "2013-03-26T02:34:41Z",
            "author_association": "NONE",
            "body": "I'm not clear on how this was resolved. I am trying to have the same blueprint registered with multiple prefixes, and to have render various non-relative URL's I need to generate use the prefix_url to generically (i.e. I only need one function to handle all of the prefixes). At this point I'm left with extracting the prefix from the request object and/or not using blueprint prefixes and just registering my functions with the \"prefix\" being a parameter for the function. Both seem to violate the principles of what blueprints are ostensibly about.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/15463332",
            "html_url": "https://github.com/pallets/flask/issues/612#issuecomment-15463332",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/612",
            "id": 15463332,
            "node_id": "MDEyOklzc3VlQ29tbWVudDE1NDYzMzMy",
            "user": {
                "login": "ghost",
                "id": 10137,
                "node_id": "MDQ6VXNlcjEwMTM3",
                "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/ghost",
                "html_url": "https://github.com/ghost",
                "followers_url": "https://api.github.com/users/ghost/followers",
                "following_url": "https://api.github.com/users/ghost/following{/other_user}",
                "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
                "organizations_url": "https://api.github.com/users/ghost/orgs",
                "repos_url": "https://api.github.com/users/ghost/repos",
                "events_url": "https://api.github.com/users/ghost/events{/privacy}",
                "received_events_url": "https://api.github.com/users/ghost/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2013-03-26T15:01:34Z",
            "updated_at": "2013-03-26T15:01:34Z",
            "author_association": "NONE",
            "body": "Well, this is still unresolved.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/15464107",
            "html_url": "https://github.com/pallets/flask/issues/612#issuecomment-15464107",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/612",
            "id": 15464107,
            "node_id": "MDEyOklzc3VlQ29tbWVudDE1NDY0MTA3",
            "user": {
                "login": "mitsuhiko",
                "id": 7396,
                "node_id": "MDQ6VXNlcjczOTY=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/7396?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/mitsuhiko",
                "html_url": "https://github.com/mitsuhiko",
                "followers_url": "https://api.github.com/users/mitsuhiko/followers",
                "following_url": "https://api.github.com/users/mitsuhiko/following{/other_user}",
                "gists_url": "https://api.github.com/users/mitsuhiko/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/mitsuhiko/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mitsuhiko/subscriptions",
                "organizations_url": "https://api.github.com/users/mitsuhiko/orgs",
                "repos_url": "https://api.github.com/users/mitsuhiko/repos",
                "events_url": "https://api.github.com/users/mitsuhiko/events{/privacy}",
                "received_events_url": "https://api.github.com/users/mitsuhiko/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2013-03-26T15:13:06Z",
            "updated_at": "2013-03-26T15:13:06Z",
            "author_association": "MEMBER",
            "body": "You can already do this easily.  The basic version is this:\n\n``` python\nfrom flask import Flask, Blueprint, url_for\n\nbp = Blueprint('whatever', __name__)\n\n@bp.route('/')\ndef index(name):\n    return 'I am %s (%s)' % (name, url_for('.index', name=name))\n\napp = Flask(__name__)\napp.register_blueprint(bp, url_prefix='/foo1', url_defaults={'name': 'Foo1'})\napp.register_blueprint(bp, url_prefix='/foo2', url_defaults={'name': 'Foo2'})\n\nc = app.test_client()\nassert c.get('/foo1/').data == 'I am Foo1 (/foo1/)'\nassert c.get('/foo2/').data == 'I am Foo2 (/foo2/)'\n```\n\nThe more complicated version that gives a nicer API:\n\n``` python\nfrom flask import Flask, Blueprint, url_for, g\n\nbp = Blueprint('whatever', __name__)\n\n@bp.url_defaults\ndef bp_url_defaults(endpoint, values):\n    name = getattr(g, 'name', None)\n    if name is not None:\n        values.setdefault('name', name)\n\n@bp.url_value_preprocessor\ndef bp_url_value_preprocessor(endpoint, values):\n    g.name = values.pop('name')\n\n@bp.route('/')\ndef index():\n    return 'I am %s (%s)' % (g.name, url_for('.index'))\n\napp = Flask(__name__)\napp.register_blueprint(bp, url_prefix='/foo1', url_defaults={'name': 'Foo1'})\napp.register_blueprint(bp, url_prefix='/foo2', url_defaults={'name': 'Foo2'})\n\nc = app.test_client()\nassert c.get('/foo1/').data == 'I am Foo1 (/foo1/)'\nassert c.get('/foo2/').data == 'I am Foo2 (/foo2/)'\n```\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/15464180",
            "html_url": "https://github.com/pallets/flask/issues/612#issuecomment-15464180",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/612",
            "id": 15464180,
            "node_id": "MDEyOklzc3VlQ29tbWVudDE1NDY0MTgw",
            "user": {
                "login": "mitsuhiko",
                "id": 7396,
                "node_id": "MDQ6VXNlcjczOTY=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/7396?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/mitsuhiko",
                "html_url": "https://github.com/mitsuhiko",
                "followers_url": "https://api.github.com/users/mitsuhiko/followers",
                "following_url": "https://api.github.com/users/mitsuhiko/following{/other_user}",
                "gists_url": "https://api.github.com/users/mitsuhiko/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/mitsuhiko/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mitsuhiko/subscriptions",
                "organizations_url": "https://api.github.com/users/mitsuhiko/orgs",
                "repos_url": "https://api.github.com/users/mitsuhiko/repos",
                "events_url": "https://api.github.com/users/mitsuhiko/events{/privacy}",
                "received_events_url": "https://api.github.com/users/mitsuhiko/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2013-03-26T15:14:16Z",
            "updated_at": "2013-03-26T15:14:16Z",
            "author_association": "MEMBER",
            "body": "As a second step you can use the values passed in the view args then to find specific blueprint configuration etc.  If you need that information available outside the routing system you can create multiple blueprint objects with different names from a factory function.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/15464952",
            "html_url": "https://github.com/pallets/flask/issues/612#issuecomment-15464952",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/612",
            "id": 15464952,
            "node_id": "MDEyOklzc3VlQ29tbWVudDE1NDY0OTUy",
            "user": {
                "login": "ghost",
                "id": 10137,
                "node_id": "MDQ6VXNlcjEwMTM3",
                "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/ghost",
                "html_url": "https://github.com/ghost",
                "followers_url": "https://api.github.com/users/ghost/followers",
                "following_url": "https://api.github.com/users/ghost/following{/other_user}",
                "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
                "organizations_url": "https://api.github.com/users/ghost/orgs",
                "repos_url": "https://api.github.com/users/ghost/repos",
                "events_url": "https://api.github.com/users/ghost/events{/privacy}",
                "received_events_url": "https://api.github.com/users/ghost/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2013-03-26T15:25:18Z",
            "updated_at": "2013-03-26T15:25:18Z",
            "author_association": "NONE",
            "body": "One of the ugliest hacks I've ever seen. It _should_ be easier.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/15465657",
            "html_url": "https://github.com/pallets/flask/issues/612#issuecomment-15465657",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/612",
            "id": 15465657,
            "node_id": "MDEyOklzc3VlQ29tbWVudDE1NDY1NjU3",
            "user": {
                "login": "mitsuhiko",
                "id": 7396,
                "node_id": "MDQ6VXNlcjczOTY=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/7396?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/mitsuhiko",
                "html_url": "https://github.com/mitsuhiko",
                "followers_url": "https://api.github.com/users/mitsuhiko/followers",
                "following_url": "https://api.github.com/users/mitsuhiko/following{/other_user}",
                "gists_url": "https://api.github.com/users/mitsuhiko/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/mitsuhiko/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mitsuhiko/subscriptions",
                "organizations_url": "https://api.github.com/users/mitsuhiko/orgs",
                "repos_url": "https://api.github.com/users/mitsuhiko/repos",
                "events_url": "https://api.github.com/users/mitsuhiko/events{/privacy}",
                "received_events_url": "https://api.github.com/users/mitsuhiko/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2013-03-26T15:36:20Z",
            "updated_at": "2013-03-26T15:36:20Z",
            "author_association": "MEMBER",
            "body": "> One of the ugliest hacks I've ever seen. It should be easier.\n\nI am accepting a nice proposal on how a nicer solution is supposed to look like.  Also not sure how that's a hack, it was designed to work this way.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/15465749",
            "html_url": "https://github.com/pallets/flask/issues/612#issuecomment-15465749",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/612",
            "id": 15465749,
            "node_id": "MDEyOklzc3VlQ29tbWVudDE1NDY1NzQ5",
            "user": {
                "login": "mitsuhiko",
                "id": 7396,
                "node_id": "MDQ6VXNlcjczOTY=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/7396?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/mitsuhiko",
                "html_url": "https://github.com/mitsuhiko",
                "followers_url": "https://api.github.com/users/mitsuhiko/followers",
                "following_url": "https://api.github.com/users/mitsuhiko/following{/other_user}",
                "gists_url": "https://api.github.com/users/mitsuhiko/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/mitsuhiko/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mitsuhiko/subscriptions",
                "organizations_url": "https://api.github.com/users/mitsuhiko/orgs",
                "repos_url": "https://api.github.com/users/mitsuhiko/repos",
                "events_url": "https://api.github.com/users/mitsuhiko/events{/privacy}",
                "received_events_url": "https://api.github.com/users/mitsuhiko/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2013-03-26T15:37:49Z",
            "updated_at": "2013-03-26T15:37:49Z",
            "author_association": "MEMBER",
            "body": "(There already is a way to keep blueprints apart: their name.  You can just generate a blueprint in a factory and then refer to the blueprint through closures.  I don't quite see where the issue is to be honest)\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/15475413",
            "html_url": "https://github.com/pallets/flask/issues/612#issuecomment-15475413",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/612",
            "id": 15475413,
            "node_id": "MDEyOklzc3VlQ29tbWVudDE1NDc1NDEz",
            "user": {
                "login": "ghost",
                "id": 10137,
                "node_id": "MDQ6VXNlcjEwMTM3",
                "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/ghost",
                "html_url": "https://github.com/ghost",
                "followers_url": "https://api.github.com/users/ghost/followers",
                "following_url": "https://api.github.com/users/ghost/following{/other_user}",
                "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
                "organizations_url": "https://api.github.com/users/ghost/orgs",
                "repos_url": "https://api.github.com/users/ghost/repos",
                "events_url": "https://api.github.com/users/ghost/events{/privacy}",
                "received_events_url": "https://api.github.com/users/ghost/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2013-03-26T18:05:40Z",
            "updated_at": "2013-03-26T18:05:40Z",
            "author_association": "NONE",
            "body": "> In modern computing terminology, a kludge (or often a \"hack\") is a solution to a problem, doing a task, or fixing a system that is inefficient, inelegant, or even unfathomable, but which nevertheless (more or less) works. \n> (Wikipedia)\n\nURL pre-processors should work as URL pre-processors, not as a _strange way to create identifiers_. That's IMHO a hack.\n\nDo you want some proposals? Here you are.\n1. Stop considering blueprints as temporary objects, but as \"views\", like if they were registered using `app.add_url_rule('/mount_point/<path:route', blueprint.as_view())`. Also, this would make easier to support nested blueprints.\n2. There are two \"type identifiers\" for blueprints: `__name__` and a \"given name\". Are you sure we need both?\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/15500244",
            "html_url": "https://github.com/pallets/flask/issues/612#issuecomment-15500244",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/612",
            "id": 15500244,
            "node_id": "MDEyOklzc3VlQ29tbWVudDE1NTAwMjQ0",
            "user": {
                "login": "cbsmith",
                "id": 418385,
                "node_id": "MDQ6VXNlcjQxODM4NQ==",
                "avatar_url": "https://avatars3.githubusercontent.com/u/418385?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/cbsmith",
                "html_url": "https://github.com/cbsmith",
                "followers_url": "https://api.github.com/users/cbsmith/followers",
                "following_url": "https://api.github.com/users/cbsmith/following{/other_user}",
                "gists_url": "https://api.github.com/users/cbsmith/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/cbsmith/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cbsmith/subscriptions",
                "organizations_url": "https://api.github.com/users/cbsmith/orgs",
                "repos_url": "https://api.github.com/users/cbsmith/repos",
                "events_url": "https://api.github.com/users/cbsmith/events{/privacy}",
                "received_events_url": "https://api.github.com/users/cbsmith/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2013-03-27T01:59:51Z",
            "updated_at": "2013-03-27T10:02:42Z",
            "author_association": "NONE",
            "body": "I'd like to be able to bind the same blueprint to two different url_prefix's. There aren't a lot of good ways to do it.\nIf I create the blueprint without a url_prefix, then url_for() doesn't seem to work at all. I could create separate blueprint objects, but then I can't find a clean way to do declarative routing using blueprint.route decorators (the code only gets loaded once, so the second blueprint doesn't bind).\n\nThe only way I could figure out how to make it work write was to either a) treat the url_prefix as an argument in the route:\n\n```\n@blueprint.route('/<prefix>/foo')\ndef my_handler(prefix):\n    pass\n```\n\nor to have all the handlers be tied to one giant closure:\n\n```\ndef make_blueprint(name, prefix):\n    blueprint = Blueprint(name, __name__, url_prefix=prefix)\n    @blueprint.route('/foo'):\n    def my_handler(prefix):\n        pass\n    return blueprint\n```\n\nor to have a method which procedurally adds the routes:\n\n```\nHANDLER_MAP = {'/foo': my_handler}\ndef add_routes_for_blueprint(bp):\n    for rule, handler in handler_functions.iteritems():\n        bp.add_url_rule(rule, handler.__name__, handler)\n\nblueprint = Blueprint('foo1', __name__)\nadd_routes_for_blueprint(blueprint)\napp.register_blueprint(blueprint)\nblueprint2 = Blueprint('foo2', __name__)\nadd_routes_for_blueprint(blueprint2)\napp.register_blueprint(blueprint2)\n```\n\nIt seems like being able to bind a blueprint to multiple places ought to be the default capability for blueprints, but it feels like it's a special case that breaks odd things in odd places, and generally requires extra work. Either I'm doing it wrong or there is an opportunity to make this far more elegant.\n"
        }
    ]
}