{
    "url": "https://api.github.com/repos/pallets/flask/issues/3025",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/3025/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/3025/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/3025/events",
    "html_url": "https://github.com/pallets/flask/issues/3025",
    "id": 389596457,
    "node_id": "MDU6SXNzdWUzODk1OTY0NTc=",
    "number": 3025,
    "title": "paginate error:paginated page returned 404.",
    "user": {
        "login": "wedojava",
        "id": 9837993,
        "node_id": "MDQ6VXNlcjk4Mzc5OTM=",
        "avatar_url": "https://avatars1.githubusercontent.com/u/9837993?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/wedojava",
        "html_url": "https://github.com/wedojava",
        "followers_url": "https://api.github.com/users/wedojava/followers",
        "following_url": "https://api.github.com/users/wedojava/following{/other_user}",
        "gists_url": "https://api.github.com/users/wedojava/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/wedojava/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/wedojava/subscriptions",
        "organizations_url": "https://api.github.com/users/wedojava/orgs",
        "repos_url": "https://api.github.com/users/wedojava/repos",
        "events_url": "https://api.github.com/users/wedojava/events{/privacy}",
        "received_events_url": "https://api.github.com/users/wedojava/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2018-12-11T04:53:38Z",
    "updated_at": "2018-12-11T04:59:18Z",
    "closed_at": "2018-12-11T04:59:18Z",
    "author_association": "NONE",
    "body": "### error source code:\r\nhttps://github.com/wedojava/exloger\r\n\r\n---\r\n\r\n### Expected Behavior\r\n\r\nThere is a form with email and ip  at index for search and show response, the response should be paginated.\r\n\r\n```python\r\nfrom flask import render_template, flash, redirect, url_for, request, g, current_app, session\r\nfrom app.main import bp\r\nfrom app.main.forms import SearchForm\r\n\r\n@bp.before_app_request\r\ndef before_request():\r\n    if current_user.is_authenticated:\r\n        current_user.last_seen = datetime.utcnow()\r\n        db.session.commit()\r\n    \r\n    try:\r\n        session['email'] = session['email'] if session['email'] else 'example@example.com'\r\n    except KeyError as ke:\r\n        session['email'] = 'example@example.com'\r\n\r\n\r\n@bp.route('/', methods=['GET', 'POST'])\r\n@bp.route('/index', methods=['GET', 'POST'])\r\ndef index():\r\n    form = SearchForm()\r\n    page = request.args.get('page', 1, type=int)\r\n    if form.validate_on_submit():\r\n        words_email = [\"%\" + form.email.data + \"%\"]\r\n        rule_email = and_(*[LogImported.sender_address.like(w) for w in words_email])\r\n        # pay attention these two lines below:\r\n        l = LogImported.query.filter(rule_email)\r\n        pagination = l.paginate(page, per_page=50, error_out=True)\r\n        pageitems = pagination.items\r\n        session['email'] = form.email.data\r\n        return render_template('index.html', title=_('Home'), form=form, loglist = l, \\\r\n        pageitems = pageitems, pagination = pagination)\r\n    elif session['email'] is not 'example@example.com':\r\n        words_email = [\"%\" + form.email.data + \"%\"]\r\n        rule_email = and_(*[LogImported.sender_address.like(w) for w in words_email])\r\n        # pay attention these two lines below:\r\n        l = LogImported.query.filter(rule_email)\r\n        pagination = l.paginate(page, per_page=50, error_out=True)\r\n        pageitems = pagination.items\r\n        session['email'] = form.email.data\r\n        return render_template('index.html', title=_('Home'), form=form, loglist = l, \\\r\n        pageitems = pageitems, pagination = pagination)\r\n    else:\r\n        return render_template('index.html', title=_('Home'), form=form)\r\n```\r\n\r\n`main/forms.py`:\r\n```python\r\nclass SearchForm(FlaskForm):\r\n    email = StringField(_l('Email'))\r\n    ip = StringField('IP', validators=[Length(min=0, max=140)])\r\n    submit = SubmitField(_l('Submit'))\r\n```\r\n\r\n`main/__init__.py`:\r\n```python\r\nfrom flask import Blueprint\r\n\r\nbp = Blueprint('main', __name__)\r\n\r\nfrom app.main import routes\r\n```\r\n\r\n`/models.py`:\r\n```python\r\nclass LogImported(db.Model):\r\n    id = db.Column(db.Integer, index=True, primary_key=True)\r\n    date = db.Column(db.DateTime, default=datetime.utcnow)\r\n    sender_address = db.Column(db.String(255), index=True)\r\n    recipient_address = db.Column(db.String(255))\r\n    recipient_count = db.Column(db.Integer)\r\n    return_path = db.Column(db.String(255))\r\n    client_hostname = db.Column(db.String(255))\r\n    client_ip = db.Column(db.String(100))\r\n    server_hostname = db.Column(db.String(255))\r\n    server_ip = db.Column(db.String(100))\r\n    original_client_ip = db.Column(db.String(100))\r\n    original_server_ip = db.Column(db.String(100))\r\n    event_id = db.Column(db.String(50))\r\n    total_bytes = db.Column(db.Integer)\r\n    connector_id = db.Column(db.String(50))\r\n    message_subject = db.Column(db.String(255))\r\n    source = db.Column(db.String(50))\r\n```\r\n\r\n`templates/index.html`:\r\n```python\r\n{% extends \"base.html\" %}\r\n{% from 'bootstrap/form.html' import render_form %}\r\n{% from 'bootstrap/pagination.html' import render_pagination %}\r\n\r\n\r\n...\r\n\r\n{{ render_pagination(pagination) }}\r\n\r\n...\r\n\r\n```\r\n\r\n### Actual Behavior\r\n\r\nIn short, get result from index's form then paginated,but any paginated links cannot work right.\r\n\r\n\r\nI set email and ip to session as `session['email']` and `session['ip']`.\r\nThen,I click page 2,search these keywords by session to a object and paginate,but `paginate()` cannot work right, link like `http://127.0.0.1:5000/index?page=2`,response an error page:404.\r\n\r\n`elif` in routes.py:\r\n```\r\nl = LogImported.query.filter(rule)\r\npagination = l.paginate(page, per_page=50, error_out=True)\r\n```\r\nReturn type of `l = LogImported.query.filter(rule)` is right, but `l.paginate(page, per_page=50, error_out=True)` throw an error.\r\ncode blocked by if is work right, by in elif,same code response error.\r\n\r\nparameter `rule` is same at these two place. Why these bug raised?\r\n\r\n```pytb\r\n127.0.0.1 - - [11/Dec/2018 12:44:51] \"GET /index?page=2 HTTP/1.1\" 404 -\r\n```\r\n\r\n### Environment\r\n\r\n* Python version: 3.7.1\r\n* Flask version:1.0.2\r\n* Werkzeug version:0.14.1",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/446073000",
            "html_url": "https://github.com/pallets/flask/issues/3025#issuecomment-446073000",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/3025",
            "id": 446073000,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NjA3MzAwMA==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2018-12-11T04:59:18Z",
            "updated_at": "2018-12-11T04:59:18Z",
            "author_association": "MEMBER",
            "body": "Please use Stack Overflow for questions about your own code. This tracker is for issues related to the project itself. Be sure to include a [minimal, complete, and verifiable example](https://stackoverflow.com/help/mcve)."
        }
    ]
}