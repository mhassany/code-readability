{
    "url": "https://api.github.com/repos/pallets/flask/issues/2960",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/2960/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/2960/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/2960/events",
    "html_url": "https://github.com/pallets/flask/issues/2960",
    "id": 372809483,
    "node_id": "MDU6SXNzdWUzNzI4MDk0ODM=",
    "number": 2960,
    "title": "Deep copy of request in copy_current_request_context function?",
    "user": {
        "login": "okeuday",
        "id": 61850,
        "node_id": "MDQ6VXNlcjYxODUw",
        "avatar_url": "https://avatars2.githubusercontent.com/u/61850?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/okeuday",
        "html_url": "https://github.com/okeuday",
        "followers_url": "https://api.github.com/users/okeuday/followers",
        "following_url": "https://api.github.com/users/okeuday/following{/other_user}",
        "gists_url": "https://api.github.com/users/okeuday/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/okeuday/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/okeuday/subscriptions",
        "organizations_url": "https://api.github.com/users/okeuday/orgs",
        "repos_url": "https://api.github.com/users/okeuday/repos",
        "events_url": "https://api.github.com/users/okeuday/events{/privacy}",
        "received_events_url": "https://api.github.com/users/okeuday/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 5,
    "created_at": "2018-10-23T05:04:31Z",
    "updated_at": "2018-11-04T23:43:27Z",
    "closed_at": "2018-11-04T03:38:30Z",
    "author_association": "NONE",
    "body": "Desiring a deep copy of **session** `RequestContext` data is present as a separate [issue](https://github.com/pallets/flask/issues/2935) and [pull request](https://github.com/pallets/flask/pull/2936).  This issue is focused on desiring a deep copy of the **request** `RequestContext` data for use in a separate thread.  To pursue this, it is necessary to copy the `environ` data in a new function or the same `copy_current_request_context` function with a boolean argument to enable the deep copy.\r\n\r\n### Expected Behavior\r\n\r\nFor using a thread with a copy of a request, it is advantageous to have the functionality present in `copy_current_request_context`, though the request needs a deep copy instead of a shallow copy.  Based on the code comment of the `RequestContext` `copy` function, the intent of the function was a shallow copy, due to \"Because the actual request object is the same this cannot be used to move a request context to a different thread unless access to the request object is locked.\".\r\n\r\nFor having a copy of a request for a separate thread, I found it necessary to modify the `flask.copy_current_request_context` function to be:\r\n\r\n    def _copy_current_request_context(function):\r\n        top = _request_ctx_stack.top\r\n        if top is None:\r\n            raise RuntimeError('This decorator can only be used at local scopes '\r\n                               'when a request context is on the stack.  '\r\n                               'For instance within view functions.')\r\n        reqctx = top.copy()\r\n        # environ is used by headers too, so only a copy of environ is necessary\r\n        reqctx.request.environ = reqctx.request.environ.copy()\r\n        def wrapper(*args, **kwargs):\r\n            with reqctx:\r\n                return function(*args, **kwargs)\r\n        return update_wrapper(wrapper, function)\r\n\r\nIf the request `environ` is not copied, it is possible with flask 1.0.2 to have older requests in a separate thread read the environ data from newer requests with methods like `request.method`, which is not desirable at all.  I am not suggesting modifying `flask.copy_current_request_context` to be like the source code above (1 line change), but rather suggesting the `RequestContext` `copy` function could be modified to create a deep copy of a request by providing an `environ.copy()` to the `RequestContext` class to create a new request object.  The deep copy could occur based on a boolean keyword argument added to `flask.copy_current_request_context`.\r\n\r\nHowever, if you want that functionality for threads, you also need to be able to copy the current_app context:\r\n\r\n    def _copy_current_app_context(function):\r\n        app_context = _app_ctx_stack.top\r\n        def current_app_context_decorator(*args, **kwargs):\r\n            with app_context:\r\n                return function(*args, **kwargs)\r\n        return current_app_context_decorator\r\n\r\nThen you would want to use them together with a single decorator:\r\n\r\n    def bind_context(function):\r\n        function = _copy_current_request_context(function)\r\n        function = _copy_current_app_context(function)\r\n        return function\r\n\r\n### Actual Behavior\r\n\r\n`flask.copy_current_request_context` will only do a shallow copy and the `copy_current_app_context` decorator is not provided, nor is the `bind_context` decorator.  That makes development with threads require more custom source code and be more error-prone than it needs to be.\r\n\r\n### Environment\r\n\r\n* Python version: 2.7.9\r\n* Flask version: 1.0.2\r\n* Werkzeug version: 0.14.1\r\n",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/432095446",
            "html_url": "https://github.com/pallets/flask/issues/2960#issuecomment-432095446",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2960",
            "id": 432095446,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQzMjA5NTQ0Ng==",
            "user": {
                "login": "dchevell",
                "id": 4359608,
                "node_id": "MDQ6VXNlcjQzNTk2MDg=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/4359608?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/dchevell",
                "html_url": "https://github.com/dchevell",
                "followers_url": "https://api.github.com/users/dchevell/followers",
                "following_url": "https://api.github.com/users/dchevell/following{/other_user}",
                "gists_url": "https://api.github.com/users/dchevell/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/dchevell/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dchevell/subscriptions",
                "organizations_url": "https://api.github.com/users/dchevell/orgs",
                "repos_url": "https://api.github.com/users/dchevell/repos",
                "events_url": "https://api.github.com/users/dchevell/events{/privacy}",
                "received_events_url": "https://api.github.com/users/dchevell/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2018-10-23T05:16:26Z",
            "updated_at": "2018-10-23T05:16:26Z",
            "author_association": "CONTRIBUTOR",
            "body": "Just for clarity @okeuday, a deepcopy of the session is *not* the purpose of #2936 (as mentioned in my last comment there). This issue here should encapsulate deepcopying of the request and session.\r\n\r\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/432095912",
            "html_url": "https://github.com/pallets/flask/issues/2960#issuecomment-432095912",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2960",
            "id": 432095912,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQzMjA5NTkxMg==",
            "user": {
                "login": "okeuday",
                "id": 61850,
                "node_id": "MDQ6VXNlcjYxODUw",
                "avatar_url": "https://avatars2.githubusercontent.com/u/61850?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/okeuday",
                "html_url": "https://github.com/okeuday",
                "followers_url": "https://api.github.com/users/okeuday/followers",
                "following_url": "https://api.github.com/users/okeuday/following{/other_user}",
                "gists_url": "https://api.github.com/users/okeuday/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/okeuday/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/okeuday/subscriptions",
                "organizations_url": "https://api.github.com/users/okeuday/orgs",
                "repos_url": "https://api.github.com/users/okeuday/repos",
                "events_url": "https://api.github.com/users/okeuday/events{/privacy}",
                "received_events_url": "https://api.github.com/users/okeuday/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2018-10-23T05:18:54Z",
            "updated_at": "2018-10-23T05:18:54Z",
            "author_association": "NONE",
            "body": "@dchevell Ok, thanks for the clarification!"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/435639437",
            "html_url": "https://github.com/pallets/flask/issues/2960#issuecomment-435639437",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2960",
            "id": 435639437,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTYzOTQzNw==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2018-11-04T03:38:30Z",
            "updated_at": "2018-11-04T03:41:30Z",
            "author_association": "MEMBER",
            "body": "As the docs say, if you want to use the copy between multiple threads, you need to synchronize that.\r\n\r\nAs to copying the app context, the context knows what app created it, and pushing the copied request context in a new thread will also push an app context.\r\n\r\nThe environ, along with incoming headers, probably should be considered read only, so I'm not sure why it's a problem that it's the same object. With #2936 the session is still the same object as well, the issue was that writes to it before the copy weren't reflected.\r\n\r\nI think this is getting uncommon enough that if a project needs it, they can implement it. The `Flask` object can be subclassed to override `request_context` and `app_context`, which could return subclassed context classes that do what you want."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/435719183",
            "html_url": "https://github.com/pallets/flask/issues/2960#issuecomment-435719183",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2960",
            "id": 435719183,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTcxOTE4Mw==",
            "user": {
                "login": "okeuday",
                "id": 61850,
                "node_id": "MDQ6VXNlcjYxODUw",
                "avatar_url": "https://avatars2.githubusercontent.com/u/61850?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/okeuday",
                "html_url": "https://github.com/okeuday",
                "followers_url": "https://api.github.com/users/okeuday/followers",
                "following_url": "https://api.github.com/users/okeuday/following{/other_user}",
                "gists_url": "https://api.github.com/users/okeuday/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/okeuday/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/okeuday/subscriptions",
                "organizations_url": "https://api.github.com/users/okeuday/orgs",
                "repos_url": "https://api.github.com/users/okeuday/repos",
                "events_url": "https://api.github.com/users/okeuday/events{/privacy}",
                "received_events_url": "https://api.github.com/users/okeuday/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2018-11-04T23:33:57Z",
            "updated_at": "2018-11-04T23:33:57Z",
            "author_association": "NONE",
            "body": "It is unfortunate that the flask source code considers threaded use uncommon and not worthy of development or testing because that avoids providing a single solution for threaded use that is capable of being well-tested."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/435719919",
            "html_url": "https://github.com/pallets/flask/issues/2960#issuecomment-435719919",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2960",
            "id": 435719919,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTcxOTkxOQ==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2018-11-04T23:43:27Z",
            "updated_at": "2018-11-04T23:43:27Z",
            "author_association": "MEMBER",
            "body": "I don't consider threads uncommon, what I consider uncommon is what's being asked for in this issue, when extension points to support if if needed already exist, as explained in my previous comment."
        }
    ]
}