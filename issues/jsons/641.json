{
    "url": "https://api.github.com/repos/pallets/flask/issues/641",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/641/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/641/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/641/events",
    "html_url": "https://github.com/pallets/flask/issues/641",
    "id": 8795104,
    "node_id": "MDU6SXNzdWU4Nzk1MTA0",
    "number": 641,
    "title": "Design issue with flask.logger.create_logger().",
    "user": {
        "login": "itsjohncs",
        "id": 367832,
        "node_id": "MDQ6VXNlcjM2NzgzMg==",
        "avatar_url": "https://avatars2.githubusercontent.com/u/367832?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/itsjohncs",
        "html_url": "https://github.com/itsjohncs",
        "followers_url": "https://api.github.com/users/itsjohncs/followers",
        "following_url": "https://api.github.com/users/itsjohncs/following{/other_user}",
        "gists_url": "https://api.github.com/users/itsjohncs/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/itsjohncs/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/itsjohncs/subscriptions",
        "organizations_url": "https://api.github.com/users/itsjohncs/orgs",
        "repos_url": "https://api.github.com/users/itsjohncs/repos",
        "events_url": "https://api.github.com/users/itsjohncs/events{/privacy}",
        "received_events_url": "https://api.github.com/users/itsjohncs/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 648340773,
            "node_id": "MDU6TGFiZWw2NDgzNDA3NzM=",
            "url": "https://api.github.com/repos/pallets/flask/labels/logging",
            "name": "logging",
            "color": "1d76db",
            "default": false,
            "description": null
        }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": {
        "url": "https://api.github.com/repos/pallets/flask/milestones/2",
        "html_url": "https://github.com/pallets/flask/milestone/2",
        "labels_url": "https://api.github.com/repos/pallets/flask/milestones/2/labels",
        "id": 795954,
        "node_id": "MDk6TWlsZXN0b25lNzk1OTU0",
        "number": 2,
        "title": "1.0",
        "description": "",
        "creator": {
            "login": "untitaker",
            "id": 837573,
            "node_id": "MDQ6VXNlcjgzNzU3Mw==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/untitaker",
            "html_url": "https://github.com/untitaker",
            "followers_url": "https://api.github.com/users/untitaker/followers",
            "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
            "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
            "organizations_url": "https://api.github.com/users/untitaker/orgs",
            "repos_url": "https://api.github.com/users/untitaker/repos",
            "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
            "received_events_url": "https://api.github.com/users/untitaker/received_events",
            "type": "User",
            "site_admin": false
        },
        "open_issues": 0,
        "closed_issues": 159,
        "state": "closed",
        "created_at": "2014-09-19T15:47:20Z",
        "updated_at": "2018-04-26T21:07:44Z",
        "due_on": "2018-04-26T07:00:00Z",
        "closed_at": "2018-04-26T21:07:44Z"
    },
    "comments": 21,
    "created_at": "2012-11-29T03:10:40Z",
    "updated_at": "2017-07-28T22:27:45Z",
    "closed_at": "2017-07-28T22:27:45Z",
    "author_association": "NONE",
    "body": "[`flask.logger.create_logger()`](https://github.com/mitsuhiko/flask/blob/master/flask/logging.py#L17) destroys any log handlers that have been added previously. Because the creation of the logger (and the calling of `create_logger()` that this entails) is [deferred until the first time `flask.app.logger` is accessed](https://github.com/mitsuhiko/flask/blob/master/flask/app.py#L548), this can lead to the destruction of log handlers that were purposefully added by the application.\n\nI just tracked down a bug due to this that took me a very long time to debug because I had no idea this went on. To my eyes, it looked like the standard logging module was breaking at a seemingly random moment (it wasn't even my code that was accessing `app.logger`, it was [Flask's internal error handling code](https://github.com/mitsuhiko/flask/blob/master/flask/app.py#L1347)). Therefore, I think one of two courses of action should be taken:\n- Because this behavior of `create_logger()` seems very strange, perhaps it should be removed. As in don't delete log handlers that are already in place when `create_logger()` gets called.\n- If there is a good reason for this behavior to remain, it should be documented clearly in `app.logger`'s docstring.\n\nI am happy to carry out either (or some other) change and send a pull request.\n",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/11122960",
            "html_url": "https://github.com/pallets/flask/issues/641#issuecomment-11122960",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/641",
            "id": 11122960,
            "node_id": "MDEyOklzc3VlQ29tbWVudDExMTIyOTYw",
            "user": {
                "login": "itsjohncs",
                "id": 367832,
                "node_id": "MDQ6VXNlcjM2NzgzMg==",
                "avatar_url": "https://avatars2.githubusercontent.com/u/367832?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/itsjohncs",
                "html_url": "https://github.com/itsjohncs",
                "followers_url": "https://api.github.com/users/itsjohncs/followers",
                "following_url": "https://api.github.com/users/itsjohncs/following{/other_user}",
                "gists_url": "https://api.github.com/users/itsjohncs/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/itsjohncs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/itsjohncs/subscriptions",
                "organizations_url": "https://api.github.com/users/itsjohncs/orgs",
                "repos_url": "https://api.github.com/users/itsjohncs/repos",
                "events_url": "https://api.github.com/users/itsjohncs/events{/privacy}",
                "received_events_url": "https://api.github.com/users/itsjohncs/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2012-12-07T08:54:45Z",
            "updated_at": "2012-12-07T08:54:45Z",
            "author_association": "NONE",
            "body": "Do any of the devs have thoughts on this issue? I'm happy to carry out any required changed.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/11159497",
            "html_url": "https://github.com/pallets/flask/issues/641#issuecomment-11159497",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/641",
            "id": 11159497,
            "node_id": "MDEyOklzc3VlQ29tbWVudDExMTU5NDk3",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2012-12-08T15:05:17Z",
            "updated_at": "2012-12-08T15:05:17Z",
            "author_association": "MEMBER",
            "body": "Can you give me an example code that does not do what you want? From what i see, adding log handlers already counts as accessing the logger.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/11161868",
            "html_url": "https://github.com/pallets/flask/issues/641#issuecomment-11161868",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/641",
            "id": 11161868,
            "node_id": "MDEyOklzc3VlQ29tbWVudDExMTYxODY4",
            "user": {
                "login": "itsjohncs",
                "id": 367832,
                "node_id": "MDQ6VXNlcjM2NzgzMg==",
                "avatar_url": "https://avatars2.githubusercontent.com/u/367832?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/itsjohncs",
                "html_url": "https://github.com/itsjohncs",
                "followers_url": "https://api.github.com/users/itsjohncs/followers",
                "following_url": "https://api.github.com/users/itsjohncs/following{/other_user}",
                "gists_url": "https://api.github.com/users/itsjohncs/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/itsjohncs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/itsjohncs/subscriptions",
                "organizations_url": "https://api.github.com/users/itsjohncs/orgs",
                "repos_url": "https://api.github.com/users/itsjohncs/repos",
                "events_url": "https://api.github.com/users/itsjohncs/events{/privacy}",
                "received_events_url": "https://api.github.com/users/itsjohncs/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2012-12-08T18:35:07Z",
            "updated_at": "2012-12-08T18:35:07Z",
            "author_association": "NONE",
            "body": "I ran into this problem because I allow the sysadmins to configure the logging handlers to suit their needs by having them set up logging in their configuration file. For example, the example configuration file I provide [in my docs](https://github.com/brownhead/galah/wiki/Configuration-Options) is this:\n\n``` python\nconfig = {}\n\nconfig[\"web/DEBUG\"] = False\nconfig[\"web/SECRET_KEY\"] = \"asldfhlaskdjf\"\nconfig[\"web/HOST_URL\"] = \"http://localhost:5000\"\nconfig[\"web/USE_X_SENDFILE\"] = True\n\nimport logging\nimport logging.handlers\n\n# Explanation of this at http://serverfault.com/a/408491\nclass BOMLessFormatter(logging.Formatter):\n    def format(self, record):\n        return logging.Formatter.format(self, record).encode(\"utf-8\")\n\nlogger = logging.getLogger(\"galah\")\nlogger.setLevel(logging.DEBUG)\nlog_handler = logging.handlers.SysLogHandler(address = \"/dev/log\")\n\n# Modify this formatter if you want to change the layout of log messages.\nformatter = BOMLessFormatter(\"%(name)s[%(process)d]: %(message)s\")\nlog_handler.setFormatter(formatter)\n\nlogger.addHandler(log_handler)\n```\n\nI don't really want to have to make them import `app` from my application as that just introduces more unpleasant circular dependencies, not to mention only one part of my project uses Flask.\n\nThere is a much more insidious case when this behavior becomes very annoying though... You may notice by glancing through my project's code that I always use `logging` directly, and never use `app.logger`. I did this originally because I couldn't figure out why my config file's logging handlers were being ignored, but now I do it because it adds consistency to my code (I only use Flask in one portion of the project). Now then, even though I never use `app.logger`, because [Flask's internal error handling code](https://github.com/mitsuhiko/flask/blob/master/flask/app.py#L1347) accesses the logger object, my log handlers were randomly getting blown away in the middle of my application (the first time a non-HTTP exception occurred). I can code up an example Flask application the demonstrates this case, but I think it's fairly easy to see how it would happen.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/11162447",
            "html_url": "https://github.com/pallets/flask/issues/641#issuecomment-11162447",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/641",
            "id": 11162447,
            "node_id": "MDEyOklzc3VlQ29tbWVudDExMTYyNDQ3",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2012-12-08T19:26:43Z",
            "updated_at": "2012-12-08T19:28:45Z",
            "author_association": "MEMBER",
            "body": "Couldn't you somehow get the standard handlers from the logging module and explicitly apply them to the flask logger (in your app's code)?\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/11163583",
            "html_url": "https://github.com/pallets/flask/issues/641#issuecomment-11163583",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/641",
            "id": 11163583,
            "node_id": "MDEyOklzc3VlQ29tbWVudDExMTYzNTgz",
            "user": {
                "login": "itsjohncs",
                "id": 367832,
                "node_id": "MDQ6VXNlcjM2NzgzMg==",
                "avatar_url": "https://avatars2.githubusercontent.com/u/367832?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/itsjohncs",
                "html_url": "https://github.com/itsjohncs",
                "followers_url": "https://api.github.com/users/itsjohncs/followers",
                "following_url": "https://api.github.com/users/itsjohncs/following{/other_user}",
                "gists_url": "https://api.github.com/users/itsjohncs/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/itsjohncs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/itsjohncs/subscriptions",
                "organizations_url": "https://api.github.com/users/itsjohncs/orgs",
                "repos_url": "https://api.github.com/users/itsjohncs/repos",
                "events_url": "https://api.github.com/users/itsjohncs/events{/privacy}",
                "received_events_url": "https://api.github.com/users/itsjohncs/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2012-12-08T21:04:15Z",
            "updated_at": "2012-12-08T21:04:15Z",
            "author_association": "NONE",
            "body": "I'm not sure I understand what you mean. Could you provide an example?\n\nI don't see why the current functionality exists though (blowing away any log handlers). I already came up with a workaround for it (I just perform a \"no-op\" access to `app.logger` before I load the configuration), but that doesn't change the fact that it seems like very strange functionality. But even if the functionality should stay, it really needs to be documented. I spent a very long time debugging this problem, I should have just been able to glance at the documentation and see that this was the cause.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/11163649",
            "html_url": "https://github.com/pallets/flask/issues/641#issuecomment-11163649",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/641",
            "id": 11163649,
            "node_id": "MDEyOklzc3VlQ29tbWVudDExMTYzNjQ5",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2012-12-08T21:10:34Z",
            "updated_at": "2012-12-08T21:10:34Z",
            "author_association": "MEMBER",
            "body": "Actually my suggestion was a vague idea, when looking at the docs of the `logging` module, i can't find a way to get any handlers.\n\nI agree that this behavior should be documented.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/11163760",
            "html_url": "https://github.com/pallets/flask/issues/641#issuecomment-11163760",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/641",
            "id": 11163760,
            "node_id": "MDEyOklzc3VlQ29tbWVudDExMTYzNzYw",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2012-12-08T21:20:00Z",
            "updated_at": "2012-12-08T21:20:00Z",
            "author_association": "MEMBER",
            "body": "> I don't see why the current functionality exists though\n\nI think this is just lazy evaluation.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/11164322",
            "html_url": "https://github.com/pallets/flask/issues/641#issuecomment-11164322",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/641",
            "id": 11164322,
            "node_id": "MDEyOklzc3VlQ29tbWVudDExMTY0MzIy",
            "user": {
                "login": "itsjohncs",
                "id": 367832,
                "node_id": "MDQ6VXNlcjM2NzgzMg==",
                "avatar_url": "https://avatars2.githubusercontent.com/u/367832?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/itsjohncs",
                "html_url": "https://github.com/itsjohncs",
                "followers_url": "https://api.github.com/users/itsjohncs/followers",
                "following_url": "https://api.github.com/users/itsjohncs/following{/other_user}",
                "gists_url": "https://api.github.com/users/itsjohncs/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/itsjohncs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/itsjohncs/subscriptions",
                "organizations_url": "https://api.github.com/users/itsjohncs/orgs",
                "repos_url": "https://api.github.com/users/itsjohncs/repos",
                "events_url": "https://api.github.com/users/itsjohncs/events{/privacy}",
                "received_events_url": "https://api.github.com/users/itsjohncs/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2012-12-08T22:03:49Z",
            "updated_at": "2012-12-08T22:03:49Z",
            "author_association": "NONE",
            "body": "> I agree that this behavior should be documented.\n\nAt the very least it should be documented, but I really think the functionality should be removed (see below).\n\n> I think this is just lazy evaluation\n\nYes, this lazy evaluation. `create_logger()` is not called until the first time `app.logger` is accessed. The lazy evaluation component is not what I'm talking about however.\n\nWhen `create_logger()` is called, **all of the log handlers that have been registered are removed**. This is the functionality I am speaking of, and the functionality I do not understand the purpose of.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/12745763",
            "html_url": "https://github.com/pallets/flask/issues/641#issuecomment-12745763",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/641",
            "id": 12745763,
            "node_id": "MDEyOklzc3VlQ29tbWVudDEyNzQ1NzYz",
            "user": {
                "login": "mitsuhiko",
                "id": 7396,
                "node_id": "MDQ6VXNlcjczOTY=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/7396?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/mitsuhiko",
                "html_url": "https://github.com/mitsuhiko",
                "followers_url": "https://api.github.com/users/mitsuhiko/followers",
                "following_url": "https://api.github.com/users/mitsuhiko/following{/other_user}",
                "gists_url": "https://api.github.com/users/mitsuhiko/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/mitsuhiko/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mitsuhiko/subscriptions",
                "organizations_url": "https://api.github.com/users/mitsuhiko/orgs",
                "repos_url": "https://api.github.com/users/mitsuhiko/repos",
                "events_url": "https://api.github.com/users/mitsuhiko/events{/privacy}",
                "received_events_url": "https://api.github.com/users/mitsuhiko/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2013-01-27T01:15:58Z",
            "updated_at": "2013-01-27T01:15:58Z",
            "author_association": "MEMBER",
            "body": "I ran into so many issues if the old handlers were not cleared out.  The problem is that the standard libary's logging module is not very clever and no matter how you try to use it it will break someone else's usecase.  Especially all the unittests are creating apps over and over again and if flask would not clear out the loggers these would have more and more loggers as the tests are running.\n\nNot sure what the correct solution to this problem is.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/12850254",
            "html_url": "https://github.com/pallets/flask/issues/641#issuecomment-12850254",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/641",
            "id": 12850254,
            "node_id": "MDEyOklzc3VlQ29tbWVudDEyODUwMjU0",
            "user": {
                "login": "itsjohncs",
                "id": 367832,
                "node_id": "MDQ6VXNlcjM2NzgzMg==",
                "avatar_url": "https://avatars2.githubusercontent.com/u/367832?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/itsjohncs",
                "html_url": "https://github.com/itsjohncs",
                "followers_url": "https://api.github.com/users/itsjohncs/followers",
                "following_url": "https://api.github.com/users/itsjohncs/following{/other_user}",
                "gists_url": "https://api.github.com/users/itsjohncs/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/itsjohncs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/itsjohncs/subscriptions",
                "organizations_url": "https://api.github.com/users/itsjohncs/orgs",
                "repos_url": "https://api.github.com/users/itsjohncs/repos",
                "events_url": "https://api.github.com/users/itsjohncs/events{/privacy}",
                "received_events_url": "https://api.github.com/users/itsjohncs/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2013-01-29T18:40:46Z",
            "updated_at": "2013-01-29T18:40:46Z",
            "author_association": "NONE",
            "body": "I can't imagine too many scenarios when a user would want Flask to do this clearing of the log handlers for them. The scenario that your pointing out, the unit tests, makes me think that the unit tests themselves should be responsible for removing the log handlers they create (or a simpler solution would be to just clear the log handlers within the unit tests' setup code). It seems like whenever a user would want this, they would be capable of doing it themselves simply.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/24005130",
            "html_url": "https://github.com/pallets/flask/issues/641#issuecomment-24005130",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/641",
            "id": 24005130,
            "node_id": "MDEyOklzc3VlQ29tbWVudDI0MDA1MTMw",
            "user": {
                "login": "reustle",
                "id": 304560,
                "node_id": "MDQ6VXNlcjMwNDU2MA==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/304560?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/reustle",
                "html_url": "https://github.com/reustle",
                "followers_url": "https://api.github.com/users/reustle/followers",
                "following_url": "https://api.github.com/users/reustle/following{/other_user}",
                "gists_url": "https://api.github.com/users/reustle/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/reustle/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/reustle/subscriptions",
                "organizations_url": "https://api.github.com/users/reustle/orgs",
                "repos_url": "https://api.github.com/users/reustle/repos",
                "events_url": "https://api.github.com/users/reustle/events{/privacy}",
                "received_events_url": "https://api.github.com/users/reustle/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2013-09-07T16:56:17Z",
            "updated_at": "2013-09-07T16:56:17Z",
            "author_association": "NONE",
            "body": "I believe I may have run into a related issue today. I have it described with code examples here: http://stackoverflow.com/questions/18672847/python-logger-activated-after-twilio\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/39586369",
            "html_url": "https://github.com/pallets/flask/issues/641#issuecomment-39586369",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/641",
            "id": 39586369,
            "node_id": "MDEyOklzc3VlQ29tbWVudDM5NTg2MzY5",
            "user": {
                "login": "mrj0",
                "id": 469704,
                "node_id": "MDQ6VXNlcjQ2OTcwNA==",
                "avatar_url": "https://avatars2.githubusercontent.com/u/469704?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/mrj0",
                "html_url": "https://github.com/mrj0",
                "followers_url": "https://api.github.com/users/mrj0/followers",
                "following_url": "https://api.github.com/users/mrj0/following{/other_user}",
                "gists_url": "https://api.github.com/users/mrj0/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/mrj0/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mrj0/subscriptions",
                "organizations_url": "https://api.github.com/users/mrj0/orgs",
                "repos_url": "https://api.github.com/users/mrj0/repos",
                "events_url": "https://api.github.com/users/mrj0/events{/privacy}",
                "received_events_url": "https://api.github.com/users/mrj0/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-04-04T16:51:06Z",
            "updated_at": "2014-04-04T16:51:06Z",
            "author_association": "NONE",
            "body": "I burned some time on this recently. For us the fix is to simply set LOGGER_NAME = 'flask' in our config and done. I would suggest that this should be the default instead of the import_name. Then you don't run the risk of interfering with the user's logging in their own package.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/41834236",
            "html_url": "https://github.com/pallets/flask/issues/641#issuecomment-41834236",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/641",
            "id": 41834236,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQxODM0MjM2",
            "user": {
                "login": "jonblack",
                "id": 175080,
                "node_id": "MDQ6VXNlcjE3NTA4MA==",
                "avatar_url": "https://avatars1.githubusercontent.com/u/175080?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/jonblack",
                "html_url": "https://github.com/jonblack",
                "followers_url": "https://api.github.com/users/jonblack/followers",
                "following_url": "https://api.github.com/users/jonblack/following{/other_user}",
                "gists_url": "https://api.github.com/users/jonblack/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/jonblack/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jonblack/subscriptions",
                "organizations_url": "https://api.github.com/users/jonblack/orgs",
                "repos_url": "https://api.github.com/users/jonblack/repos",
                "events_url": "https://api.github.com/users/jonblack/events{/privacy}",
                "received_events_url": "https://api.github.com/users/jonblack/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-04-30T18:48:51Z",
            "updated_at": "2014-04-30T18:49:45Z",
            "author_association": "NONE",
            "body": "Using the `LOGGER_NAME` setting helped me to create the correct \"top-level\" logger, but the default level for subsequent child loggers is being mysteriously set to `WARNING` instead of `NOTSET` (which means, use the parent's level). Here's an example output:\n\n```\nmyapp -> DEBUG\nmyapp.factory -> WARNING\nmyapp.measurements -> WARNING\nmyapp.measurements.views -> WARNING\n```\n\nI worked around this by in the very beginning of my application, creating the same logger that Flask is going to create for me anyway and setting the level to debug:\n\n```\nimport logging\n\n_log = logging.getLogger(__name__)\n_log.setLevel(logging.DEBUG)\n...\n# Other imports here\n...\napp = create_app() # app.logger is accessed in here for the first time\n```\n\nBy taking ownership of logger creation, Flask is making a lot of assumptions (e.g. users want a StreamHandler; DEBUG is the default level) and adding a lot of surprises (handlers get deleted; the logger is created when `app.logger` is first accessed).\n- Why does `app.logger` exist? Is there a reason to use `app.logger` over `logging.getLogger()`?\n- What is Flask trying to achieve by creating the logger?\n- Is it an option that Flask doesn't setup any logging at all?\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/41836464",
            "html_url": "https://github.com/pallets/flask/issues/641#issuecomment-41836464",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/641",
            "id": 41836464,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQxODM2NDY0",
            "user": {
                "login": "itsjohncs",
                "id": 367832,
                "node_id": "MDQ6VXNlcjM2NzgzMg==",
                "avatar_url": "https://avatars2.githubusercontent.com/u/367832?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/itsjohncs",
                "html_url": "https://github.com/itsjohncs",
                "followers_url": "https://api.github.com/users/itsjohncs/followers",
                "following_url": "https://api.github.com/users/itsjohncs/following{/other_user}",
                "gists_url": "https://api.github.com/users/itsjohncs/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/itsjohncs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/itsjohncs/subscriptions",
                "organizations_url": "https://api.github.com/users/itsjohncs/orgs",
                "repos_url": "https://api.github.com/users/itsjohncs/repos",
                "events_url": "https://api.github.com/users/itsjohncs/events{/privacy}",
                "received_events_url": "https://api.github.com/users/itsjohncs/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-04-30T19:06:01Z",
            "updated_at": "2014-04-30T19:06:01Z",
            "author_association": "NONE",
            "body": "I would avoid Flask's logger if it's not configured to suite your needs already, as I don't think its issues will be resolved. To disable it stick this somewhere in your applications startup logic:\n\n``` python\napp.logger_name = \"nowhere\"\napp.logger\n```\n\nThe second line is necessary due to some processing that only happens when `app.logger` is first accessed.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/48034064",
            "html_url": "https://github.com/pallets/flask/issues/641#issuecomment-48034064",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/641",
            "id": 48034064,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MDM0MDY0",
            "user": {
                "login": "btoconnor",
                "id": 81829,
                "node_id": "MDQ6VXNlcjgxODI5",
                "avatar_url": "https://avatars1.githubusercontent.com/u/81829?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/btoconnor",
                "html_url": "https://github.com/btoconnor",
                "followers_url": "https://api.github.com/users/btoconnor/followers",
                "following_url": "https://api.github.com/users/btoconnor/following{/other_user}",
                "gists_url": "https://api.github.com/users/btoconnor/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/btoconnor/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/btoconnor/subscriptions",
                "organizations_url": "https://api.github.com/users/btoconnor/orgs",
                "repos_url": "https://api.github.com/users/btoconnor/repos",
                "events_url": "https://api.github.com/users/btoconnor/events{/privacy}",
                "received_events_url": "https://api.github.com/users/btoconnor/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-07-04T11:41:40Z",
            "updated_at": "2014-07-04T11:41:40Z",
            "author_association": "NONE",
            "body": "Just coming here to voice my concern over this as well.  I spent a lot of time trying to figure out why `app.logger` wasn't formatting and handling my log lines the way I configured them, only to find out flask was removing them.\n\nMy solution has been, like others have stated, to set the `LOGGER_NAME` to something unused in the config, and then manually use `logging.getLogger()` in my files.  If `app.logger` will continue to have this behavior, it should really be documented - but ideally just removed.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/59651856",
            "html_url": "https://github.com/pallets/flask/issues/641#issuecomment-59651856",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/641",
            "id": 59651856,
            "node_id": "MDEyOklzc3VlQ29tbWVudDU5NjUxODU2",
            "user": {
                "login": "dtheodor",
                "id": 1549648,
                "node_id": "MDQ6VXNlcjE1NDk2NDg=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1549648?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/dtheodor",
                "html_url": "https://github.com/dtheodor",
                "followers_url": "https://api.github.com/users/dtheodor/followers",
                "following_url": "https://api.github.com/users/dtheodor/following{/other_user}",
                "gists_url": "https://api.github.com/users/dtheodor/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/dtheodor/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dtheodor/subscriptions",
                "organizations_url": "https://api.github.com/users/dtheodor/orgs",
                "repos_url": "https://api.github.com/users/dtheodor/repos",
                "events_url": "https://api.github.com/users/dtheodor/events{/privacy}",
                "received_events_url": "https://api.github.com/users/dtheodor/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-10-19T14:42:58Z",
            "updated_at": "2014-10-22T10:20:06Z",
            "author_association": "NONE",
            "body": "This is a serious issue if you want the `Flask.logger` to be usable in an application that plays by the rules of the python logging module. At the moment I also resort to completely ignoring the `Flask.logger`, not to mention having this ugly line in my code `app.logger` just because I have to invoke the \"lazy initialization\" stuff.\n\nPlaying by the logging module's rules, you have 1 place at script startup where you initialize all your loggers, including custom loggers and library loggers, (commonly by using `logging.config.dictConfig` and `fileConfig`). And script startup does not necessarily mean Flask app creation. Here is library logging done right: http://docs.sqlalchemy.org/en/rel_0_9/core/engines.html#configuring-logging.\n\nI can think of a couple ways to allow Flask to play with centralized log configuration\n1. In the spirit of SQL alchemy's solution, do not add **any** of this custom code https://github.com/mitsuhiko/flask/blob/master/flask/logging.py#L50 unless a flag such as `app.create_new_logger` is set to True. If False, create_logger should simply do a `return logging.getLogger(app.logger_name)` and expect the user to have configured it properly.\n2. Since logging.addHandler() will not add an already existing handler, you can instantiate your handlers **once** (at module level) and then add them to your logger without having to call the disrupting `del logger.handlers[:]`. The handlers have a dependency on `app` so the `flask.current_app` magic should suffice.\n\nThoughts?\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/62792946",
            "html_url": "https://github.com/pallets/flask/issues/641#issuecomment-62792946",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/641",
            "id": 62792946,
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyNzkyOTQ2",
            "user": {
                "login": "ghost",
                "id": 10137,
                "node_id": "MDQ6VXNlcjEwMTM3",
                "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/ghost",
                "html_url": "https://github.com/ghost",
                "followers_url": "https://api.github.com/users/ghost/followers",
                "following_url": "https://api.github.com/users/ghost/following{/other_user}",
                "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
                "organizations_url": "https://api.github.com/users/ghost/orgs",
                "repos_url": "https://api.github.com/users/ghost/repos",
                "events_url": "https://api.github.com/users/ghost/events{/privacy}",
                "received_events_url": "https://api.github.com/users/ghost/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-11-12T21:03:27Z",
            "updated_at": "2014-11-12T21:03:27Z",
            "author_association": "NONE",
            "body": "@dtheodor I completely agree with you. I wasted a good morning figuring out why logging doesn't work in production mode. If effectively comes down to the lazy loading of the logger coupled with the removal of any handlers (via create_logger).\n\nI worked around this by explicitly calling `app.logger`.\n\nThere are 2 options IMO:\n1) Instead of deleting the handlers outright, re-add them after the class change\n2) Create a wrapper so that the developer can disable the call to `create_logger` and define their own.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/73839577",
            "html_url": "https://github.com/pallets/flask/issues/641#issuecomment-73839577",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/641",
            "id": 73839577,
            "node_id": "MDEyOklzc3VlQ29tbWVudDczODM5NTc3",
            "user": {
                "login": "crazygit",
                "id": 1240997,
                "node_id": "MDQ6VXNlcjEyNDA5OTc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1240997?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/crazygit",
                "html_url": "https://github.com/crazygit",
                "followers_url": "https://api.github.com/users/crazygit/followers",
                "following_url": "https://api.github.com/users/crazygit/following{/other_user}",
                "gists_url": "https://api.github.com/users/crazygit/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/crazygit/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/crazygit/subscriptions",
                "organizations_url": "https://api.github.com/users/crazygit/orgs",
                "repos_url": "https://api.github.com/users/crazygit/repos",
                "events_url": "https://api.github.com/users/crazygit/events{/privacy}",
                "received_events_url": "https://api.github.com/users/crazygit/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-02-11T06:35:22Z",
            "updated_at": "2015-02-11T06:36:14Z",
            "author_association": "NONE",
            "body": "@bhafichuk-redfall  I completely agree with you. I wasted a good morning figuring out why config app logger from configure file not work.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/221229224",
            "html_url": "https://github.com/pallets/flask/issues/641#issuecomment-221229224",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/641",
            "id": 221229224,
            "node_id": "MDEyOklzc3VlQ29tbWVudDIyMTIyOTIyNA==",
            "user": {
                "login": "kerma",
                "id": 735108,
                "node_id": "MDQ6VXNlcjczNTEwOA==",
                "avatar_url": "https://avatars2.githubusercontent.com/u/735108?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/kerma",
                "html_url": "https://github.com/kerma",
                "followers_url": "https://api.github.com/users/kerma/followers",
                "following_url": "https://api.github.com/users/kerma/following{/other_user}",
                "gists_url": "https://api.github.com/users/kerma/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/kerma/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/kerma/subscriptions",
                "organizations_url": "https://api.github.com/users/kerma/orgs",
                "repos_url": "https://api.github.com/users/kerma/repos",
                "events_url": "https://api.github.com/users/kerma/events{/privacy}",
                "received_events_url": "https://api.github.com/users/kerma/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2016-05-24T10:29:25Z",
            "updated_at": "2016-05-24T10:29:25Z",
            "author_association": "NONE",
            "body": "So what's wrong with the #1311 that it has been hanging here for a year and more? Another soul here who spent hours to figure this out. Now I have to go with dropping `app.logging` usage and adding the ugly hack :(\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/267632329",
            "html_url": "https://github.com/pallets/flask/issues/641#issuecomment-267632329",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/641",
            "id": 267632329,
            "node_id": "MDEyOklzc3VlQ29tbWVudDI2NzYzMjMyOQ==",
            "user": {
                "login": "tinproject",
                "id": 3742174,
                "node_id": "MDQ6VXNlcjM3NDIxNzQ=",
                "avatar_url": "https://avatars2.githubusercontent.com/u/3742174?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/tinproject",
                "html_url": "https://github.com/tinproject",
                "followers_url": "https://api.github.com/users/tinproject/followers",
                "following_url": "https://api.github.com/users/tinproject/following{/other_user}",
                "gists_url": "https://api.github.com/users/tinproject/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/tinproject/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tinproject/subscriptions",
                "organizations_url": "https://api.github.com/users/tinproject/orgs",
                "repos_url": "https://api.github.com/users/tinproject/repos",
                "events_url": "https://api.github.com/users/tinproject/events{/privacy}",
                "received_events_url": "https://api.github.com/users/tinproject/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2016-12-16T16:23:40Z",
            "updated_at": "2016-12-16T16:23:40Z",
            "author_association": "NONE",
            "body": "For the record, @jonblack:\r\n\r\n> Using the `LOGGER_NAME` setting helped me to create the correct \"top-level\" logger, but the default level for subsequent child loggers is being mysteriously set to `WARNING` instead of `NOTSET` (which means, use the parent's level). Here's an example output:\r\n> ```\r\n> myapp -> DEBUG\r\n> myapp.factory -> WARNING\r\n> myapp.measurements -> WARNING\r\n> myapp.measurements.views -> WARNING\r\n> ```\r\n\r\nthis happen because flask don't set explicitely the level for it's logger, instead _'subclass'_ the logger to return a effective level of `DEBUG` in the case of the level of the logger is `NOSET` (https://github.com/pallets/flask/blob/master/flask/logging.py#L61). \r\nThis allows debug messages to be logged whichever the effective level is inherited from it's parent.  \r\nBut all the children are normal loggers (logging.Logger) so inherits their parent level, and as the Flask logger has really a `NOSET` level, surely, their inherit the default `WARNING` level from the root logger.\r\n\r\n\r\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/318776368",
            "html_url": "https://github.com/pallets/flask/issues/641#issuecomment-318776368",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/641",
            "id": 318776368,
            "node_id": "MDEyOklzc3VlQ29tbWVudDMxODc3NjM2OA==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2017-07-28T22:27:45Z",
            "updated_at": "2017-07-28T22:27:45Z",
            "author_association": "MEMBER",
            "body": "I've created #2436 that hopefully simplifies Flask's logging configuration. It also splits out and updates the documentation to help clarify how everything works. If anyone here wants to take a look and make sure it addresses the points brought up here, I'd appreciate it.\r\n\r\nClosing this to move discussion either to the PR or #2023."
        }
    ]
}