{
    "url": "https://api.github.com/repos/pallets/flask/issues/424",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/424/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/424/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/424/events",
    "html_url": "https://github.com/pallets/flask/issues/424",
    "id": 3572988,
    "node_id": "MDU6SXNzdWUzNTcyOTg4",
    "number": 424,
    "title": "Allow entire blueprints to have lazy-loaded views despite using route decorators",
    "user": {
        "login": "jamesonquinn",
        "id": 372468,
        "node_id": "MDQ6VXNlcjM3MjQ2OA==",
        "avatar_url": "https://avatars3.githubusercontent.com/u/372468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesonquinn",
        "html_url": "https://github.com/jamesonquinn",
        "followers_url": "https://api.github.com/users/jamesonquinn/followers",
        "following_url": "https://api.github.com/users/jamesonquinn/following{/other_user}",
        "gists_url": "https://api.github.com/users/jamesonquinn/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jamesonquinn/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jamesonquinn/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesonquinn/orgs",
        "repos_url": "https://api.github.com/users/jamesonquinn/repos",
        "events_url": "https://api.github.com/users/jamesonquinn/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jamesonquinn/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 357932495,
            "node_id": "MDU6TGFiZWwzNTc5MzI0OTU=",
            "url": "https://api.github.com/repos/pallets/flask/labels/blueprints",
            "name": "blueprints",
            "color": "1d76db",
            "default": false,
            "description": null
        }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2012-03-08T22:00:26Z",
    "updated_at": "2017-05-28T04:20:35Z",
    "closed_at": "2017-05-28T04:20:35Z",
    "author_association": "NONE",
    "body": "For me, a single blueprint naturally goes in a module folder, and all the views go in a views.py there. If that's how you do it, it makes sense to lazy-load one blueprint at a time. But in order to do that, you have to change your whole routing system, using add_url_rule() instead of @bp.route(). I've got a fix for this, but it takes some modification of flask itself (so that there's a way to later .remove() the temporary lazy-loader rule added by add_url_rule; and so that you can app.full_redispatch_request after the lazy-loading is done).\n\nIs this some horrid sin from the evil world of Django, or would my patches be welcome, or what?\n\nHere's my lazyblueprint.py for reference:\n\n```\nfrom flask import Blueprint\n\nclass LazyBlueprint(Blueprint):\n    def __init__(self, name, import_name, static_folder=None,\n                 static_url_path=None, template_folder=None,\n                 url_prefix=None, subdomain=None, url_defaults=None):\n        super(LazyBlueprint, self).__init__(name, import_name, static_folder,\n                 static_url_path, template_folder,\n                 url_prefix, subdomain, url_defaults)\n        self.views = '.'.join([import_name,'views'])\n        print import_name, self.views\n        self.lazyrules = []\n        self.states = []\n        self.record(self.setuplazyload)\n\n    def setuplazyload(self, state):\n        self.lazyrules.append(state.add_url_rule('/<path:endpoint>', 'index', self.lazyloadfor(state)))\n        self.lazyrules.append(state.add_url_rule('/', 'index', self.lazyloadfor(state),\n                                                  defaults={'endpoint':''}))\n        self.states.append(state)\n\n    def lazyloadfor(self, state):\n        def innerlazyload(endpoint, **kw):\n            for rule in self.lazyrules:\n                rule.remove()\n            self.base_functions, self.deferred_functions = self.deferred_functions, []\n            __import__(self.views)\n\n            state.app.debug, debug = False, state.app.debug #don't trigger setupfunction warnings\n            for fixstate in self.states:\n                for deferred in self.deferred_functions:\n                    deferred(fixstate)\n            state.app.debug = debug\n            self.deferred_functions = self.base_functions + self.deferred_functions\n            return self.redispatch(state, endpoint, **kw)\n        return innerlazyload\n\n    def redispatch(self, state, endpoint, **kw):\n        return state.app.full_redispatch_request()\n```\n\nHere's how you'd use it: first skyblue/**init**.py:\n\n```\nfrom lazyblueprint import LazyBlueprint\n\nskyblue = LazyBlueprint('simple_page', __name__,\n                        template_folder='templates')\n```\n\nthen skyblue/views.py:\n\n```\nfrom skyblue import skyblue\n\n@skyblue.route('/')\ndef index():\n    return \"<html><body>sky:1...blue:2...<a href=\"hello\">Say hi!</a></body></html>\"\n\n@skyblue.route('/hello')\ndef hello():\n    return \"Hello skyblue!\"\n```\n",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/304491838",
            "html_url": "https://github.com/pallets/flask/issues/424#issuecomment-304491838",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/424",
            "id": 304491838,
            "node_id": "MDEyOklzc3VlQ29tbWVudDMwNDQ5MTgzOA==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2017-05-28T04:20:35Z",
            "updated_at": "2017-05-28T04:20:35Z",
            "author_association": "MEMBER",
            "body": "You're welcome to do this sort of autodetection in your own app, but it's not a pattern that belongs in Flask."
        }
    ]
}