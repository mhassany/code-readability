{
    "url": "https://api.github.com/repos/pallets/flask/issues/1700",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/1700/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/1700/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/1700/events",
    "html_url": "https://github.com/pallets/flask/issues/1700",
    "id": 128402999,
    "node_id": "MDU6SXNzdWUxMjg0MDI5OTk=",
    "number": 1700,
    "title": "TypeError: object.__new__(Markup) is not safe, use unicode.__new__() in specific cases",
    "user": {
        "login": "voidus",
        "id": 124298,
        "node_id": "MDQ6VXNlcjEyNDI5OA==",
        "avatar_url": "https://avatars1.githubusercontent.com/u/124298?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/voidus",
        "html_url": "https://github.com/voidus",
        "followers_url": "https://api.github.com/users/voidus/followers",
        "following_url": "https://api.github.com/users/voidus/following{/other_user}",
        "gists_url": "https://api.github.com/users/voidus/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/voidus/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/voidus/subscriptions",
        "organizations_url": "https://api.github.com/users/voidus/orgs",
        "repos_url": "https://api.github.com/users/voidus/repos",
        "events_url": "https://api.github.com/users/voidus/events{/privacy}",
        "received_events_url": "https://api.github.com/users/voidus/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2016-01-24T15:06:29Z",
    "updated_at": "2016-01-25T15:04:16Z",
    "closed_at": "2016-01-25T15:04:16Z",
    "author_association": "NONE",
    "body": "Hi,\n\nI am currently struggling with a pretty weird bug. It only appears in specific situations. \n\nThe whole code to reproduce it can be found in https://github.com/voidus/markupsafe_sniffer_issue or attached as \n[markupsafe_sniffer_issue.zip](https://github.com/mitsuhiko/markupsafe/files/102377/markupsafe_sniffer_issue.zip)\n\nThere has been an issue somewhat like that before but I can't find any encoding related problems.\nhttps://github.com/mitsuhiko/markupsafe/issues/19\n\nWhen I run a test via [sniffer](https://github.com/jeffh/sniffer), I get the following error every time except the first run. (Re-run can be triggered by touching e.g the application.py file)\n`TypeError: object.__new__(Markup) is not safe, use unicode.__new__()`\n\nI tried to debug that using pdb, but I cannot find any differences between runs. I also tried to minimize the problem by using jinja directly (see the second test), but that doesn't trigger the bug. As removing flask removes the bug, I'm posting this here. I have actually no Idea where the real problem is.\n\nI'll also open an issue over at markupsafe linking here, so that the compined powers may find out what's wrong :)\n\nFull Stack trace:\n\n```\n======================================================================\nFAIL: test_application.test_application\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/<redacted>/env/lib/python2.7/site-packages/nose/case.py\", line 197, in runTest\n    self.test(*self.arg)\n  File \"/<redacted>/tests/test_application.py\", line 8, in test_application\n    assert response.status_code == 200\nAssertionError: \n-------------------- >> begin captured logging << --------------------\napplication: ERROR: Exception on / [GET]\nTraceback (most recent call last):\n  File \"/<redacted>/env/lib/python2.7/site-packages/flask/app.py\", line 1817, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"/<redacted>/env/lib/python2.7/site-packages/flask/app.py\", line 1477, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"/<redacted>/env/lib/python2.7/site-packages/flask/app.py\", line 1381, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"/<redacted>/env/lib/python2.7/site-packages/flask/app.py\", line 1475, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"/<redacted>/env/lib/python2.7/site-packages/flask/app.py\", line 1461, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"/<redacted>/application.py\", line 7, in index\n    return render_template('t.html', c=\"baz\")\n  File \"/<redacted>/env/lib/python2.7/site-packages/flask/templating.py\", line 128, in render_template\n    context, ctx.app)\n  File \"/<redacted>/env/lib/python2.7/site-packages/flask/templating.py\", line 110, in _render\n    rv = template.render(context)\n  File \"/<redacted>/env/lib/python2.7/site-packages/jinja2/environment.py\", line 989, in render\n    return self.environment.handle_exception(exc_info, True)\n  File \"/<redacted>/env/lib/python2.7/site-packages/jinja2/environment.py\", line 754, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"/<redacted>/templates/t.html\", line 1, in top-level template code\n    <script src=\"{{c}}\"></script>\n  File \"/<redacted>/env/src/markupsafe/markupsafe/__init__.py\", line 75, in __new__\n    return text_type.__new__(cls, base)\nTypeError: object.__new__(Markup) is not safe, use unicode.__new__()\n--------------------- >> end captured logging << ---------------------\n```\n",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/174350400",
            "html_url": "https://github.com/pallets/flask/issues/1700#issuecomment-174350400",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1700",
            "id": 174350400,
            "node_id": "MDEyOklzc3VlQ29tbWVudDE3NDM1MDQwMA==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2016-01-24T23:00:12Z",
            "updated_at": "2016-01-24T23:05:15Z",
            "author_association": "MEMBER",
            "body": "Adding a print before `return text_type.__new__` in `markupsafe/__init__.py` shows that `text_type` is `unicode` for the first run, but is `None` when rendering variable nodes on subsequent runs.  The \"is not safe\" error is actually [part of Python](http://stackoverflow.com/a/4028415/400617), but doesn't seem directly related, since the code isn't doing anything deliberately that is relevant to that error.\n\nThis appears to be a recurring issue with sniffer, see jeffh/sniffer#23 among others.  The common pattern is that something that shouldn't be `None` gets set to it on reload.  Sniffer is being clever to avoid starting a new Python process for each test run by [clearing `sys.modules`](https://github.com/jeffh/sniffer/blob/f51d6215164e923cbb64e4f5c4f2acd352ce32ea/sniffer/runner.py#L82-L83) and running nose from the same process.  This may be causing an issue somewhere.  This does not seem like a good idea for testing, where you want to guarantee that each run is using the same starting point.\n\nUsing a Watchdog reloader, such as [pytest-watch](https://github.com/joeyespo/pytest-watch/) or [nosey](https://github.com/joeyespo/nosey/), which uses an efficient watcher but starts a new process for each run, does not have this issue.  Using Python 3 does not have this issue.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/174534976",
            "html_url": "https://github.com/pallets/flask/issues/1700#issuecomment-174534976",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1700",
            "id": 174534976,
            "node_id": "MDEyOklzc3VlQ29tbWVudDE3NDUzNDk3Ng==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2016-01-25T15:04:16Z",
            "updated_at": "2016-01-25T15:04:16Z",
            "author_association": "MEMBER",
            "body": "I'm closing this as an issue with sniffer.\n"
        }
    ]
}