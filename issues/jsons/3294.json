{
    "url": "https://api.github.com/repos/pallets/flask/issues/3294",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/3294/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/3294/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/3294/events",
    "html_url": "https://github.com/pallets/flask/issues/3294",
    "id": 466155822,
    "node_id": "MDU6SXNzdWU0NjYxNTU4MjI=",
    "number": 3294,
    "title": "Custom response class (force_type static method) doesn't work",
    "user": {
        "login": "seungwon-kang",
        "id": 26502092,
        "node_id": "MDQ6VXNlcjI2NTAyMDky",
        "avatar_url": "https://avatars1.githubusercontent.com/u/26502092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/seungwon-kang",
        "html_url": "https://github.com/seungwon-kang",
        "followers_url": "https://api.github.com/users/seungwon-kang/followers",
        "following_url": "https://api.github.com/users/seungwon-kang/following{/other_user}",
        "gists_url": "https://api.github.com/users/seungwon-kang/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/seungwon-kang/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/seungwon-kang/subscriptions",
        "organizations_url": "https://api.github.com/users/seungwon-kang/orgs",
        "repos_url": "https://api.github.com/users/seungwon-kang/repos",
        "events_url": "https://api.github.com/users/seungwon-kang/events{/privacy}",
        "received_events_url": "https://api.github.com/users/seungwon-kang/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2019-07-10T07:51:53Z",
    "updated_at": "2019-07-25T18:32:11Z",
    "closed_at": "2019-07-10T10:47:47Z",
    "author_association": "NONE",
    "body": "I made a test code for this issue. I made a custom class because I want server to return jsonified list if view function returns list. It works on flask 1.0.2 but it doesn't work on the new flask version (1.1.1)\r\n\r\n```python\r\nfrom flask import Flask, Response, jsonify\r\n\r\n\r\nclass CustomResponse(Response):\r\n    @classmethod\r\n    def force_type(cls, response, environ=None):\r\n        if isinstance(response, list):\r\n            return jsonify(response)\r\n        return super(CustomResponse, cls).force_type(response, environ)\r\n\r\n\r\napp = Flask(__name__)\r\napp.response_class = CustomResponse\r\n\r\n\r\n@app.route('/', methods=['GET'])\r\ndef response_list():\r\n    return ['it', 'is', 'test']\r\n\r\n\r\nif __name__ == '__main__':\r\n    app.run(host='127.0.0.1')\r\n\r\n```\r\n\r\nOn 1.0.2 version, \r\n\r\n```python\r\n# evaluate a WSGI callable, or coerce a different response\r\n                # class to the correct type\r\n                try:\r\n                    rv = self.response_class.force_type(rv, request.environ)\r\n                except TypeError as e:\r\n                    new_error = TypeError(\r\n                        '{e}\\nThe view function did not return a valid'\r\n                        ' response. The return type must be a string, tuple,'\r\n                        ' Response instance, or WSGI callable, but it was a'\r\n                        ' {rv.__class__.__name__}.'.format(e=e, rv=rv)\r\n                    )\r\n```\r\n\r\nflask changes type forcely by calling force_type of `response_class`, but newest version doesn't change. (code below)\r\n\r\n```python\r\n            if isinstance(rv, (text_type, bytes, bytearray)):\r\n                # let the response class set the status and headers instead of\r\n                # waiting to do it manually, so that the class can handle any\r\n                # special logic\r\n                rv = self.response_class(rv, status=status, headers=headers)\r\n                status = headers = None\r\n            elif isinstance(rv, dict):\r\n                rv = jsonify(rv)\r\n            elif isinstance(rv, BaseResponse) or callable(rv):\r\n                # evaluate a WSGI callable, or coerce a different response\r\n                # class to the correct type\r\n                try:\r\n                    rv = self.response_class.force_type(rv, request.environ)\r\n                except TypeError as e:\r\n                    new_error = TypeError(\r\n                        \"{e}\\nThe view function did not return a valid\"\r\n                        \" response. The return type must be a string, dict, tuple,\"\r\n                        \" Response instance, or WSGI callable, but it was a\"\r\n                        \" {rv.__class__.__name__}.\".format(e=e, rv=rv)\r\n                    )\r\n                    reraise(TypeError, new_error, sys.exc_info()[2])\r\n            else:\r\n                raise TypeError(\r\n                    \"The view function did not return a valid\"\r\n                    \" response. The return type must be a string, dict, tuple,\"\r\n                    \" Response instance, or WSGI callable, but it was a\"\r\n                    \" {rv.__class__.__name__}.\".format(rv=rv)\r\n                )\r\n```\r\n\r\nIs it intended or just a bug?\r\n\r\n### Expected\r\n\r\nWhen I call `127.0.0.1:5000`, \r\n\r\n```\r\n['it', 'is', 'test']\r\n```\r\n\r\n### Actual\r\n```\r\n[2019-07-10 16:36:33,554] ERROR in app: Exception on / [GET]\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\Mapia\\Desktop\\develop\\study\\flask.py\\venv\\lib\\site-packages\\flask\\app.py\", line 2446, in wsgi_app\r\n    response = self.full_dispatch_request()\r\n  File \"C:\\Users\\Mapia\\Desktop\\develop\\study\\flask.py\\venv\\lib\\site-packages\\flask\\app.py\", line 1952, in full_dispatch_request\r\n    return self.finalize_request(rv)\r\n  File \"C:\\Users\\Mapia\\Desktop\\develop\\study\\flask.py\\venv\\lib\\site-packages\\flask\\app.py\", line 1967, in finalize_request\r\n    response = self.make_response(rv)\r\n  File \"C:\\Users\\Mapia\\Desktop\\develop\\study\\flask.py\\venv\\lib\\site-packages\\flask\\app.py\", line 2130, in make_response\r\n    \" {rv.__class__.__name__}.\".format(rv=rv)\r\nTypeError: The view function did not return a valid response. The return type must be a string, dict, tuple, Response instance, or WSGI callable, but it was a list.\r\n127.0.0.1 - - [10/Jul/2019 16:36:33] \"GET / HTTP/1.1\" 500 -\r\n```\r\n\r\n\r\n### Environment\r\n\r\n* Python version: 3.7.3\r\n* Flask version: 1.1.1\r\n* Werkzeug version: 0.15.4\r\n",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/515162633",
            "html_url": "https://github.com/pallets/flask/issues/3294#issuecomment-515162633",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/3294",
            "id": 515162633,
            "node_id": "MDEyOklzc3VlQ29tbWVudDUxNTE2MjYzMw==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2019-07-25T18:32:10Z",
            "updated_at": "2019-07-25T18:32:10Z",
            "author_association": "MEMBER",
            "body": "Duplicate of #3291"
        }
    ]
}