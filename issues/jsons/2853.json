{
    "url": "https://api.github.com/repos/pallets/flask/issues/2853",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/2853/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/2853/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/2853/events",
    "html_url": "https://github.com/pallets/flask/issues/2853",
    "id": 337641634,
    "node_id": "MDU6SXNzdWUzMzc2NDE2MzQ=",
    "number": 2853,
    "title": "@property for configuration objects?",
    "user": {
        "login": "dougthor42",
        "id": 5386897,
        "node_id": "MDQ6VXNlcjUzODY4OTc=",
        "avatar_url": "https://avatars2.githubusercontent.com/u/5386897?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dougthor42",
        "html_url": "https://github.com/dougthor42",
        "followers_url": "https://api.github.com/users/dougthor42/followers",
        "following_url": "https://api.github.com/users/dougthor42/following{/other_user}",
        "gists_url": "https://api.github.com/users/dougthor42/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/dougthor42/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dougthor42/subscriptions",
        "organizations_url": "https://api.github.com/users/dougthor42/orgs",
        "repos_url": "https://api.github.com/users/dougthor42/repos",
        "events_url": "https://api.github.com/users/dougthor42/events{/privacy}",
        "received_events_url": "https://api.github.com/users/dougthor42/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 4,
    "created_at": "2018-07-02T19:51:26Z",
    "updated_at": "2018-07-02T20:36:22Z",
    "closed_at": "2018-07-02T20:03:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "Are properties supported for configuration objects? It doesn't look like it.\r\n\r\nBeing able to use `@property` on configuration objects could simplify some of the more complex configurations out there:\r\n\r\n```python\r\n# Without @property\r\nclass BaseConfig(object)\r\n    NAME = \"a\"\r\n    HELLO = \"Hello, \" + NAME\r\n\r\nclass ProdConfig(BaseConfig):\r\n    NAME = \"b\"\r\n    HELLO = \"Hello, \" + NAME           # repeated code! Makes me \ud83d\ude22\r\n\r\n# With @property\r\nclass BaseConfig(object)\r\n    NAME = \"a\"\r\n\r\n    @property\r\n    def HELLO(self)\r\n        return \"Hello, \" + self.NAME\r\n\r\nclass ProdConfig(BaseConfig):\r\n    NAME = \"b\"                         # Don't need to define HELLO again, yay!\r\n```\r\n\r\n\r\n### Expected Behavior\r\n\r\nIt seems like it would be useful to be able to use properties when defining config variables using `from_object`:\r\n\r\n```python\r\n# my_config.py\r\nclass BaseConfig(object):\r\n    NAME = \"Terry Gilliam\"\r\n\r\n    @property\r\n    def HELLO(self):\r\n        return \"Hello, \" + self.NAME\r\n\r\nclass ProdConfig(BaseConfig):\r\n     NAME = \"Monty Python\"\r\n```\r\n\r\n```python\r\n# example.py\r\nfrom flask import Flask\r\napp = Flask(__name__)\r\napp.config.from_object('my_config.ProdConfig')\r\nprint(app.config['HELLO'])\r\n# \"Hello, Monty Python\"\r\n```\r\n\r\n\r\n### Actual Behavior\r\n\r\nBecause the config class is not actually instantiated, the `HELLO` property is simply a `<property object at 0x...>` rather than `Hello, Terry Gilliam` or `Hello, Monty Python`.\r\n\r\n```python\r\n# example.py\r\nfrom flask import Flask\r\napp = Flask(__name__)\r\napp.config.from_object('my_config.ProdConfig')\r\nprint(app.config['HELLO'])\r\n# <property object at 0x000001EC5404D458>\r\n```\r\n\r\n\r\n### Environment\r\n\r\n* Python version: 3.5.2\r\n* Flask version: 1.0.2\r\n* Werkzeug version: 0.14.1\r\n\r\n\r\n### Possible Resolution\r\n\r\nIf configuration objects are called `ProdConfig()`, then the property resolves. **I'm sure that there's a reason for not instantiating the config object, but I thought it would be worth a discussion.** I'm sure it's security related.\r\n\r\nThe fix might look like:\r\n\r\n```python\r\n# flask.config.Config.from_object\r\n...\r\nfor key in dir(obj):\r\n    if key.isupper():\r\n        self[key] = getattr(obj, key)\r\n        # only instantiate the object if a property is detected\r\n        if isinstance(self[key], type(property())):\r\n            self[key] = getattr(obj(), key)",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/401917586",
            "html_url": "https://github.com/pallets/flask/issues/2853#issuecomment-401917586",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2853",
            "id": 401917586,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQwMTkxNzU4Ng==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2018-07-02T20:03:55Z",
            "updated_at": "2018-07-02T20:03:55Z",
            "author_association": "MEMBER",
            "body": "The method is `from_object`, it doesn't care what the object is. However, properties only evaluate on instances, you're passing a class. You'd need to do `from_object(ProdConfig())`. Or do `prod = ProdConfig()` in your config file and pass *that* name to `from_object`. I don't think Flask needs to do anything special here."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/401924705",
            "html_url": "https://github.com/pallets/flask/issues/2853#issuecomment-401924705",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2853",
            "id": 401924705,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQwMTkyNDcwNQ==",
            "user": {
                "login": "dougthor42",
                "id": 5386897,
                "node_id": "MDQ6VXNlcjUzODY4OTc=",
                "avatar_url": "https://avatars2.githubusercontent.com/u/5386897?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/dougthor42",
                "html_url": "https://github.com/dougthor42",
                "followers_url": "https://api.github.com/users/dougthor42/followers",
                "following_url": "https://api.github.com/users/dougthor42/following{/other_user}",
                "gists_url": "https://api.github.com/users/dougthor42/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/dougthor42/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dougthor42/subscriptions",
                "organizations_url": "https://api.github.com/users/dougthor42/orgs",
                "repos_url": "https://api.github.com/users/dougthor42/repos",
                "events_url": "https://api.github.com/users/dougthor42/events{/privacy}",
                "received_events_url": "https://api.github.com/users/dougthor42/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2018-07-02T20:29:42Z",
            "updated_at": "2018-07-02T20:29:42Z",
            "author_association": "CONTRIBUTOR",
            "body": "So if I'm using a string for the object name (because it's generated from env vars and various other things), I have to run:\r\n\r\n```python\r\nmy_obj_instance = werkzeug.utils.import_string('my_config.ProdConfig')()\r\napp.config.from_object(my_obj_instance)\r\n```\r\n\r\nJust seems kinda silly is all. Feels like that a lot of people wouldn't think they'd have to do that to get properties to work. Nothing in the [main docs](http://flask.pocoo.org/docs/1.0/config/#development-production) nor the [`from_object` docstring](http://flask.pocoo.org/docs/1.0/api/#flask.Config.from_object) state that the class is not instantiated. Perhaps the only bug here is adding that to the docs?\r\n\r\nIf that's the only solution, I'd be happy to open a PR to update the docs to reflect this.\r\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/401925978",
            "html_url": "https://github.com/pallets/flask/issues/2853#issuecomment-401925978",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2853",
            "id": 401925978,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQwMTkyNTk3OA==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2018-07-02T20:34:06Z",
            "updated_at": "2018-07-02T20:35:29Z",
            "author_association": "MEMBER",
            "body": "Nothing in `from_object` says anything special about classes in general, other than they're a common namespace alternative to a module object. It's completely generic to all objects. It even says that the object is used directly, nothing is done to it.\r\n\r\n> an actual object reference: that object is used directly\r\n\r\nIf you want to use an instance, create an instance and reference it.\r\n\r\n```python\r\nclass ProdConfig:\r\n    ...\r\n\r\nprod = ProdConfig()\r\n\r\napp.config.from_object('project.config.prod')\r\n```"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/401926663",
            "html_url": "https://github.com/pallets/flask/issues/2853#issuecomment-401926663",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2853",
            "id": 401926663,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQwMTkyNjY2Mw==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2018-07-02T20:36:22Z",
            "updated_at": "2018-07-02T20:36:22Z",
            "author_association": "MEMBER",
            "body": "If you think the docs can be clearer about this, a PR would be fine though."
        }
    ]
}