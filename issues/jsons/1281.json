{
    "url": "https://api.github.com/repos/pallets/flask/issues/1281",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/1281/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/1281/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/1281/events",
    "html_url": "https://github.com/pallets/flask/pull/1281",
    "id": 52042891,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MjYxMDQwMzc=",
    "number": 1281,
    "title": "errorhandler should expect exception classes instead of exception instances ",
    "user": {
        "login": "flying-sheep",
        "id": 291575,
        "node_id": "MDQ6VXNlcjI5MTU3NQ==",
        "avatar_url": "https://avatars0.githubusercontent.com/u/291575?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/flying-sheep",
        "html_url": "https://github.com/flying-sheep",
        "followers_url": "https://api.github.com/users/flying-sheep/followers",
        "following_url": "https://api.github.com/users/flying-sheep/following{/other_user}",
        "gists_url": "https://api.github.com/users/flying-sheep/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/flying-sheep/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/flying-sheep/subscriptions",
        "organizations_url": "https://api.github.com/users/flying-sheep/orgs",
        "repos_url": "https://api.github.com/users/flying-sheep/repos",
        "events_url": "https://api.github.com/users/flying-sheep/events{/privacy}",
        "received_events_url": "https://api.github.com/users/flying-sheep/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 26,
    "created_at": "2014-12-15T21:43:50Z",
    "updated_at": "2014-12-23T18:19:22Z",
    "closed_at": "2014-12-23T18:19:17Z",
    "author_association": "CONTRIBUTOR",
    "pull_request": {
        "url": "https://api.github.com/repos/pallets/flask/pulls/1281",
        "html_url": "https://github.com/pallets/flask/pull/1281",
        "diff_url": "https://github.com/pallets/flask/pull/1281.diff",
        "patch_url": "https://github.com/pallets/flask/pull/1281.patch"
    },
    "body": "the [current master](https://github.com/mitsuhiko/flask/blob/6fcc2ae3f4536e4d2651c1a00abe2306212a5bfd/flask/app.py#L1136) says:\n\n``` python\ndef _register_error_handler(self, key, code_or_exception, f):\n    if isinstance(code_or_exception, HTTPException):\n        ...\n```\n\nthis will only work if you register a exception _instance_, not an exception class, which is definitely not what users expect. instead of:\n\n---\n\n``` python\nfrom werkzeug.exceptions import Forbidden\n@errorhandler(Forbidden)\ndef forbidden(e):\n    ...\n```\n\n---\n\n``` python\nfrom werkzeug.exceptions import Forbidden\nraise Forbidden()\n```\n\n---\n\nyou\u2019d have to do\n\n---\n\n``` python\nfrom werkzeug.exceptions import Forbidden\nforbidden_instance = Forbidden()\n@errorhandler(forbidden_instance)\ndef forbidden(e):\n    ...\n```\n\n---\n\n``` python\nfrom ..exceptions import forbidden_instance\nraise forbidden_instance\n```\n\n---\n\ni think you meant `issubclass(code_or_exception, HTTPException)`, but to preserve backwards compatibility, we should change it to accept both\n",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/67218495",
            "html_url": "https://github.com/pallets/flask/pull/1281#issuecomment-67218495",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1281",
            "id": 67218495,
            "node_id": "MDEyOklzc3VlQ29tbWVudDY3MjE4NDk1",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-12-16T19:39:27Z",
            "updated_at": "2014-12-16T19:39:27Z",
            "author_association": "MEMBER",
            "body": "First off, thanks for your contribution!\n- Your reasoning is sound, but your patch currently breaks the tests (see https://travis-ci.org/mitsuhiko/flask/builds/44139679).\n- Since this is a bugfix, I think this should be filed against `0.10-maintenance` (and then merged against master).\n- Please add a test similar to the example you gave.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/67218847",
            "html_url": "https://github.com/pallets/flask/pull/1281#issuecomment-67218847",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1281",
            "id": 67218847,
            "node_id": "MDEyOklzc3VlQ29tbWVudDY3MjE4ODQ3",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-12-16T19:41:36Z",
            "updated_at": "2014-12-16T19:41:36Z",
            "author_association": "MEMBER",
            "body": "Honestly I don't care that much about fixing this in 0.10, so ignore the second bulletpoint.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/67326655",
            "html_url": "https://github.com/pallets/flask/pull/1281#issuecomment-67326655",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1281",
            "id": 67326655,
            "node_id": "MDEyOklzc3VlQ29tbWVudDY3MzI2NjU1",
            "user": {
                "login": "flying-sheep",
                "id": 291575,
                "node_id": "MDQ6VXNlcjI5MTU3NQ==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/291575?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/flying-sheep",
                "html_url": "https://github.com/flying-sheep",
                "followers_url": "https://api.github.com/users/flying-sheep/followers",
                "following_url": "https://api.github.com/users/flying-sheep/following{/other_user}",
                "gists_url": "https://api.github.com/users/flying-sheep/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/flying-sheep/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/flying-sheep/subscriptions",
                "organizations_url": "https://api.github.com/users/flying-sheep/orgs",
                "repos_url": "https://api.github.com/users/flying-sheep/repos",
                "events_url": "https://api.github.com/users/flying-sheep/events{/privacy}",
                "received_events_url": "https://api.github.com/users/flying-sheep/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-12-17T14:10:30Z",
            "updated_at": "2014-12-17T14:10:30Z",
            "author_association": "CONTRIBUTOR",
            "body": "i wrote this ad-hoc without testing locally, just to get it done before leaving that day.\n\ni\u2019ll fix it probably this evening\u2026\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/67752968",
            "html_url": "https://github.com/pallets/flask/pull/1281#issuecomment-67752968",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1281",
            "id": 67752968,
            "node_id": "MDEyOklzc3VlQ29tbWVudDY3NzUyOTY4",
            "user": {
                "login": "flying-sheep",
                "id": 291575,
                "node_id": "MDQ6VXNlcjI5MTU3NQ==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/291575?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/flying-sheep",
                "html_url": "https://github.com/flying-sheep",
                "followers_url": "https://api.github.com/users/flying-sheep/followers",
                "following_url": "https://api.github.com/users/flying-sheep/following{/other_user}",
                "gists_url": "https://api.github.com/users/flying-sheep/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/flying-sheep/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/flying-sheep/subscriptions",
                "organizations_url": "https://api.github.com/users/flying-sheep/orgs",
                "repos_url": "https://api.github.com/users/flying-sheep/repos",
                "events_url": "https://api.github.com/users/flying-sheep/events{/privacy}",
                "received_events_url": "https://api.github.com/users/flying-sheep/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-12-20T22:53:09Z",
            "updated_at": "2014-12-20T23:09:30Z",
            "author_association": "CONTRIBUTOR",
            "body": "ahah! indeed the _user exception path_ is taken in the tests.\n\nuser exceptions work by registering a list of `(class, function)` tuples, which is searched for every exception that is thrown. _after that, if no registered exception handler is found_, it is tested if an exception is a subclass of `HTTPException`, and if so, the specific exception code handlers are used.\n\nthis is important, because the wrong check i tried to fix leads to the registering of a user exception, and this way, the existing tests pass. which they shouldn\u2019t, because:\n\nwhat the defunct code path that currently is never triggered would do is that it\u2019d simply extract the error code from the exception, which would lead to a replacement of that error handler (so `register_error_handler(ForbiddenSubclass)` is the same as `register_error_handler(403)`)! simplified:\n\n``` python\nif issubclass(code_or_exception, HTTPException):  # current code tests isinstance instead.\n    code = code_or_exception.code\nelif isinstance(code_or_exception, integer_types):\n    code = code_or_exception\nself.error_handler_spec[key][code] = f  # there can be only one!\n```\n\n## some examples\n\nsetup:\n\n```\nclass HTTPExceptionSubClass(HTTPException):\n    code = 418\nhttp_exception_instance = HTTPExceptionSubClass()\n```\n\nthe three paths (what they do now):\n1. `register_error_handler(418)` \u2192 replaces the 418 error handler\n2. `register_error_handler(http_exception_instance)` \u2192 replaces the 418 error handler\n3. `register_error_handler(HTTPExceptionSubClass)` \u2192 registers a userexception for HTTPExceptionSubClass\n4. `register_error_handler(TypeError)` \u2192 registers a userexception for TypeError\n\nthe third path (after my naive patch) would then also replace the 418 error handler, which would break the tests, because again\u2026\n\n## summary\n\nthe tests are broken because they expect HTTPException subclasses to behave like user exceptions, i.e. registering a HTTPException subclass would not replace the HTTPExceptionSubclass.code handler.\n\nthe errorhandler registration code is broken so it actually does make HTTPException subclasses behave like user exceptions.\n\n@mitsuhiko **i\u2019m unsure how to proceed**. was it really intended than any kind of HTTPException subclass handler replaces the blueprint/app wide one? or what?\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/67753846",
            "html_url": "https://github.com/pallets/flask/pull/1281#issuecomment-67753846",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1281",
            "id": 67753846,
            "node_id": "MDEyOklzc3VlQ29tbWVudDY3NzUzODQ2",
            "user": {
                "login": "flying-sheep",
                "id": 291575,
                "node_id": "MDQ6VXNlcjI5MTU3NQ==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/291575?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/flying-sheep",
                "html_url": "https://github.com/flying-sheep",
                "followers_url": "https://api.github.com/users/flying-sheep/followers",
                "following_url": "https://api.github.com/users/flying-sheep/following{/other_user}",
                "gists_url": "https://api.github.com/users/flying-sheep/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/flying-sheep/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/flying-sheep/subscriptions",
                "organizations_url": "https://api.github.com/users/flying-sheep/orgs",
                "repos_url": "https://api.github.com/users/flying-sheep/repos",
                "events_url": "https://api.github.com/users/flying-sheep/events{/privacy}",
                "received_events_url": "https://api.github.com/users/flying-sheep/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-12-20T23:26:07Z",
            "updated_at": "2014-12-20T23:26:07Z",
            "author_association": "CONTRIBUTOR",
            "body": "approaches:\n\n## fuck it\n\nremove special tests and code path for HTTPException subclasses. treat all exceptions the same, except that e.g. a instance of ForbiddenSubclass will trigger the 403 handler if no ForbiddenSubclass handler is registered.\n\ncons: apparently this is not behavior intended by the code. also it might get ugly with subclasses of subclasses, because isinstance checks are performed in sequence, not specificallity\n\n## \u201cfix\u201d it\n\nfix the tests to actually reflect what the code tries to do, i.e. replacement of the 403 error handler if a ForbiddenSubclass or ForbiddenSubclass2 handler is registered.\n\ncons: surprising!\n\n## really fix it\n\ncreate a subclass registry for every code that is searched (if exception is an instance of HTTPException, search the exception.code handler registry, not the user exception registry)\n\nalso filter the registered exception classes by which are superclasses of the thrown one, and call the handler for the most specific one!\n\nreplace `self.error_handler_spec[*][*].__setitem__` with something that intercepts code like `app.error_handler_spec[None][403] = foo` and translates it into `app.error_handler_spec[None][403][Forbidden] = foo`.\n\ncons: most complex\n\n## ??\n\nmaybe someone who had the idea about what should happen can weigh in\u2026\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/67770909",
            "html_url": "https://github.com/pallets/flask/pull/1281#issuecomment-67770909",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1281",
            "id": 67770909,
            "node_id": "MDEyOklzc3VlQ29tbWVudDY3NzcwOTA5",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-12-21T13:47:16Z",
            "updated_at": "2014-12-21T13:47:16Z",
            "author_association": "MEMBER",
            "body": "Fuck-it seems like the most attractive of all of them. I'd be very interested in a complete re-write of exception handling, given @mitsuhiko's consent.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/67772279",
            "html_url": "https://github.com/pallets/flask/pull/1281#issuecomment-67772279",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1281",
            "id": 67772279,
            "node_id": "MDEyOklzc3VlQ29tbWVudDY3NzcyMjc5",
            "user": {
                "login": "flying-sheep",
                "id": 291575,
                "node_id": "MDQ6VXNlcjI5MTU3NQ==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/291575?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/flying-sheep",
                "html_url": "https://github.com/flying-sheep",
                "followers_url": "https://api.github.com/users/flying-sheep/followers",
                "following_url": "https://api.github.com/users/flying-sheep/following{/other_user}",
                "gists_url": "https://api.github.com/users/flying-sheep/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/flying-sheep/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/flying-sheep/subscriptions",
                "organizations_url": "https://api.github.com/users/flying-sheep/orgs",
                "repos_url": "https://api.github.com/users/flying-sheep/repos",
                "events_url": "https://api.github.com/users/flying-sheep/events{/privacy}",
                "received_events_url": "https://api.github.com/users/flying-sheep/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-12-21T14:38:48Z",
            "updated_at": "2014-12-21T14:42:00Z",
            "author_association": "CONTRIBUTOR",
            "body": "well, wouldn\u2019t that rewrite basically be really-fix-it? or do you have different plans?\n\ni\u2019d envision that the handler flow would be (pseudocode):\n\n``` python\nif is_http_exception(exception):\n    code = 'user'\nelse:\n    code = exception.code\n\nhandler = app.error_handler_spec[blueprint][code].find_most_specific_for(exception)\nif not handler:\n    handler = app.error_handler_spec[None][code].find_most_specific_for(exception)\n```\n\nwith the invariant that `app.error_handler_spec[None][?].find_most_specific_for` will always return a valid handler, whereas `app.error_handler_spec[blueprint][?].find_most_specific_for` can return `None`.\n\nfallthroughs would be (naturally) the least specific handler for that error code, i.e. the \u201chttp_exceptions.Forbidden\u201d handler for any `Forbidden` subclass. (=code 403), for which flask will provide a app-wide default. if no default user exception handler is registered, flask would return the debugger in debug mode and invoke the 500 (default or not) handler elsewise.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/67772852",
            "html_url": "https://github.com/pallets/flask/pull/1281#issuecomment-67772852",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1281",
            "id": 67772852,
            "node_id": "MDEyOklzc3VlQ29tbWVudDY3NzcyODUy",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-12-21T14:58:26Z",
            "updated_at": "2014-12-21T14:58:26Z",
            "author_association": "MEMBER",
            "body": "IMO a rewrite would simply work the same way Python's exception-handling works: There are no \"403-handlers\" (or any handlers for status codes), just handlers for exceptions. If there is no handler for ForbiddenSubclass, the handler for Forbidden would be used.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/67775978",
            "html_url": "https://github.com/pallets/flask/pull/1281#issuecomment-67775978",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1281",
            "id": 67775978,
            "node_id": "MDEyOklzc3VlQ29tbWVudDY3Nzc1OTc4",
            "user": {
                "login": "flying-sheep",
                "id": 291575,
                "node_id": "MDQ6VXNlcjI5MTU3NQ==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/291575?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/flying-sheep",
                "html_url": "https://github.com/flying-sheep",
                "followers_url": "https://api.github.com/users/flying-sheep/followers",
                "following_url": "https://api.github.com/users/flying-sheep/following{/other_user}",
                "gists_url": "https://api.github.com/users/flying-sheep/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/flying-sheep/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/flying-sheep/subscriptions",
                "organizations_url": "https://api.github.com/users/flying-sheep/orgs",
                "repos_url": "https://api.github.com/users/flying-sheep/repos",
                "events_url": "https://api.github.com/users/flying-sheep/events{/privacy}",
                "received_events_url": "https://api.github.com/users/flying-sheep/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-12-21T16:40:02Z",
            "updated_at": "2014-12-21T16:41:14Z",
            "author_association": "CONTRIBUTOR",
            "body": "well first off, yeah, codes and classes would be synonymous: `@app.errorhandler(403)` would do the same as `@app.errorhandler(Forbidden)`.\n\nbut moving on, i\u2019m not exactly sure what you mean:\n\nin python, an exception handler is a try/except clause. the except clause that first matches the exception while it\u2019s bubbling up the stack wins.\n\nbut we want to register exception handlers via decorators, so the intuition is: error handlers are independently from stack depth and order. at least my intuition is that module-level decorators are order-independent: i don\u2019t expect the order in which i place my functions to have any impact, except when one is an override of the other.\n\nso i guess the least surprising thing to do is:\n\n``` python\nclass ForbiddenSub(Forbidden): pass\n\n@app.errorhandler(ForbiddenSubClass)\ndef x(e): ...\n\n@app.errorhandler(403)\ndef y(e): ...\n\n#replaces y because synonymous. we should throw a warning here\n@app.errorhandler(Forbidden)\ndef z(e): ...\n\n@app.errorhandler(500)\ndef w(e): ...\n\ndef test_a():\n    raise Forbidden()\n    # triggers z, since z replaces y\n\ndef test_b():\n    raise ForbiddenSubclass()\n    # triggers x, because x is more specific than z (the Forbidden handler)\n\ndef test_c():\n    raise TypeError()\n    # user exception triggers the debugger or \u201cw\u201d, depending on debug settings\n\ndef test_d():\n    raise ImATeapot()\n    # triggers the default 418 handler since we defined none\n```\n\nand blueprints work the same, except that there are no blueprint-wide defaults: any class of Exceptions (e.g. Forbidden subclasses or user exceptions) will be routed to the app\u2019s handlers if there are no fitting handlers registered on the blueprint.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/67778395",
            "html_url": "https://github.com/pallets/flask/pull/1281#issuecomment-67778395",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1281",
            "id": 67778395,
            "node_id": "MDEyOklzc3VlQ29tbWVudDY3Nzc4Mzk1",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-12-21T17:58:52Z",
            "updated_at": "2014-12-21T17:58:52Z",
            "author_association": "MEMBER",
            "body": "With \"like Python\" I mostly meant to match only by exception type and not any codes.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/67778583",
            "html_url": "https://github.com/pallets/flask/pull/1281#issuecomment-67778583",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1281",
            "id": 67778583,
            "node_id": "MDEyOklzc3VlQ29tbWVudDY3Nzc4NTgz",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-12-21T18:04:18Z",
            "updated_at": "2014-12-21T18:04:18Z",
            "author_association": "MEMBER",
            "body": "> the except clause that first matches the exception while it\u2019s bubbling up the stack wins\n\nThat's what I am suggesting. I think the algorithm for `find_most_specific_for` would be too costly to implement at runtime, but also multiple inheritance would further complicate the behavior. I'm advocating a behavior where the order of registration determines which errorhandler gets called, which is IIRC what is currently implemented. So apart from removing special-casing for HTTP codes, nothing would change.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/67787592",
            "html_url": "https://github.com/pallets/flask/pull/1281#issuecomment-67787592",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1281",
            "id": 67787592,
            "node_id": "MDEyOklzc3VlQ29tbWVudDY3Nzg3NTky",
            "user": {
                "login": "flying-sheep",
                "id": 291575,
                "node_id": "MDQ6VXNlcjI5MTU3NQ==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/291575?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/flying-sheep",
                "html_url": "https://github.com/flying-sheep",
                "followers_url": "https://api.github.com/users/flying-sheep/followers",
                "following_url": "https://api.github.com/users/flying-sheep/following{/other_user}",
                "gists_url": "https://api.github.com/users/flying-sheep/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/flying-sheep/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/flying-sheep/subscriptions",
                "organizations_url": "https://api.github.com/users/flying-sheep/orgs",
                "repos_url": "https://api.github.com/users/flying-sheep/repos",
                "events_url": "https://api.github.com/users/flying-sheep/events{/privacy}",
                "received_events_url": "https://api.github.com/users/flying-sheep/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-12-21T22:24:16Z",
            "updated_at": "2014-12-21T22:24:16Z",
            "author_association": "CONTRIBUTOR",
            "body": "I disagree. That's completely counter intuitive:\n\n``` python\n@app.errorhandler(BarException)\ndef handle_bar(e):\n    ...\n\n@app.errorhandler(FooException)\ndef handle_foo(e):\n    ...\n\n@app.route('/')\ndef index():\n    raise FooException()\n```\n\nWhat Do you mean the BarException handler is called?\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/67787720",
            "html_url": "https://github.com/pallets/flask/pull/1281#issuecomment-67787720",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1281",
            "id": 67787720,
            "node_id": "MDEyOklzc3VlQ29tbWVudDY3Nzg3NzIw",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-12-21T22:28:01Z",
            "updated_at": "2014-12-21T22:28:01Z",
            "author_association": "MEMBER",
            "body": "Yes, but it's how python exception handling works, and how Flask's currently does too.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/67864438",
            "html_url": "https://github.com/pallets/flask/pull/1281#issuecomment-67864438",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1281",
            "id": 67864438,
            "node_id": "MDEyOklzc3VlQ29tbWVudDY3ODY0NDM4",
            "user": {
                "login": "flying-sheep",
                "id": 291575,
                "node_id": "MDQ6VXNlcjI5MTU3NQ==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/291575?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/flying-sheep",
                "html_url": "https://github.com/flying-sheep",
                "followers_url": "https://api.github.com/users/flying-sheep/followers",
                "following_url": "https://api.github.com/users/flying-sheep/following{/other_user}",
                "gists_url": "https://api.github.com/users/flying-sheep/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/flying-sheep/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/flying-sheep/subscriptions",
                "organizations_url": "https://api.github.com/users/flying-sheep/orgs",
                "repos_url": "https://api.github.com/users/flying-sheep/repos",
                "events_url": "https://api.github.com/users/flying-sheep/events{/privacy}",
                "received_events_url": "https://api.github.com/users/flying-sheep/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-12-22T17:26:14Z",
            "updated_at": "2014-12-22T17:37:32Z",
            "author_association": "CONTRIBUTOR",
            "body": "> but it's how python exception handling works\n\nno. afaik there is no concept of error handlers, and there the sequence in which except clauses are testing is bound to the stack: the first except clause _up_ from the exception raising wins.\n\nwe have declarative code here, with decorators, no call stack. no verticality, no bubbling. nothing of those things is exposed to the decorators. do you get where i\u2019m coming from? :)\n\n> and how Flask's currently does too.\n\nmaybe, but nobody seems to use it in an advanced way if i\u2019m the first one realizing that `@app.errorhandler(ForbiddenSubclass)` doesn\u2019t work\n\n---\n\nfinally, for subclassing exception the first registered handler wins, as in above example: if X is a subclass of Y, and you register a Y, then X handler, the X handler will never be used even if you throw a X instance.\n\nand for codes, the last registered handler wins: if you register a handler for 403, and then one for forbidden_subclass_instance, the latter will get all 403s.\n\n---\n\nwhat i\u2019m getting at: the whole errorhandler system is unintuitive, complex, and in places broken.\n\nmy simple idea is: the most specific error handler wins. the intuitive specificity sequence is\n1. the exception class hierarchy. most specific superclass of the exception\u2019s class matches\n2. blueprint hierarchy (currently only 2 levels deep: blueprint and app). blueprint wins\n3. default handlers if nothing registered matches\n\ni bet there is a very efficient data structure for finding the most specific superclass of an object out of a set of registered ones.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/67868017",
            "html_url": "https://github.com/pallets/flask/pull/1281#issuecomment-67868017",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1281",
            "id": 67868017,
            "node_id": "MDEyOklzc3VlQ29tbWVudDY3ODY4MDE3",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-12-22T17:56:00Z",
            "updated_at": "2014-12-22T17:56:20Z",
            "author_association": "MEMBER",
            "body": "> no. afaik there is no concept of error handlers\n\nI am only talking about the \"algorithm\" used for prioritization:\n- Python exception handling: The _first_ matching except-clause (in the order specified) is used\n- Flask exception handling: The _first_ matching errorhandler (in the order registered) is used\n\nAs opposed to finding the _most specific_ error handler (or except-clause) for an exception.\n\n> maybe, but nobody seems to use it in an advanced way\n\nThat's a really strong assumption, and I think it's impossible to avoid advanced usage in any sufficiently complex Flask app.\n\nNote that I am not really opposed to a new behavior, but I can't really imagine that the benefit of \"intuitiveness\" would outweigh the new learning curve. Because, while ordering by registration time might seem counterintuitive, the behavior is easily explained, while a more complex ranking algorithm probably requires much more learning effort. For example, even with \"specifity\" defined, how should ties be resolved? Sorting by registration time passes that responsibility off to the user.\n\n> if i\u2019m the first one realizing that @app.errorhandler(ForbiddenSubclass) doesn\u2019t work\n\nIt does work for me (yes, with all the bugs), it doesn't with the bugs fixed.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/67945571",
            "html_url": "https://github.com/pallets/flask/pull/1281#issuecomment-67945571",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1281",
            "id": 67945571,
            "node_id": "MDEyOklzc3VlQ29tbWVudDY3OTQ1NTcx",
            "user": {
                "login": "flying-sheep",
                "id": 291575,
                "node_id": "MDQ6VXNlcjI5MTU3NQ==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/291575?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/flying-sheep",
                "html_url": "https://github.com/flying-sheep",
                "followers_url": "https://api.github.com/users/flying-sheep/followers",
                "following_url": "https://api.github.com/users/flying-sheep/following{/other_user}",
                "gists_url": "https://api.github.com/users/flying-sheep/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/flying-sheep/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/flying-sheep/subscriptions",
                "organizations_url": "https://api.github.com/users/flying-sheep/orgs",
                "repos_url": "https://api.github.com/users/flying-sheep/repos",
                "events_url": "https://api.github.com/users/flying-sheep/events{/privacy}",
                "received_events_url": "https://api.github.com/users/flying-sheep/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-12-23T12:16:49Z",
            "updated_at": "2014-12-23T12:22:13Z",
            "author_association": "CONTRIBUTOR",
            "body": "> - Python exception handling: The first matching except-clause (in the order specified) is used\n> - Flask exception handling: The first matching errorhandler (in the order registered) is used\n> \n> As opposed to finding the most specific error handler (or except-clause) for an exception\n\nOK, gotcha. i still think that the mental model of registering handlers via decorators is _horizontal_ and _declarative_, while the mental model with handlers is tied to the structure of the code, i.e. the call stack and is therefore _vertical_ and _sequential_.\n\nalso in our case, handlers are endpoints, as in they return responses, whereas except clauses are just there in the code and either let things flow on or reraise the exceptions. both of those things reinforce the disparate mental models associated with the approaches.\n\napart from reacting to exceptions, those two approaches have nothing in common, look and feel very different. and again: top level function definitions (unlke nested ones inside of a function) have a order-independent feel to them, as have decorators. **and every API i ever used made that work**, by only breaking that mental model if you override something existing (mostly accidentally)\n\ni think my idea is just adequate API design, whereas the way things work right now is surprising for everything but simple cases (where it works identically to my approach)\n\n> [\u2026] For example, even with \"specifity\" defined, how should ties be resolved? Sorting by registration time passes that responsibility off to the user.\n\nwell, it still comes down to registration order when there are overrides and times. i just think that this behavior (in a \u201dnote\u201d box in the docs) is still more intuitive than e.g. following scenario:\n\n``` python\napp = Flask(__name__)\n\n[...]\n\napp.errorhandler(403)\ndef default_forbidden():\n    return 'You\u2019re not allowed to do that', 403\n\n```\n\nand somewhere else\n\n``` python\n@app.errorhandler(CheatException)\ndef cheat(e):\n    return '''\n        You thought you\u2019d get through with faking your score\n        while it really is {e.real_score}\n    '''.format(e=e), CheatException.code\n\n@app.route('/submit_score/<score>')\ndef submit_score(score):\n    if not internal_score == score:\n        raise CheatException(internal_score)\n```\n\nNow add templates and more complexity and have fun debugging why you raised a CheatException for which you clearly just defined a handler (it\u2019s right there, for god\u2019s sake!) and still some nondescript 403 page came!\n\n> It does work for me (yes, with all the bugs), it doesn't with the bugs fixed.\n\nhuh? my pull request is incomplete and naive, made at a point where i thought the rest of the code worked as it seemed like it should, but it turns out that the tests rely on broken functionality, thus our discussion here. what do you actually use? what works? what doesn\u2019t? what fixed bugs are you talking about?\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/67948850",
            "html_url": "https://github.com/pallets/flask/pull/1281#issuecomment-67948850",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1281",
            "id": 67948850,
            "node_id": "MDEyOklzc3VlQ29tbWVudDY3OTQ4ODUw",
            "user": {
                "login": "flying-sheep",
                "id": 291575,
                "node_id": "MDQ6VXNlcjI5MTU3NQ==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/291575?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/flying-sheep",
                "html_url": "https://github.com/flying-sheep",
                "followers_url": "https://api.github.com/users/flying-sheep/followers",
                "following_url": "https://api.github.com/users/flying-sheep/following{/other_user}",
                "gists_url": "https://api.github.com/users/flying-sheep/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/flying-sheep/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/flying-sheep/subscriptions",
                "organizations_url": "https://api.github.com/users/flying-sheep/orgs",
                "repos_url": "https://api.github.com/users/flying-sheep/repos",
                "events_url": "https://api.github.com/users/flying-sheep/events{/privacy}",
                "received_events_url": "https://api.github.com/users/flying-sheep/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-12-23T13:03:59Z",
            "updated_at": "2014-12-23T13:10:32Z",
            "author_association": "CONTRIBUTOR",
            "body": "by the way: i found a very simple and efficient implementation for my idea (example only with app, not blueprint).\n\nhalf-pseudocode prototype:\n\n``` python\n\nclass DefaultHandlers(object):\n    def __getitem__(self, code):\n        description = http_codes.get(code)\n        if description is not None:\n            return lambda e: '<h1>Error {}</h1>\\n{}<br>{}'.format(code, description, e)\n        else:\n            raise KeyError(code)\n\nFlask.handlers = ChainMap({}, DefaultHandlers())\n# for blueprint: ChainMap({}, app.handlers, DefaultHandlers())\n\ndef is_http_exception(error_class_or_instance):\n    return (\n        isinstance(error_class_or_instance, HTTPException) or\n        isinstance(error_class_or_instance, type) and\n        issubclass(error_class_or_instance, HTTPException))\n\n\ndef Flask.get_handlers(self, e):\n    code = e.code if is_http_exception(e) else None # None: user exception\n    return self.handlers.setdefault(code, {})\n\ndef Flask.register_errorhandler(self, error_class, handler_function):\n    assert issubclass(error_class, Exception)\n    self.get_handlers(error_class)[error_class] = handler_function\n\ndef Flask.find_appropriate_handler(e):\n    assert isinstance(error_class, Exception)\n    handlers = self.get_handlers(e)\n    for error_class in type(e).mro():\n        handler = handlers.get(error_class)\n        if hander is not None:\n            return handler(e)\n```\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/67960494",
            "html_url": "https://github.com/pallets/flask/pull/1281#issuecomment-67960494",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1281",
            "id": 67960494,
            "node_id": "MDEyOklzc3VlQ29tbWVudDY3OTYwNDk0",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-12-23T15:16:00Z",
            "updated_at": "2014-12-23T15:16:00Z",
            "author_association": "MEMBER",
            "body": "> what works? what doesn\u2019t?\n\nIf I register an errorhandler for ForbiddenSubclass before registering less specific error handlers, it works as one would expect:\n- Raising ForbiddenSubclass triggers the ForbiddenSubclass handler\n- Raising Forbidden triggers one of the less specific ones\n\nIn summary: Feel free to open a PR with a draft of your proposed new behavior. Maybe it works, maybe it doesn't... your suggestions seem sound, but I am honestly unsure of the consequences regarding backwards compatibility. At this point I think only coding it up would make this clear.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/67961645",
            "html_url": "https://github.com/pallets/flask/pull/1281#issuecomment-67961645",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1281",
            "id": 67961645,
            "node_id": "MDEyOklzc3VlQ29tbWVudDY3OTYxNjQ1",
            "user": {
                "login": "flying-sheep",
                "id": 291575,
                "node_id": "MDQ6VXNlcjI5MTU3NQ==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/291575?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/flying-sheep",
                "html_url": "https://github.com/flying-sheep",
                "followers_url": "https://api.github.com/users/flying-sheep/followers",
                "following_url": "https://api.github.com/users/flying-sheep/following{/other_user}",
                "gists_url": "https://api.github.com/users/flying-sheep/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/flying-sheep/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/flying-sheep/subscriptions",
                "organizations_url": "https://api.github.com/users/flying-sheep/orgs",
                "repos_url": "https://api.github.com/users/flying-sheep/repos",
                "events_url": "https://api.github.com/users/flying-sheep/events{/privacy}",
                "received_events_url": "https://api.github.com/users/flying-sheep/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-12-23T15:26:47Z",
            "updated_at": "2014-12-23T15:26:47Z",
            "author_association": "CONTRIBUTOR",
            "body": "well, what you say will still work after that of course.\n\nwhat won\u2019t work is\n1. registering error handlers on exception _instances_ (i\u2019m pretty sure nobody does that, since it would require understanding the broken code, which would have led to someone else filing this very bug)\n2. relying on the order and registering a more generic exception handler before a more specific one and relying on the former being triggered (which would be broken code anyway: why would you want to register an error handler which will per definition never be triggered, like the latter one in this example)\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/67961873",
            "html_url": "https://github.com/pallets/flask/pull/1281#issuecomment-67961873",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1281",
            "id": 67961873,
            "node_id": "MDEyOklzc3VlQ29tbWVudDY3OTYxODcz",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-12-23T15:28:51Z",
            "updated_at": "2014-12-23T15:28:51Z",
            "author_association": "MEMBER",
            "body": "Go ahead, I'd have to play around with the implementation to be able to make any statements.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/67964883",
            "html_url": "https://github.com/pallets/flask/pull/1281#issuecomment-67964883",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1281",
            "id": 67964883,
            "node_id": "MDEyOklzc3VlQ29tbWVudDY3OTY0ODgz",
            "user": {
                "login": "mattupstate",
                "id": 166176,
                "node_id": "MDQ6VXNlcjE2NjE3Ng==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/166176?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/mattupstate",
                "html_url": "https://github.com/mattupstate",
                "followers_url": "https://api.github.com/users/mattupstate/followers",
                "following_url": "https://api.github.com/users/mattupstate/following{/other_user}",
                "gists_url": "https://api.github.com/users/mattupstate/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/mattupstate/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mattupstate/subscriptions",
                "organizations_url": "https://api.github.com/users/mattupstate/orgs",
                "repos_url": "https://api.github.com/users/mattupstate/repos",
                "events_url": "https://api.github.com/users/mattupstate/events{/privacy}",
                "received_events_url": "https://api.github.com/users/mattupstate/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-12-23T15:53:49Z",
            "updated_at": "2014-12-23T15:55:37Z",
            "author_association": "CONTRIBUTOR",
            "body": "FWIW, I've never once thought to register custom `HTTPException` subclasses. Only plain old Python exceptions that do not have any meaning in the context of an HTTP application. I simply `raise MyCustomException()` (which is a subclass of `HTTPException`) at some point during a request and Flask just deals with it. I don't see the big deal here, honestly.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/67974003",
            "html_url": "https://github.com/pallets/flask/pull/1281#issuecomment-67974003",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1281",
            "id": 67974003,
            "node_id": "MDEyOklzc3VlQ29tbWVudDY3OTc0MDAz",
            "user": {
                "login": "flying-sheep",
                "id": 291575,
                "node_id": "MDQ6VXNlcjI5MTU3NQ==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/291575?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/flying-sheep",
                "html_url": "https://github.com/flying-sheep",
                "followers_url": "https://api.github.com/users/flying-sheep/followers",
                "following_url": "https://api.github.com/users/flying-sheep/following{/other_user}",
                "gists_url": "https://api.github.com/users/flying-sheep/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/flying-sheep/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/flying-sheep/subscriptions",
                "organizations_url": "https://api.github.com/users/flying-sheep/orgs",
                "repos_url": "https://api.github.com/users/flying-sheep/repos",
                "events_url": "https://api.github.com/users/flying-sheep/events{/privacy}",
                "received_events_url": "https://api.github.com/users/flying-sheep/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-12-23T17:06:43Z",
            "updated_at": "2014-12-23T17:06:43Z",
            "author_association": "CONTRIBUTOR",
            "body": "but if you `raise YourCustomException()`, you\u2019ll only see whatever handler is registered for that code, not any message based on YourCustomException, right?\n\nlike in my example: if you raise CheatException (subclass of Forbidden), you only get the handler registered for 403.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/67974720",
            "html_url": "https://github.com/pallets/flask/pull/1281#issuecomment-67974720",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1281",
            "id": 67974720,
            "node_id": "MDEyOklzc3VlQ29tbWVudDY3OTc0NzIw",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-12-23T17:13:05Z",
            "updated_at": "2014-12-23T17:13:05Z",
            "author_association": "MEMBER",
            "body": "If you put them in the correct order, your goal is possible:\n\n```\nfrom flask import Flask\nfrom werkzeug.exceptions import Forbidden\n\nclass Cheated(Forbidden):\n    pass\n\napp = Flask(__name__)\n\n@app.errorhandler(Cheated)\ndef cheated(e):\n    return \"cheated!\"\n\n@app.errorhandler(403)  # works with either 403 or Forbidden as arg\ndef custom_forbidden(e):\n    return \"forbidden\"\n\n@app.route('/')\ndef index():\n    raise Cheated()\n\nwith app.test_client() as c:\n    assert c.get('/').data == 'cheated!'\n```\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/67974761",
            "html_url": "https://github.com/pallets/flask/pull/1281#issuecomment-67974761",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1281",
            "id": 67974761,
            "node_id": "MDEyOklzc3VlQ29tbWVudDY3OTc0NzYx",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-12-23T17:13:21Z",
            "updated_at": "2014-12-23T17:13:21Z",
            "author_association": "MEMBER",
            "body": "That is, with the master branch.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/67974764",
            "html_url": "https://github.com/pallets/flask/pull/1281#issuecomment-67974764",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1281",
            "id": 67974764,
            "node_id": "MDEyOklzc3VlQ29tbWVudDY3OTc0NzY0",
            "user": {
                "login": "mattupstate",
                "id": 166176,
                "node_id": "MDQ6VXNlcjE2NjE3Ng==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/166176?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/mattupstate",
                "html_url": "https://github.com/mattupstate",
                "followers_url": "https://api.github.com/users/mattupstate/followers",
                "following_url": "https://api.github.com/users/mattupstate/following{/other_user}",
                "gists_url": "https://api.github.com/users/mattupstate/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/mattupstate/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mattupstate/subscriptions",
                "organizations_url": "https://api.github.com/users/mattupstate/orgs",
                "repos_url": "https://api.github.com/users/mattupstate/repos",
                "events_url": "https://api.github.com/users/mattupstate/events{/privacy}",
                "received_events_url": "https://api.github.com/users/mattupstate/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-12-23T17:13:23Z",
            "updated_at": "2014-12-23T17:16:18Z",
            "author_association": "CONTRIBUTOR",
            "body": "No, you'll see whatever your custom exception tells Flask to show. For example, here are some custom JSON exception classes from a project of mine:\n\n``` python\nclass JSONException(HTTPException):\n    links = None\n\n    def __init__(self, links=None, *args, **kwargs):\n        super(JSONException, self).__init__(*args, **kwargs)\n        self.links = links or {}\n\n    def get_links(self):\n        return {name: {'href': href} for name, href in self.links}\n\n    def get_headers(self, environ=None):\n        return [('Content-Type', 'application/vnd.error+json')]\n\n    def get_body(self, environ=None):\n        return {'message': self.description, '_links': self.get_links()}\n\n    def get_response(self, environ=None):\n        rv = json.dumps(self.get_body(environ), indent=2)\n        return current_app.response_class(rv, self.code, self.get_headers(environ))\n\n\nclass ValidationError(JSONException):\n    code = 400\n    description = _('Validation error')\n\n    def __init__(self, errors=[], *args, **kwargs):\n        super(ValidationError, self).__init__(*args, **kwargs)\n        self.errors = errors\n\n    def get_body(self, environ=None):\n        rv = super(ValidationError, self).get_body(environ)\n        if self.errors:\n            rv['_embedded'] = {'errors': self.errors}\n            rv['total'] = len(self.errors)\n        return rv\n\n\nclass SearchQueryError(ValidationError):\n    description = _('Invalid search query')\n\n\nclass AuthenticationError(JSONException):\n\n    def get_headers(self, environ=None):\n        return super(AuthenticationError, self).get_headers() + [\n            ('WWW-Authenticate', 'JWT realm=\"Login Required\"')\n        ]\n\n\nclass Unauthenticated(AuthenticationError):\n    code = 401\n    description = _('Authentication required')\n\n\nclass Unauthorized(AuthenticationError):\n    code = 403\n    description = _('Unauthorized')\n\n\nclass ResourceNotFound(JSONException):\n    code = 404\n    description = _('Resource not found')\n```\n\nNo where in my app have I registered these exceptions to be handled by my application. I just raise them, and if it happens to be in the context of a request, Flask returns an appropriate response for me.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/67981759",
            "html_url": "https://github.com/pallets/flask/pull/1281#issuecomment-67981759",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1281",
            "id": 67981759,
            "node_id": "MDEyOklzc3VlQ29tbWVudDY3OTgxNzU5",
            "user": {
                "login": "flying-sheep",
                "id": 291575,
                "node_id": "MDQ6VXNlcjI5MTU3NQ==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/291575?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/flying-sheep",
                "html_url": "https://github.com/flying-sheep",
                "followers_url": "https://api.github.com/users/flying-sheep/followers",
                "following_url": "https://api.github.com/users/flying-sheep/following{/other_user}",
                "gists_url": "https://api.github.com/users/flying-sheep/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/flying-sheep/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/flying-sheep/subscriptions",
                "organizations_url": "https://api.github.com/users/flying-sheep/orgs",
                "repos_url": "https://api.github.com/users/flying-sheep/repos",
                "events_url": "https://api.github.com/users/flying-sheep/events{/privacy}",
                "received_events_url": "https://api.github.com/users/flying-sheep/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-12-23T18:19:17Z",
            "updated_at": "2014-12-23T18:19:17Z",
            "author_association": "CONTRIBUTOR",
            "body": "abandoning for #1291\n"
        }
    ]
}