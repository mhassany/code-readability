{
    "url": "https://api.github.com/repos/pallets/flask/issues/1600",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/1600/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/1600/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/1600/events",
    "html_url": "https://github.com/pallets/flask/issues/1600",
    "id": 114345004,
    "node_id": "MDU6SXNzdWUxMTQzNDUwMDQ=",
    "number": 1600,
    "title": "Add session methods to handle destruction and regeneration",
    "user": {
        "login": "twolfson",
        "id": 902488,
        "node_id": "MDQ6VXNlcjkwMjQ4OA==",
        "avatar_url": "https://avatars3.githubusercontent.com/u/902488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/twolfson",
        "html_url": "https://github.com/twolfson",
        "followers_url": "https://api.github.com/users/twolfson/followers",
        "following_url": "https://api.github.com/users/twolfson/following{/other_user}",
        "gists_url": "https://api.github.com/users/twolfson/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/twolfson/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/twolfson/subscriptions",
        "organizations_url": "https://api.github.com/users/twolfson/orgs",
        "repos_url": "https://api.github.com/users/twolfson/repos",
        "events_url": "https://api.github.com/users/twolfson/events{/privacy}",
        "received_events_url": "https://api.github.com/users/twolfson/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 13,
    "created_at": "2015-10-30T19:57:04Z",
    "updated_at": "2017-04-22T19:54:39Z",
    "closed_at": "2017-04-22T19:54:39Z",
    "author_association": "NONE",
    "body": "We have been using `flask-session` for our sessions and noticed that there were no easy methods on `flask` or `flask-session` to handle session destruction/regeneration. These are practical as they aid in preventing session fixation attacks (e.g. when someone knows your session id and it doesn't get changed on login so they can reuse your session):\n\nhttps://www.owasp.org/index.php/Session_fixation\n\nWe saw that `flask-kvsession` has some logic for this:\n\nhttps://github.com/mbr/flask-kvsession/blob/0.6.2/flask_kvsession/__init__.py#L89-L124\n\nbut we were already invested into `flask-session` (added `sha256` signing support) that we decided to implement similar logic there as well:\n\nhttps://github.com/fengsp/flask-session/pull/27\n\nHowever, I'm not sure that's the ideal interface. I think the final product would look something more like\n\n``` python\nflask.session.destroy()\nflask.session.regenerate()\n```\n\nwhich in turn call `flask.session_interface.destroy_session(self, app, session)` and `flask.session_interface.regenerate_session(self, app, session)`.\n\nWhat are your thoughts on this?\n",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/152784153",
            "html_url": "https://github.com/pallets/flask/issues/1600#issuecomment-152784153",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1600",
            "id": 152784153,
            "node_id": "MDEyOklzc3VlQ29tbWVudDE1Mjc4NDE1Mw==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-11-01T00:59:12Z",
            "updated_at": "2015-11-01T00:59:12Z",
            "author_association": "MEMBER",
            "body": "This seems to be specific to session interfaces that need a session id, and those two examples you gave seem to be handling it already.  What do we gain by adding this to Flask?  The default session doesn't use a session id, and can be wiped with `session.clear()`.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/152785144",
            "html_url": "https://github.com/pallets/flask/issues/1600#issuecomment-152785144",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1600",
            "id": 152785144,
            "node_id": "MDEyOklzc3VlQ29tbWVudDE1Mjc4NTE0NA==",
            "user": {
                "login": "twolfson",
                "id": 902488,
                "node_id": "MDQ6VXNlcjkwMjQ4OA==",
                "avatar_url": "https://avatars3.githubusercontent.com/u/902488?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/twolfson",
                "html_url": "https://github.com/twolfson",
                "followers_url": "https://api.github.com/users/twolfson/followers",
                "following_url": "https://api.github.com/users/twolfson/following{/other_user}",
                "gists_url": "https://api.github.com/users/twolfson/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/twolfson/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/twolfson/subscriptions",
                "organizations_url": "https://api.github.com/users/twolfson/orgs",
                "repos_url": "https://api.github.com/users/twolfson/repos",
                "events_url": "https://api.github.com/users/twolfson/events{/privacy}",
                "received_events_url": "https://api.github.com/users/twolfson/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-11-01T01:21:42Z",
            "updated_at": "2015-11-01T01:21:42Z",
            "author_association": "NONE",
            "body": "Ah, good point. I think the benefit of implementing it in Flask (even as `NotImplementedError`) would lead to more consistent APIs for sessions (e.g. everyone's already using `session_interface` and `session.clear()`). It feels like `session.destroy` and `session.regenerate` would be a natural extension.\n\nOn a side note, `session.clear` and `session.destroy` are similar but not the same. `clear` erases the contents of the session but still persists a cookie. `destroy` empties session contents, remove it from the store (if there is a non-cookie one), and delete the cookie entirely.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/152785818",
            "html_url": "https://github.com/pallets/flask/issues/1600#issuecomment-152785818",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1600",
            "id": 152785818,
            "node_id": "MDEyOklzc3VlQ29tbWVudDE1Mjc4NTgxOA==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-11-01T01:42:57Z",
            "updated_at": "2015-11-01T01:42:57Z",
            "author_association": "MEMBER",
            "body": "Removing the cookie doesn't actually seem to be part of the security, only clearing the data or changing the id matter.  The cookie _is_ removed if the dict is empty, so the subclass could just override `clear` to also clear the server side storage.  Regenerate just becomes \"change the value of the `id` key\", or \"remove the id, and let it be generated when `save_session` doesn't find it\".  I guess that could use a standard name.  I'm not sure about encouraging this though, it seems more secure to clear the session when logging in, and make sure anything that needs to persist for a user is persisted to the database, not the cookie.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/152787207",
            "html_url": "https://github.com/pallets/flask/issues/1600#issuecomment-152787207",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1600",
            "id": 152787207,
            "node_id": "MDEyOklzc3VlQ29tbWVudDE1Mjc4NzIwNw==",
            "user": {
                "login": "twolfson",
                "id": 902488,
                "node_id": "MDQ6VXNlcjkwMjQ4OA==",
                "avatar_url": "https://avatars3.githubusercontent.com/u/902488?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/twolfson",
                "html_url": "https://github.com/twolfson",
                "followers_url": "https://api.github.com/users/twolfson/followers",
                "following_url": "https://api.github.com/users/twolfson/following{/other_user}",
                "gists_url": "https://api.github.com/users/twolfson/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/twolfson/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/twolfson/subscriptions",
                "organizations_url": "https://api.github.com/users/twolfson/orgs",
                "repos_url": "https://api.github.com/users/twolfson/repos",
                "events_url": "https://api.github.com/users/twolfson/events{/privacy}",
                "received_events_url": "https://api.github.com/users/twolfson/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-11-01T02:09:39Z",
            "updated_at": "2015-11-01T02:09:39Z",
            "author_association": "NONE",
            "body": "In a session id context, regenerate does more than change the value of the `id` key. It also corresponding session data in the store.\n\nhttps://github.com/underdogio/flask-session/blob/52b3d16149d01db2642f04f9164a0b71789ba4a5/flask_session/sessions.py#L133-L142\n\nWe perform this so that if the session id and its HMAC are known by an attacker, then they cannot access anything about the old session as well (e.g. maybe there's a tracking id in it).\n- Attacker somehow knows visitor's session id (either by setting or snooping)\n- Visitor has session id ABCD\n- Upon login, visitor gets new session id GHIJ and we destroy old store data under ABCD\n- Attacker tries to make request with header `Cookie: session=ABCD` -- has no access to past session information before login\n- Visitor continues to use GHIJ session id until it expires or logout\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/152787354",
            "html_url": "https://github.com/pallets/flask/issues/1600#issuecomment-152787354",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1600",
            "id": 152787354,
            "node_id": "MDEyOklzc3VlQ29tbWVudDE1Mjc4NzM1NA==",
            "user": {
                "login": "twolfson",
                "id": 902488,
                "node_id": "MDQ6VXNlcjkwMjQ4OA==",
                "avatar_url": "https://avatars3.githubusercontent.com/u/902488?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/twolfson",
                "html_url": "https://github.com/twolfson",
                "followers_url": "https://api.github.com/users/twolfson/followers",
                "following_url": "https://api.github.com/users/twolfson/following{/other_user}",
                "gists_url": "https://api.github.com/users/twolfson/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/twolfson/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/twolfson/subscriptions",
                "organizations_url": "https://api.github.com/users/twolfson/orgs",
                "repos_url": "https://api.github.com/users/twolfson/repos",
                "events_url": "https://api.github.com/users/twolfson/events{/privacy}",
                "received_events_url": "https://api.github.com/users/twolfson/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-11-01T02:16:46Z",
            "updated_at": "2015-11-01T02:16:46Z",
            "author_association": "NONE",
            "body": "I feel like I should mention why I am opposed to using cookie based sessions (i.e. storing session as a cookie JSON blob).\n- It leaves sessions in user's control (e.g. I can't wipe invalidate a session without the user visiting the site)\n- If a user's session is compromised, we can't perform anything like a regeneration since typically user-specific data (e.g. user id) would be stored there. We could change server salt but that is a huge change for a single user session compromise\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/152841836",
            "html_url": "https://github.com/pallets/flask/issues/1600#issuecomment-152841836",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1600",
            "id": 152841836,
            "node_id": "MDEyOklzc3VlQ29tbWVudDE1Mjg0MTgzNg==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-11-01T16:29:13Z",
            "updated_at": "2015-11-01T16:30:38Z",
            "author_association": "MEMBER",
            "body": "OK, thanks for the detailed report.  I don't feel that I understand the issue enough to make a change.  If you'd be willing to create a PR including a short summary in the docs and a test case, I'd be happy to review it.\n\nI still vaguely feel like there's better solutions that don't require changes, such as basing the hash for a session id on a secret that can be changed for each user, or tracking a list of valid ids for each user, but I can't think of any strong arguments against this.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/152868625",
            "html_url": "https://github.com/pallets/flask/issues/1600#issuecomment-152868625",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1600",
            "id": 152868625,
            "node_id": "MDEyOklzc3VlQ29tbWVudDE1Mjg2ODYyNQ==",
            "user": {
                "login": "twolfson",
                "id": 902488,
                "node_id": "MDQ6VXNlcjkwMjQ4OA==",
                "avatar_url": "https://avatars3.githubusercontent.com/u/902488?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/twolfson",
                "html_url": "https://github.com/twolfson",
                "followers_url": "https://api.github.com/users/twolfson/followers",
                "following_url": "https://api.github.com/users/twolfson/following{/other_user}",
                "gists_url": "https://api.github.com/users/twolfson/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/twolfson/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/twolfson/subscriptions",
                "organizations_url": "https://api.github.com/users/twolfson/orgs",
                "repos_url": "https://api.github.com/users/twolfson/repos",
                "events_url": "https://api.github.com/users/twolfson/events{/privacy}",
                "received_events_url": "https://api.github.com/users/twolfson/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-11-01T21:57:07Z",
            "updated_at": "2015-11-01T21:57:07Z",
            "author_association": "NONE",
            "body": "Ah, damn =( Please re-review the OWASP page -- it should clarify the topic some more:\n\nhttps://www.owasp.org/index.php/Session_fixation\n\nI will create a PR in a bit. I guess I am so adamant about this because a framework should be forward thinking for users -- similar to how we have `app.secret_key` (e.g. a novice should feel safe/secure on all fronts).\n\nWith respect to changing the session id hash, people could use things like an IP address as part of the salt. But the generic salt will likely do the trick. Usually these compromises occur less from guessing via brute force (since rate limiting would block that) and more from somehow setting the session id (e.g. via a compromised subdomain which allows setting a `.domain.com` cookie).\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/152878743",
            "html_url": "https://github.com/pallets/flask/issues/1600#issuecomment-152878743",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1600",
            "id": 152878743,
            "node_id": "MDEyOklzc3VlQ29tbWVudDE1Mjg3ODc0Mw==",
            "user": {
                "login": "twolfson",
                "id": 902488,
                "node_id": "MDQ6VXNlcjkwMjQ4OA==",
                "avatar_url": "https://avatars3.githubusercontent.com/u/902488?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/twolfson",
                "html_url": "https://github.com/twolfson",
                "followers_url": "https://api.github.com/users/twolfson/followers",
                "following_url": "https://api.github.com/users/twolfson/following{/other_user}",
                "gists_url": "https://api.github.com/users/twolfson/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/twolfson/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/twolfson/subscriptions",
                "organizations_url": "https://api.github.com/users/twolfson/orgs",
                "repos_url": "https://api.github.com/users/twolfson/repos",
                "events_url": "https://api.github.com/users/twolfson/events{/privacy}",
                "received_events_url": "https://api.github.com/users/twolfson/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-11-01T23:54:31Z",
            "updated_at": "2015-11-01T23:54:31Z",
            "author_association": "NONE",
            "body": "Started on a PR and I see a few approaches but none seem appealing.\n- Update `SessionMixin` signature to accept `app` as a parameter during `__init__`\n  - This would allow us save `self.app` on the `session` and later have a `destroy` method call `self.app.destroy_session(self)`\n    - In turn `app.destroy_session` calls `self.session_interface.destroy_session(self, session)`\n  - `session.destroy()` would be how we invoke a `destroy`\n- Update `SessionMixin` signature to accept `session_interface` in its `__init__`\n  - Not possible since we need to pass `app` to `session_interface` so it has the proper config attrs\n- Define only `app.destroy_session(session)`\n  - Invokes `self.session_interface.destroy_session(self, session)`\n  - Works but seems verbose and not session oriented\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/152878783",
            "html_url": "https://github.com/pallets/flask/issues/1600#issuecomment-152878783",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1600",
            "id": 152878783,
            "node_id": "MDEyOklzc3VlQ29tbWVudDE1Mjg3ODc4Mw==",
            "user": {
                "login": "ThiefMaster",
                "id": 179599,
                "node_id": "MDQ6VXNlcjE3OTU5OQ==",
                "avatar_url": "https://avatars1.githubusercontent.com/u/179599?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/ThiefMaster",
                "html_url": "https://github.com/ThiefMaster",
                "followers_url": "https://api.github.com/users/ThiefMaster/followers",
                "following_url": "https://api.github.com/users/ThiefMaster/following{/other_user}",
                "gists_url": "https://api.github.com/users/ThiefMaster/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/ThiefMaster/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ThiefMaster/subscriptions",
                "organizations_url": "https://api.github.com/users/ThiefMaster/orgs",
                "repos_url": "https://api.github.com/users/ThiefMaster/repos",
                "events_url": "https://api.github.com/users/ThiefMaster/events{/privacy}",
                "received_events_url": "https://api.github.com/users/ThiefMaster/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-11-01T23:55:22Z",
            "updated_at": "2015-11-01T23:55:22Z",
            "author_association": "MEMBER",
            "body": "Why not use `current_app` if you need access to the  app from within the session class?\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/152879156",
            "html_url": "https://github.com/pallets/flask/issues/1600#issuecomment-152879156",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1600",
            "id": 152879156,
            "node_id": "MDEyOklzc3VlQ29tbWVudDE1Mjg3OTE1Ng==",
            "user": {
                "login": "twolfson",
                "id": 902488,
                "node_id": "MDQ6VXNlcjkwMjQ4OA==",
                "avatar_url": "https://avatars3.githubusercontent.com/u/902488?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/twolfson",
                "html_url": "https://github.com/twolfson",
                "followers_url": "https://api.github.com/users/twolfson/followers",
                "following_url": "https://api.github.com/users/twolfson/following{/other_user}",
                "gists_url": "https://api.github.com/users/twolfson/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/twolfson/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/twolfson/subscriptions",
                "organizations_url": "https://api.github.com/users/twolfson/orgs",
                "repos_url": "https://api.github.com/users/twolfson/repos",
                "events_url": "https://api.github.com/users/twolfson/events{/privacy}",
                "received_events_url": "https://api.github.com/users/twolfson/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-11-01T23:59:41Z",
            "updated_at": "2015-11-01T23:59:41Z",
            "author_association": "NONE",
            "body": "It might be a strawman but I think there's a reason that Flask has `app` as a parameter in `open_session`/`save_session`. My guess is to allow for multiple apps running side by side.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/152879340",
            "html_url": "https://github.com/pallets/flask/issues/1600#issuecomment-152879340",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1600",
            "id": 152879340,
            "node_id": "MDEyOklzc3VlQ29tbWVudDE1Mjg3OTM0MA==",
            "user": {
                "login": "ThiefMaster",
                "id": 179599,
                "node_id": "MDQ6VXNlcjE3OTU5OQ==",
                "avatar_url": "https://avatars1.githubusercontent.com/u/179599?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/ThiefMaster",
                "html_url": "https://github.com/ThiefMaster",
                "followers_url": "https://api.github.com/users/ThiefMaster/followers",
                "following_url": "https://api.github.com/users/ThiefMaster/following{/other_user}",
                "gists_url": "https://api.github.com/users/ThiefMaster/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/ThiefMaster/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ThiefMaster/subscriptions",
                "organizations_url": "https://api.github.com/users/ThiefMaster/orgs",
                "repos_url": "https://api.github.com/users/ThiefMaster/repos",
                "events_url": "https://api.github.com/users/ThiefMaster/events{/privacy}",
                "received_events_url": "https://api.github.com/users/ThiefMaster/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-11-02T00:02:50Z",
            "updated_at": "2015-11-02T00:02:50Z",
            "author_association": "MEMBER",
            "body": "True, maybe it can run outside an app context (or it's from the time where there was no app context but just a request context).\n\nAnyway, `self.app = ...` in `SessionMixin` seems dangerous. You might want to json-encode or pickle the session object and both would fail with a reference to the app (pickle might actually work, but then result in a mess when unpickling some old app object)\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/152880273",
            "html_url": "https://github.com/pallets/flask/issues/1600#issuecomment-152880273",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1600",
            "id": 152880273,
            "node_id": "MDEyOklzc3VlQ29tbWVudDE1Mjg4MDI3Mw==",
            "user": {
                "login": "twolfson",
                "id": 902488,
                "node_id": "MDQ6VXNlcjkwMjQ4OA==",
                "avatar_url": "https://avatars3.githubusercontent.com/u/902488?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/twolfson",
                "html_url": "https://github.com/twolfson",
                "followers_url": "https://api.github.com/users/twolfson/followers",
                "following_url": "https://api.github.com/users/twolfson/following{/other_user}",
                "gists_url": "https://api.github.com/users/twolfson/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/twolfson/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/twolfson/subscriptions",
                "organizations_url": "https://api.github.com/users/twolfson/orgs",
                "repos_url": "https://api.github.com/users/twolfson/repos",
                "events_url": "https://api.github.com/users/twolfson/events{/privacy}",
                "received_events_url": "https://api.github.com/users/twolfson/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-11-02T00:21:57Z",
            "updated_at": "2015-11-02T00:21:57Z",
            "author_association": "NONE",
            "body": "Ah, good point. JSON serialization seems fine but pickle is polluted.\n\n```\n# Output from `python` REPL\n>>> class MyDict(dict):\n...   def __init__(self):\n...     self.foo = 'bar'\n...     super(dict, self).__init__()\n... \n>>> \n>>> x = MyDict()\n>>> import json\n>>> json.dumps(x)\n'{}'\n>>> x['hello'] = 'world'\n>>> json.dumps(x)\n'{\"hello\": \"world\"}'\n>>> import pickle\n\"ccopy_reg\\n_reconstructor\\np0\\n(c__main__\\nMyDict\\np1\\nc__builtin__\\ndict\\np2\\n(dp3\\nS'hello'\\np4\\nS'world'\\np5\\nstp6\\nRp7\\n(dp8\\nS'foo'\\np9\\nS'bar'\\np10\\nsb.\"\n```\n\nI guess that forces us to always use:\n\n``` python\napp.regenerate_session(session)\napp.destroy_session(session)\n```\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/152884446",
            "html_url": "https://github.com/pallets/flask/issues/1600#issuecomment-152884446",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1600",
            "id": 152884446,
            "node_id": "MDEyOklzc3VlQ29tbWVudDE1Mjg4NDQ0Ng==",
            "user": {
                "login": "twolfson",
                "id": 902488,
                "node_id": "MDQ6VXNlcjkwMjQ4OA==",
                "avatar_url": "https://avatars3.githubusercontent.com/u/902488?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/twolfson",
                "html_url": "https://github.com/twolfson",
                "followers_url": "https://api.github.com/users/twolfson/followers",
                "following_url": "https://api.github.com/users/twolfson/following{/other_user}",
                "gists_url": "https://api.github.com/users/twolfson/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/twolfson/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/twolfson/subscriptions",
                "organizations_url": "https://api.github.com/users/twolfson/orgs",
                "repos_url": "https://api.github.com/users/twolfson/repos",
                "events_url": "https://api.github.com/users/twolfson/events{/privacy}",
                "received_events_url": "https://api.github.com/users/twolfson/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-11-02T00:58:42Z",
            "updated_at": "2015-11-02T00:58:42Z",
            "author_association": "NONE",
            "body": "@davidism I have opened up #1603 as requested\n"
        }
    ]
}