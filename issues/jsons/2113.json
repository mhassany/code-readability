{
    "url": "https://api.github.com/repos/pallets/flask/issues/2113",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/2113/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/2113/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/2113/events",
    "html_url": "https://github.com/pallets/flask/issues/2113",
    "id": 196217363,
    "node_id": "MDU6SXNzdWUxOTYyMTczNjM=",
    "number": 2113,
    "title": "`flask run` not processing SERVER_NAME for port binding",
    "user": {
        "login": "joelhed",
        "id": 16370842,
        "node_id": "MDQ6VXNlcjE2MzcwODQy",
        "avatar_url": "https://avatars3.githubusercontent.com/u/16370842?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/joelhed",
        "html_url": "https://github.com/joelhed",
        "followers_url": "https://api.github.com/users/joelhed/followers",
        "following_url": "https://api.github.com/users/joelhed/following{/other_user}",
        "gists_url": "https://api.github.com/users/joelhed/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/joelhed/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/joelhed/subscriptions",
        "organizations_url": "https://api.github.com/users/joelhed/orgs",
        "repos_url": "https://api.github.com/users/joelhed/repos",
        "events_url": "https://api.github.com/users/joelhed/events{/privacy}",
        "received_events_url": "https://api.github.com/users/joelhed/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 5,
    "created_at": "2016-12-17T11:28:46Z",
    "updated_at": "2017-10-06T18:48:11Z",
    "closed_at": "2017-05-29T19:04:53Z",
    "author_association": "NONE",
    "body": "When running a development server, using `flask run`, with the `SERVER_NAME` config variable set to a port number other than 5000, the server still defaults to 5000. Looking into the code, it seems that [`flask.cli.run_command`](https://github.com/pallets/flask/blob/7fca843b5f361e79534bd18c4cd20f3f44094337/flask/cli.py#L394) calls `werkzeug.serving.run_simple` directly, without passing through [`Flask.run`](https://github.com/pallets/flask/blob/7fca843b5f361e79534bd18c4cd20f3f44094337/flask/app.py#L782), where the code for processing the server name resides.\r\n\r\nThis is using python 3.5, and Werkzeug 0.11.11",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/267801805",
            "html_url": "https://github.com/pallets/flask/issues/2113#issuecomment-267801805",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2113",
            "id": 267801805,
            "node_id": "MDEyOklzc3VlQ29tbWVudDI2NzgwMTgwNQ==",
            "user": {
                "login": "keysona",
                "id": 12066443,
                "node_id": "MDQ6VXNlcjEyMDY2NDQz",
                "avatar_url": "https://avatars2.githubusercontent.com/u/12066443?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/keysona",
                "html_url": "https://github.com/keysona",
                "followers_url": "https://api.github.com/users/keysona/followers",
                "following_url": "https://api.github.com/users/keysona/following{/other_user}",
                "gists_url": "https://api.github.com/users/keysona/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/keysona/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/keysona/subscriptions",
                "organizations_url": "https://api.github.com/users/keysona/orgs",
                "repos_url": "https://api.github.com/users/keysona/repos",
                "events_url": "https://api.github.com/users/keysona/events{/privacy}",
                "received_events_url": "https://api.github.com/users/keysona/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2016-12-18T03:50:29Z",
            "updated_at": "2016-12-18T03:50:29Z",
            "author_association": "NONE",
            "body": "Hi!\r\n\r\nIn app.py, the ```run()``` method.\r\n\r\n```\r\ndef run(self, host=None, port=None, debug=None, **options):\r\n        \"\"\"Runs the application on a local development server.\r\n       ....\r\n       from werkzeug.serving import run_simple\r\n        if host is None:\r\n            host = '127.0.0.1'\r\n        if port is None:\r\n            server_name = self.config['SERVER_NAME']\r\n            if server_name and ':' in server_name:\r\n                port = int(server_name.rsplit(':', 1)[1])\r\n            else:\r\n                port = 5000\r\n        if debug is not None:\r\n            self.debug = bool(debug)\r\n        options.setdefault('use_reloader', self.debug)\r\n        options.setdefault('use_debugger', self.debug)\r\n        try:\r\n            run_simple(host, port, self, **options)\r\n        finally:\r\n            # reset the first request information if the development server\r\n            # reset normally.  This makes it possible to restart the server\r\n            # without reloader and that stuff from an interactive shell.\r\n            self._got_first_request = False\r\n```"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/267828181",
            "html_url": "https://github.com/pallets/flask/issues/2113#issuecomment-267828181",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2113",
            "id": 267828181,
            "node_id": "MDEyOklzc3VlQ29tbWVudDI2NzgyODE4MQ==",
            "user": {
                "login": "joelhed",
                "id": 16370842,
                "node_id": "MDQ6VXNlcjE2MzcwODQy",
                "avatar_url": "https://avatars3.githubusercontent.com/u/16370842?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/joelhed",
                "html_url": "https://github.com/joelhed",
                "followers_url": "https://api.github.com/users/joelhed/followers",
                "following_url": "https://api.github.com/users/joelhed/following{/other_user}",
                "gists_url": "https://api.github.com/users/joelhed/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/joelhed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/joelhed/subscriptions",
                "organizations_url": "https://api.github.com/users/joelhed/orgs",
                "repos_url": "https://api.github.com/users/joelhed/repos",
                "events_url": "https://api.github.com/users/joelhed/events{/privacy}",
                "received_events_url": "https://api.github.com/users/joelhed/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2016-12-18T15:41:16Z",
            "updated_at": "2016-12-18T15:41:16Z",
            "author_association": "NONE",
            "body": "Exactly! Wouldn't it be great if the command line interface, i.e. `run_command` in cli.py, called that method, so that `SERVER_NAME`gets parsed, instead of calling werkzeug's `run_simple()`, and skipping it entirely?\r\n\r\nSimply replacing the function call might be difficult, due to the auto reloading problem, so I'd suggest extracting port assignment to a function `get_port`:\r\n``` python\r\ndef get_port(app):\r\n    server_name = app.config['SERVER_NAME']\r\n    if server_name and ':' in server_name:\r\n        return int(server_name.rsplit(':', 1)[1])\r\n    else:\r\n        return 5000\r\n```\r\nUsing it seems rather obvious.\r\n\r\nFor reference, `run_command` in cli.py:\r\n``` python\r\n@click.command('run', short_help='Runs a development server.')\r\n@click.option('--host', '-h', default='127.0.0.1',\r\n              help='The interface to bind to.')\r\n@click.option('--port', '-p', default=5000,\r\n              help='The port to bind to.')\r\n@click.option('--reload/--no-reload', default=None,\r\n              help='Enable or disable the reloader.  By default the reloader '\r\n              'is active if debug is enabled.')\r\n@click.option('--debugger/--no-debugger', default=None,\r\n              help='Enable or disable the debugger.  By default the debugger '\r\n              'is active if debug is enabled.')\r\n@click.option('--eager-loading/--lazy-loader', default=None,\r\n              help='Enable or disable eager loading.  By default eager '\r\n              'loading is enabled if the reloader is disabled.')\r\n@click.option('--with-threads/--without-threads', default=False,\r\n              help='Enable or disable multithreading.')\r\n@pass_script_info\r\ndef run_command(info, host, port, reload, debugger, eager_loading,\r\n                with_threads):\r\n    \"\"\"Runs a local development server for the Flask application.\r\n    ...\r\n    \"\"\"\r\n    from werkzeug.serving import run_simple\r\n\r\n    debug = get_debug_flag()\r\n    if reload is None:\r\n        reload = bool(debug)\r\n    if debugger is None:\r\n        debugger = bool(debug)\r\n    if eager_loading is None:\r\n        eager_loading = not reload\r\n\r\n    app = DispatchingApp(info.load_app, use_eager_loading=eager_loading)\r\n\r\n    # Extra startup messages.  This depends a bit on Werkzeug internals to\r\n    # not double execute when the reloader kicks in.\r\n    if os.environ.get('WERKZEUG_RUN_MAIN') != 'true':\r\n        # If we have an import path we can print it out now which can help\r\n        # people understand what's being served.  If we do not have an\r\n        # import path because the app was loaded through a callback then\r\n        # we won't print anything.\r\n        if info.app_import_path is not None:\r\n            print(' * Serving Flask app \"%s\"' % info.app_import_path)\r\n        if debug is not None:\r\n            print(' * Forcing debug mode %s' % (debug and 'on' or 'off'))\r\n\r\n    run_simple(host, port, app, use_reloader=reload,\r\n               use_debugger=debugger, threaded=with_threads)\r\n```"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/268014481",
            "html_url": "https://github.com/pallets/flask/issues/2113#issuecomment-268014481",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2113",
            "id": 268014481,
            "node_id": "MDEyOklzc3VlQ29tbWVudDI2ODAxNDQ4MQ==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2016-12-19T16:47:30Z",
            "updated_at": "2016-12-19T16:47:30Z",
            "author_association": "MEMBER",
            "body": "It's not possible with the current implementation. `DispatchingApp` may not load the Flask app immediately, so there's no guarantee that the app and its config is available when starting the server. This is so that errors during app setup are caught by the debugger instead of crashing the server."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/334818018",
            "html_url": "https://github.com/pallets/flask/issues/2113#issuecomment-334818018",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2113",
            "id": 334818018,
            "node_id": "MDEyOklzc3VlQ29tbWVudDMzNDgxODAxOA==",
            "user": {
                "login": "lindes",
                "id": 223586,
                "node_id": "MDQ6VXNlcjIyMzU4Ng==",
                "avatar_url": "https://avatars1.githubusercontent.com/u/223586?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/lindes",
                "html_url": "https://github.com/lindes",
                "followers_url": "https://api.github.com/users/lindes/followers",
                "following_url": "https://api.github.com/users/lindes/following{/other_user}",
                "gists_url": "https://api.github.com/users/lindes/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/lindes/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lindes/subscriptions",
                "organizations_url": "https://api.github.com/users/lindes/orgs",
                "repos_url": "https://api.github.com/users/lindes/repos",
                "events_url": "https://api.github.com/users/lindes/events{/privacy}",
                "received_events_url": "https://api.github.com/users/lindes/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2017-10-06T17:22:47Z",
            "updated_at": "2017-10-06T17:22:47Z",
            "author_association": "NONE",
            "body": "Is there a reason that in `run_command`, after `app = DispatchingApp(...)`, do something like:\r\n\r\n    if app._app is not None:\r\n        # something similar to the sn_host code in app.py/run\r\n        # (or perhaps add a method that they both can call)\r\n\r\n?\r\n\r\nI ask because I find it really quite disconcerting that `python $FLASK_APP` works (with an `app.run()` within a `__name__ == '__main__'` block), while `flask run` doesn't.  (That is to say, this seems to me to violate the \"[principle of least astonishment](https://en.wikipedia.org/wiki/Principle_of_least_astonishment)\")\r\n\r\nCould this be reconsidered, and/or would a pull request be considered?  Thanks."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/334839275",
            "html_url": "https://github.com/pallets/flask/issues/2113#issuecomment-334839275",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2113",
            "id": 334839275,
            "node_id": "MDEyOklzc3VlQ29tbWVudDMzNDgzOTI3NQ==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2017-10-06T18:48:11Z",
            "updated_at": "2017-10-06T18:48:11Z",
            "author_association": "MEMBER",
            "body": "Because then the behavior would be different if the app loaded successfully or not. Just don't rely on the behavior at all, then both behave equivalently. The config parsing was just a hidden convenience anyway."
        }
    ]
}