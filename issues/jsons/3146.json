{
    "url": "https://api.github.com/repos/pallets/flask/issues/3146",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/3146/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/3146/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/3146/events",
    "html_url": "https://github.com/pallets/flask/issues/3146",
    "id": 430499486,
    "node_id": "MDU6SXNzdWU0MzA0OTk0ODY=",
    "number": 3146,
    "title": "Incompatible with JSON",
    "user": {
        "login": "CTSDOxF",
        "id": 39660309,
        "node_id": "MDQ6VXNlcjM5NjYwMzA5",
        "avatar_url": "https://avatars0.githubusercontent.com/u/39660309?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/CTSDOxF",
        "html_url": "https://github.com/CTSDOxF",
        "followers_url": "https://api.github.com/users/CTSDOxF/followers",
        "following_url": "https://api.github.com/users/CTSDOxF/following{/other_user}",
        "gists_url": "https://api.github.com/users/CTSDOxF/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/CTSDOxF/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/CTSDOxF/subscriptions",
        "organizations_url": "https://api.github.com/users/CTSDOxF/orgs",
        "repos_url": "https://api.github.com/users/CTSDOxF/repos",
        "events_url": "https://api.github.com/users/CTSDOxF/events{/privacy}",
        "received_events_url": "https://api.github.com/users/CTSDOxF/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2019-04-08T14:57:38Z",
    "updated_at": "2019-04-08T15:07:23Z",
    "closed_at": "2019-04-08T15:07:23Z",
    "author_association": "NONE",
    "body": "### Expected Behavior\r\n\r\nMy code SHOULD dump a json object into the file using json.dump()\r\n\r\nkeep_alive.py\r\n\r\n```python\r\nfrom flask import Flask\r\nfrom threading import Thread\r\n\r\napp = Flask('')\r\n\r\n@app.route('/')\r\ndef main():\r\n    return \"Your bot is alive!\"\r\n\r\ndef run():\r\n    app.run(host=\"0.0.0.0\", port=8080)\r\n\r\ndef keep_alive():\r\n    server = Thread(target=run)\r\n    server.start()\r\n```\r\n\r\nmain.py\r\n\r\n```python\r\nimport discord, os, random, base64, json\r\n\r\n\"\"\"from dotenv import DotEnv\r\n\r\ndotenv = DotEnv()\"\"\"\r\n\r\nimport time\r\n\r\n\r\n\r\n\r\nTOKEN = os.getenv('token')\r\nADMIN_ID = os.getenv('admin')\r\n\r\nCURRENCY_DATA = json.load(open(\"text.json\", 'r'))\r\n\r\nyee = discord.Client()\r\n\r\n@yee.event\r\nasync def on_ready():\r\n  await yee.send_message(yee.get_channel('558024841572253706'), \"Ready\")\r\n  await yee.change_presence(game=discord.Game(name=\"use b!help for help!\"))\r\n  \r\nmessage_log = []\r\n\r\n@yee.event\r\nasync def on_message(message):\r\n  if message.author == yee.user:\r\n    return\r\n  \r\n  if message.content.startswith('b!hello'):\r\n    msg = \"Hello, {0.author.mention}\".format(message)\r\n    await yee.send_message(message.channel, msg)\r\n    return\r\n  \r\n  if message.content.startswith('b!invite'):\r\n    msg = \"{0.author.mention} Go to https://discordapp.com/oauth2/authorize?client_id=555115104769933383&scope=bot\".format(message)\r\n    await yee.send_message(message.channel, msg)\r\n    return\r\n  \r\n  if message.content.startswith('b!help'):\r\n    msg = \"{0.author.mention}\\n```\\nb!hello - say hello to the bot!\\nb!invite - invite me to your server!\\nb!help - You just used this command!\".format(message)\r\n    msg += \"\\nb!luckynumber - gives you a lucky number!\\nb!bal - look at how many testcoin you have\\nb!shop - look at the various money genorators that you can/can't buy!\\n\"\r\n    msg += \"b!buy <x> - use to buy generator with a purchase ID of x (remove the brackets)\\n```\"\r\n    await yee.send_message(message.channel, msg)\r\n    return\r\n  \r\n  if message.content.startswith('b!luckynumber'):\r\n    msg = \"{0.author.mention} Your lucky number is \".format(message) + str(random.randint(0,9999))\r\n    await yee.send_message(message.channel, msg)\r\n    return\r\n\r\n  if message.content.startswith('b!bal'):\r\n    if str(message.author.id) not in CURRENCY_DATA[\"Users\"]:\r\n      CURRENCY_DATA[\"Money\"][str(message.author.id)] = 0.0001\r\n      CURRENCY_DATA[\"Updates\"][str(message.author.id)] = time.time()\r\n      CURRENCY_DATA[\"Money Inventory\"][str(message.author.id)] = [0,0,0]\r\n      CURRENCY_DATA[\"Users\"].append(str(message.author.id))\r\n      CURRENCY_DATA[\"Inventory\"][str(message.author.id)] = []\r\n    for i in range(len(CURRENCY_DATA[\"Money Generators\"])):\r\n        CURRENCY_DATA[\"Money\"][str(message.author.id)] += round(CURRENCY_DATA[\"Money Inventory\"][str(message.author.id)][i] * CURRENCY_DATA[\"Money Generators\"][i][\"CPS\"] * (time.time() - CURRENCY_DATA[\"Updates\"][str(message.author.id)]), 5)\r\n    CURRENCY_DATA[\"Updates\"][str(message.author.id)] = time.time()\r\n    CURRENCY_DATA[\"Money\"][str(message.author.id)] = round(CURRENCY_DATA[\"Money\"][str(message.author.id)], 5)\r\n    msg = \"{0.author.mention}, You have {1} TestCoin.\".format(message, CURRENCY_DATA[\"Money\"][str(message.author.id)])\r\n    await yee.send_message(message.channel, msg)\r\n    json.dump(CURRENCY_DATA, open('text.json','w'))\r\n    return\r\n\r\n  if message.content.startswith('b!shop'):\r\n      if str(message.author.id) not in CURRENCY_DATA[\"Users\"]:\r\n        CURRENCY_DATA[\"Money\"][str(message.author.id)] = 0.0001\r\n        CURRENCY_DATA[\"Updates\"][str(message.author.id)] = time.time()\r\n        CURRENCY_DATA[\"Money Inventory\"][str(message.author.id)] = [0,0,0]\r\n        CURRENCY_DATA[\"Users\"].append(str(message.author.id))\r\n        CURRENCY_DATA[\"Inventory\"][str(message.author.id)] = []\r\n      for i in range(len(CURRENCY_DATA[\"Money Generators\"])):\r\n        CURRENCY_DATA[\"Money\"][str(message.author.id)] += round(CURRENCY_DATA[\"Money Inventory\"][str(message.author.id)][i] * CURRENCY_DATA[\"Money Generators\"][i][\"CPS\"] * (time.time() - CURRENCY_DATA[\"Updates\"][str(message.author.id)]), 5)\r\n      CURRENCY_DATA[\"Updates\"][str(message.author.id)] = time.time()\r\n      msg = \"{0.author.mention}, You have {1} TestCoin.\".format(message, CURRENCY_DATA[\"Money\"][str(message.author.id)])\r\n      msg += '\\n```\\n'\r\n      for i in CURRENCY_DATA[\"Money Generators\"]:\r\n          msg += i['name'] + ' $'\r\n          msg += str(i['increase_amount'] * (1 + CURRENCY_DATA[\"Money Inventory\"][str(message.author.id)][i['id']]) * i['base_price']) + '\\n'\r\n          msg += i['info'] + '\\n'\r\n          msg += 'Purchase code: ' + str(i['id']) + '\\n\\n'\r\n      msg += '\\n```'\r\n      await yee.send_message(message.channel, msg)\r\n      json.dump(CURRENCY_DATA, open('text.json', 'w'))\r\n      return\r\n  \r\n  if message.content.startswith('b!buy'):\r\n      for i in range(len(CURRENCY_DATA[\"Money Generators\"])):\r\n        CURRENCY_DATA[\"Money\"][str(message.author.id)] += round((1 + CURRENCY_DATA[\"Money Inventory\"][str(message.author.id)][i]) * CURRENCY_DATA[\"Money Generators\"][i][\"CPS\"] * (time.time() - CURRENCY_DATA[\"Updates\"][str(message.author.id)]), 5)\r\n      CURRENCY_DATA[\"Updates\"][str(message.author.id)] = time.time()\r\n      buy_id = message.content[5:]\r\n      try:\r\n          try:\r\n              adjusted_cost = CURRENCY_DATA[\"Money Generators\"][int(buy_id)][\"base_price\"] * (CURRENCY_DATA[\"Money Generators\"][int(buy_id)]['increase_amount'] * CURRENCY_DATA[\"Money Inventory\"][str(message.author.id)][int(buy_id)])\r\n          except ValueError:\r\n              await yee.send_message(message.channel, \"The value of the generator you are trying to buy could not be converted. blease try again using the purchase code of the generator you want to buy.\")\r\n              return\r\n      except IndexError:\r\n          await yee.send_message(message.channel, \"The purchase id is not valid\")\r\n          return\r\n      if CURRENCY_DATA[\"Money\"][str(message.author.id)] >= adjusted_cost:\r\n          CURRENCY_DATA[\"Money\"][str(message.author.id)] -= adjusted_cost\r\n          CURRENCY_DATA[\"Money Inventory\"][str(message.author.id)][int(buy_id)] += 1\r\n          await yee.send_message(message.channel, \"Purchase successful.\")\r\n          return\r\n      else:\r\n          await yee.send_message(message.channel, \"Error, not enough funds\")\r\n          return\r\n\r\n  if message.content.startswith('b!inventory'):\r\n    if str(message.author.id) not in CURRENCY_DATA[\"Users\"]:\r\n      CURRENCY_DATA[\"Money\"][str(message.author.id)] = 0.0001\r\n      CURRENCY_DATA[\"Updates\"][str(message.author.id)] = time.time()\r\n      CURRENCY_DATA[\"Money Inventory\"][str(message.author.id)] = [0,0,0]\r\n      CURRENCY_DATA[\"Users\"].append(str(message.author.id))\r\n      CURRENCY_DATA[\"Inventory\"][str(message.author.id)] = []\r\n    msg = \"```\\n\"\r\n    for i in CURRENCY_DATA[\"Inventory\"][str(message.author.id)]:\r\n      msg += CURRENCY_DATA[\"Items\"][i[\"id\"]][\"Name\"] + ' ' + str(i[\"quantity\"]) + '\\n'\r\n    msg += '```'\r\n    await yee.send_message(message.channel, msg)\r\n    json.dump(CURRENCY_DATA, open('text.json','w'))\r\n    return\r\n\r\n  if message.content.startswith('b@') and message.author.id == ADMIN_ID:\r\n    if message.content.startswith('b@dumpchannels'):\r\n      msg = '```\\n'\r\n      channels = yee.get_all_channels()\r\n      a = 0\r\n      for i in channels:\r\n        msg += str(i.name).ljust(25,'-') + str(i.id).ljust(25,'-') + str(i.server) + '\\n'\r\n        a += 1\r\n        if a > 19:\r\n          await yee.send_message(message.channel, msg+'```')\r\n          a = 0\r\n          msg = '```\\n'\r\n      msg += '```'\r\n      print(msg)\r\n      await yee.send_message(message.channel, msg)\r\n      return\r\n  else:\r\n    if message.content.startswith('b@'):\r\n      await yee.send_message(message.channel, message.author.mention + ', you do not have access to this command!')\r\n\r\nyee.run(TOKEN)\r\n\r\nimport keep_alive\r\nkeep_alive.keep_alive() \r\n```\r\n\r\n### Actual Behavior\r\n\r\nThis code does not update the JSON file\r\n\r\nNo errors\r\n\r\n### Environment\r\n\r\n* Python version: 3.6\r\n* Flask version: 0.12\r\n* Werkzeug version:N/A\r\n",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/480871937",
            "html_url": "https://github.com/pallets/flask/issues/3146#issuecomment-480871937",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/3146",
            "id": 480871937,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MDg3MTkzNw==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2019-04-08T15:07:23Z",
            "updated_at": "2019-04-08T15:07:23Z",
            "author_association": "MEMBER",
            "body": "Please use Stack Overflow for questions about your own code. This tracker is for issues related to the project itself. Be sure to include a [minimal, complete, and verifiable example](https://stackoverflow.com/help/mcve)."
        }
    ]
}