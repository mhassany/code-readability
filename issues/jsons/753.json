{
    "url": "https://api.github.com/repos/pallets/flask/issues/753",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/753/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/753/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/753/events",
    "html_url": "https://github.com/pallets/flask/pull/753",
    "id": 14975067,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NjAzNTYwNw==",
    "number": 753,
    "title": "It does not instantiate MethodView by per request",
    "user": {
        "login": "CMGS",
        "id": 506216,
        "node_id": "MDQ6VXNlcjUwNjIxNg==",
        "avatar_url": "https://avatars0.githubusercontent.com/u/506216?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/CMGS",
        "html_url": "https://github.com/CMGS",
        "followers_url": "https://api.github.com/users/CMGS/followers",
        "following_url": "https://api.github.com/users/CMGS/following{/other_user}",
        "gists_url": "https://api.github.com/users/CMGS/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/CMGS/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/CMGS/subscriptions",
        "organizations_url": "https://api.github.com/users/CMGS/orgs",
        "repos_url": "https://api.github.com/users/CMGS/repos",
        "events_url": "https://api.github.com/users/CMGS/events{/privacy}",
        "received_events_url": "https://api.github.com/users/CMGS/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 3,
    "created_at": "2013-05-31T03:52:52Z",
    "updated_at": "2014-06-15T16:13:31Z",
    "closed_at": "2013-05-31T23:13:35Z",
    "author_association": "NONE",
    "pull_request": {
        "url": "https://api.github.com/repos/pallets/flask/pulls/753",
        "html_url": "https://github.com/pallets/flask/pull/753",
        "diff_url": "https://github.com/pallets/flask/pull/753.diff",
        "patch_url": "https://github.com/pallets/flask/pull/753.patch"
    },
    "body": "in flask/views.py I find the following code will cause request handle to be less efficient. I think that class_args and class kwargs will not be changed after app started, so bind a instance with view function to handle requests will be safe. However,  programmers should not modify the instance status.\n\n``` python\n    @classmethod\n    def as_view(cls, name, *class_args, **class_kwargs):\n        \"\"\"Converts the class into an actual view function that can be used\n        with the routing system.  Internally this generates a function on the\n        fly which will instantiate the :class:`View` on each request and call\n        the :meth:`dispatch_request` method on it.\n\n        The arguments passed to :meth:`as_view` are forwarded to the\n        constructor of the class.\n        \"\"\"\n        def view(*args, **kwargs):\n            self = view.view_class(*class_args, **class_kwargs)\n            return self.dispatch_request(*args, **kwargs)\n\n        if cls.decorators:\n            view.__name__ = name\n            view.__module__ = cls.__module__\n            for decorator in cls.decorators:\n                view = decorator(view)\n\n        # we attach the view class to the view function for two reasons:\n        # first of all it allows us to easily figure out what class-based\n        # view this thing came from, secondly it's also used for instantiating\n        # the view class so you can actually replace it with something else\n        # for testing purposes and debugging.\n        view.view_class = cls\n        view.__name__ = name\n        view.__doc__ = cls.__doc__\n        view.__module__ = cls.__module__\n        view.methods = cls.methods\n        return view\n```\n",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/18736774",
            "html_url": "https://github.com/pallets/flask/pull/753#issuecomment-18736774",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/753",
            "id": 18736774,
            "node_id": "MDEyOklzc3VlQ29tbWVudDE4NzM2Nzc0",
            "user": {
                "login": "DasIch",
                "id": 182316,
                "node_id": "MDQ6VXNlcjE4MjMxNg==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/182316?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/DasIch",
                "html_url": "https://github.com/DasIch",
                "followers_url": "https://api.github.com/users/DasIch/followers",
                "following_url": "https://api.github.com/users/DasIch/following{/other_user}",
                "gists_url": "https://api.github.com/users/DasIch/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/DasIch/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/DasIch/subscriptions",
                "organizations_url": "https://api.github.com/users/DasIch/orgs",
                "repos_url": "https://api.github.com/users/DasIch/repos",
                "events_url": "https://api.github.com/users/DasIch/events{/privacy}",
                "received_events_url": "https://api.github.com/users/DasIch/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2013-05-31T10:13:01Z",
            "updated_at": "2013-05-31T10:13:01Z",
            "author_association": "CONTRIBUTOR",
            "body": "It is obviously less efficient but this is clearly by design. Furthermore it remains unclear how inefficient the current state is in comparision to your change.\n\nYour proposed change changes the API, breaks backwards compatiblity and possibly breaks use cases without providing an alternative.\n\nI don't think this is at all reasonable.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/18756249",
            "html_url": "https://github.com/pallets/flask/pull/753#issuecomment-18756249",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/753",
            "id": 18756249,
            "node_id": "MDEyOklzc3VlQ29tbWVudDE4NzU2MjQ5",
            "user": {
                "login": "CMGS",
                "id": 506216,
                "node_id": "MDQ6VXNlcjUwNjIxNg==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/506216?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/CMGS",
                "html_url": "https://github.com/CMGS",
                "followers_url": "https://api.github.com/users/CMGS/followers",
                "following_url": "https://api.github.com/users/CMGS/following{/other_user}",
                "gists_url": "https://api.github.com/users/CMGS/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/CMGS/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/CMGS/subscriptions",
                "organizations_url": "https://api.github.com/users/CMGS/orgs",
                "repos_url": "https://api.github.com/users/CMGS/repos",
                "events_url": "https://api.github.com/users/CMGS/events{/privacy}",
                "received_events_url": "https://api.github.com/users/CMGS/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2013-05-31T16:35:58Z",
            "updated_at": "2013-05-31T16:37:13Z",
            "author_association": "NONE",
            "body": "simple test\uff0c gevent 1.0rc1 gunicorn 0.17.4 MBP 990\n\n``` python\nimport flask\nimport flask.views\n\napp = flask.Flask(__name__)\n\nclass Index(flask.views.MethodView):\n    def get(self):\n        return 'GET'\napp.add_url_rule('/', view_func=Index.as_view('index'))\n```\n\nwith flask master version\n\n``` bash\n~workspace/sources/test\u276f http_load -parallel 100 -fetches 100 urls\n100 fetches, 100 max parallel, 300 bytes, in 0.125155 seconds\n3 mean bytes/connection\n799.009 fetches/sec, 2397.03 bytes/sec\nmsecs/connect: 0.49164 mean, 1.355 max, 0.099 min\nmsecs/first-response: 64.9192 mean, 117.952 max, 12.601 min\nHTTP response codes:\n  code 200 -- 100\n```\n\nwith my version\n\n``` bash\n~workspace/sources/test\u276f http_load -parallel 100 -fetches 100 urls\n100 fetches, 100 max parallel, 300 bytes, in 0.106286 seconds\n3 mean bytes/connection\n940.858 fetches/sec, 2822.57 bytes/sec\nmsecs/connect: 0.62036 mean, 2.486 max, 0.085 min\nmsecs/first-response: 56.6497 mean, 98.807 max, 12.503 min\nHTTP response codes:\n  code 200 -- 100\n```\n\n150rps increase, and you will find the mem cost decrease at same time ( the more parallel requests coming the more mem cost the master version does cause it will create instance by per request ).\n\nLet's test a \"big\" method view.\n\n``` python\nimport flask\nimport flask.views\n\napp = flask.Flask(__name__)\n\nclass Index(flask.views.MethodView):\n    def __init__(self):\n        self.big = '1'*10000000\n\n    def get(self):\n        return 'GET'\n\napp.add_url_rule('/', view_func=Index.as_view('index'))\n```\n\nmaster version\n\n``` bash\n~workspace/sources/test\u276f http_load -parallel 100 -fetches 100 urls\n100 fetches, 100 max parallel, 300 bytes, in 0.638017 seconds\n3 mean bytes/connection\n156.736 fetches/sec, 470.207 bytes/sec\nmsecs/connect: 0.45474 mean, 1.892 max, 0.083 min\nmsecs/first-response: 344.727 mean, 627.586 max, 34.353 min\nHTTP response codes:\n  code 200 -- 100\n```\n\nmy version\n\n``` bash\n~workspace/sources/test\u276f http_load -parallel 100 -fetches 100 urls\n100 fetches, 100 max parallel, 300 bytes, in 0.110485 seconds\n3 mean bytes/connection\n905.1 fetches/sec, 2715.3 bytes/sec\nmsecs/connect: 0.71424 mean, 1.982 max, 0.182 min\nmsecs/first-response: 59.5843 mean, 104.922 max, 13.051 min\nHTTP response codes:\n  code 200 -- 100\n```\n\nso, i think those changes are worth.\n\nIn other way, I didn't find any docs about view.view_class usage, how many users will know this attribute can use for change view class like the test does? possibly, I can implement a view_class property to make it compatible with the old version.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/18777423",
            "html_url": "https://github.com/pallets/flask/pull/753#issuecomment-18777423",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/753",
            "id": 18777423,
            "node_id": "MDEyOklzc3VlQ29tbWVudDE4Nzc3NDIz",
            "user": {
                "login": "mitsuhiko",
                "id": 7396,
                "node_id": "MDQ6VXNlcjczOTY=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/7396?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/mitsuhiko",
                "html_url": "https://github.com/mitsuhiko",
                "followers_url": "https://api.github.com/users/mitsuhiko/followers",
                "following_url": "https://api.github.com/users/mitsuhiko/following{/other_user}",
                "gists_url": "https://api.github.com/users/mitsuhiko/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/mitsuhiko/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mitsuhiko/subscriptions",
                "organizations_url": "https://api.github.com/users/mitsuhiko/orgs",
                "repos_url": "https://api.github.com/users/mitsuhiko/repos",
                "events_url": "https://api.github.com/users/mitsuhiko/events{/privacy}",
                "received_events_url": "https://api.github.com/users/mitsuhiko/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2013-05-31T23:13:35Z",
            "updated_at": "2013-05-31T23:13:35Z",
            "author_association": "MEMBER",
            "body": "Instantiation per request was a design decision.\n"
        }
    ]
}