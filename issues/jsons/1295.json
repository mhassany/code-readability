{
    "url": "https://api.github.com/repos/pallets/flask/issues/1295",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/1295/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/1295/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/1295/events",
    "html_url": "https://github.com/pallets/flask/pull/1295",
    "id": 52958806,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MjY2MTUxNjI=",
    "number": 1295,
    "title": "register user errorhandler in the right order",
    "user": {
        "login": "ryanwang520",
        "id": 3983408,
        "node_id": "MDQ6VXNlcjM5ODM0MDg=",
        "avatar_url": "https://avatars1.githubusercontent.com/u/3983408?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanwang520",
        "html_url": "https://github.com/ryanwang520",
        "followers_url": "https://api.github.com/users/ryanwang520/followers",
        "following_url": "https://api.github.com/users/ryanwang520/following{/other_user}",
        "gists_url": "https://api.github.com/users/ryanwang520/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ryanwang520/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ryanwang520/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanwang520/orgs",
        "repos_url": "https://api.github.com/users/ryanwang520/repos",
        "events_url": "https://api.github.com/users/ryanwang520/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ryanwang520/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 10,
    "created_at": "2014-12-27T14:55:51Z",
    "updated_at": "2018-10-23T17:43:28Z",
    "closed_at": "2015-06-06T04:32:01Z",
    "author_association": "CONTRIBUTOR",
    "pull_request": {
        "url": "https://api.github.com/repos/pallets/flask/pulls/1295",
        "html_url": "https://github.com/pallets/flask/pull/1295",
        "diff_url": "https://github.com/pallets/flask/pull/1295.diff",
        "patch_url": "https://github.com/pallets/flask/pull/1295.patch"
    },
    "body": "solved the problem proposed by  #1291 in a lighter way,\nthus determining the `exception  hierarchy` at app setup time instead of running time.\n",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/68182013",
            "html_url": "https://github.com/pallets/flask/pull/1295#issuecomment-68182013",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1295",
            "id": 68182013,
            "node_id": "MDEyOklzc3VlQ29tbWVudDY4MTgyMDEz",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-12-27T15:50:02Z",
            "updated_at": "2014-12-27T15:50:02Z",
            "author_association": "MEMBER",
            "body": "I honestly like this a lot more than #1291, although I am wondering if we could sort exception handlers similarly to routes: with a key function.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/68188601",
            "html_url": "https://github.com/pallets/flask/pull/1295#issuecomment-68188601",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1295",
            "id": 68188601,
            "node_id": "MDEyOklzc3VlQ29tbWVudDY4MTg4NjAx",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-12-27T20:02:19Z",
            "updated_at": "2014-12-27T20:02:19Z",
            "author_association": "MEMBER",
            "body": "This version seems to work as well:\n\n```\ndef _append_error_handler(self, key, new_exc, f):\n    registered_errors = self.error_handler_spec \\\n        .setdefault(key, {}) \\\n        .setdefault(None, [])\n    new_entry = (new_exc, f)\n\n    for i, (exc, _) in enumerate(registered_errors):\n        if new_exc is exc:\n            registered_errors[i] = new_entry\n            break\n        elif issubclass(new_exc, exc):\n            registered_errors.insert(i, new_entry)\n            break\n    else:\n        registered_errors.append(new_entry)\n```\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/68190575",
            "html_url": "https://github.com/pallets/flask/pull/1295#issuecomment-68190575",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1295",
            "id": 68190575,
            "node_id": "MDEyOklzc3VlQ29tbWVudDY4MTkwNTc1",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-12-27T21:22:16Z",
            "updated_at": "2014-12-27T21:22:16Z",
            "author_association": "MEMBER",
            "body": "cc @flying-sheep\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/68190773",
            "html_url": "https://github.com/pallets/flask/pull/1295#issuecomment-68190773",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1295",
            "id": 68190773,
            "node_id": "MDEyOklzc3VlQ29tbWVudDY4MTkwNzcz",
            "user": {
                "login": "flying-sheep",
                "id": 291575,
                "node_id": "MDQ6VXNlcjI5MTU3NQ==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/291575?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/flying-sheep",
                "html_url": "https://github.com/flying-sheep",
                "followers_url": "https://api.github.com/users/flying-sheep/followers",
                "following_url": "https://api.github.com/users/flying-sheep/following{/other_user}",
                "gists_url": "https://api.github.com/users/flying-sheep/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/flying-sheep/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/flying-sheep/subscriptions",
                "organizations_url": "https://api.github.com/users/flying-sheep/orgs",
                "repos_url": "https://api.github.com/users/flying-sheep/repos",
                "events_url": "https://api.github.com/users/flying-sheep/events{/privacy}",
                "received_events_url": "https://api.github.com/users/flying-sheep/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-12-27T21:30:09Z",
            "updated_at": "2014-12-27T21:34:27Z",
            "author_association": "CONTRIBUTOR",
            "body": "good idea! you don\u2019t adress the profoundly broken logic in [this line](https://github.com/mitsuhiko/flask/blob/98b155c65da62077dc5f277a3ec15d3af78333af/flask/app.py#L1136) though.\n\nand i think you both misunderstand the performance characteristics of my approach.\n\nthe \u201cheavy\u201d feel mainly comes from the fact that my dict subclass tries to transparently alias error codes and default error classes. else it will likely be faster than this.\n\nwhy?\n\nbecause you here have one central error registry realized as list. mine is one registry per error code, in the form of a dict.\n\nthis here works by traversing the whole registry for a blueprint until a matching error is found. also things like `dict(registered_errors)` are expensive. it\u2019s maybe O(n \u00d7 len(registered_errors))\n\nmine works by traversing the mro and looking for a match in a dict for each class in the mro: O(len(mro)-2), which is mostly less than 3 or so. also note that the code in `handle_http_exception` and `handle_user_exception` gets prettier and simpler with my PR.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/68190897",
            "html_url": "https://github.com/pallets/flask/pull/1295#issuecomment-68190897",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1295",
            "id": 68190897,
            "node_id": "MDEyOklzc3VlQ29tbWVudDY4MTkwODk3",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-12-27T21:36:01Z",
            "updated_at": "2014-12-27T21:36:01Z",
            "author_association": "MEMBER",
            "body": "> you don\u2019t adress the profoundly broken logic in this line though.\n\nYeah, about that... I think it's at least a small step in the right direction if we just remove that if-statement. I played around with this locally, it's actually pretty hard to unify HTTP exceptions and errorcodes.\n\n> performance characteristics\n\nMaybe I should've clarified that I mostly like the idea of sorting a single list of handlers more than having a custom dict-like object. It's mostly easier to read (and audit) for me.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/68191253",
            "html_url": "https://github.com/pallets/flask/pull/1295#issuecomment-68191253",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1295",
            "id": 68191253,
            "node_id": "MDEyOklzc3VlQ29tbWVudDY4MTkxMjUz",
            "user": {
                "login": "flying-sheep",
                "id": 291575,
                "node_id": "MDQ6VXNlcjI5MTU3NQ==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/291575?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/flying-sheep",
                "html_url": "https://github.com/flying-sheep",
                "followers_url": "https://api.github.com/users/flying-sheep/followers",
                "following_url": "https://api.github.com/users/flying-sheep/following{/other_user}",
                "gists_url": "https://api.github.com/users/flying-sheep/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/flying-sheep/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/flying-sheep/subscriptions",
                "organizations_url": "https://api.github.com/users/flying-sheep/orgs",
                "repos_url": "https://api.github.com/users/flying-sheep/repos",
                "events_url": "https://api.github.com/users/flying-sheep/events{/privacy}",
                "received_events_url": "https://api.github.com/users/flying-sheep/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-12-27T21:51:52Z",
            "updated_at": "2014-12-27T21:57:43Z",
            "author_association": "CONTRIBUTOR",
            "body": "> it's actually pretty hard to unify HTTP exceptions and errorcodes.\n\ndoesn\u2019t my PR completely and transparently address this issue? if not, why didn\u2019t you tell me yet ;)\n\n> Maybe I should've clarified that I mostly like the idea of sorting a single list of handlers more than having a custom dict-like object. It's mostly easier to read (and audit) for me.\n\nas said: it could also be a normal dict; the only difference is that valid HTTP error codes are converted to their canonical HTTPException subclass on item access. if you don\u2019t like something about that part, again: why didn\u2019t you simply state your concerns in my PR? what are those concerns? The real backing dict is just one attribute access away: `ExceptionHandlerDict.data`. The behavior is simple: `ehd[http_error_code] == ehd[canonical_http_exception_class]`. But if you don\u2019t like it, just say it and we can talk about doing the conversion in `_register_error_handler` instead.\n\n---\n\ni\u2019m going out on a limb and say you didn\u2019t try it. it\u2019s actually very simple and as clear as it is ordered:\n\n``` python\nerror_handler_spec = {\n    blueprint1: { ... },\n    None: {\n        None: {  # all exceptions not a subclass of HTTPException\n            NonHTTPException: some_handler_function, \n            ...\n        },\n        403: {  # all exceptions that are a subclass of Forbidden (403)\n            Forbidden: some_handler_function, \n            ForbiddenSubclass: some_handler_function, \n        },\n        ...\n    }\n}\n```\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/68191642",
            "html_url": "https://github.com/pallets/flask/pull/1295#issuecomment-68191642",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1295",
            "id": 68191642,
            "node_id": "MDEyOklzc3VlQ29tbWVudDY4MTkxNjQy",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-12-27T22:07:18Z",
            "updated_at": "2014-12-27T22:07:18Z",
            "author_association": "MEMBER",
            "body": "@flying-sheep Maybe I've sounded too decisive, I've never intended to say that a particular PR is going to be merged.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/68198445",
            "html_url": "https://github.com/pallets/flask/pull/1295#issuecomment-68198445",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1295",
            "id": 68198445,
            "node_id": "MDEyOklzc3VlQ29tbWVudDY4MTk4NDQ1",
            "user": {
                "login": "ryanwang520",
                "id": 3983408,
                "node_id": "MDQ6VXNlcjM5ODM0MDg=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/3983408?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/ryanwang520",
                "html_url": "https://github.com/ryanwang520",
                "followers_url": "https://api.github.com/users/ryanwang520/followers",
                "following_url": "https://api.github.com/users/ryanwang520/following{/other_user}",
                "gists_url": "https://api.github.com/users/ryanwang520/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/ryanwang520/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ryanwang520/subscriptions",
                "organizations_url": "https://api.github.com/users/ryanwang520/orgs",
                "repos_url": "https://api.github.com/users/ryanwang520/repos",
                "events_url": "https://api.github.com/users/ryanwang520/events{/privacy}",
                "received_events_url": "https://api.github.com/users/ryanwang520/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-12-28T04:54:51Z",
            "updated_at": "2014-12-28T07:43:16Z",
            "author_association": "CONTRIBUTOR",
            "body": "@untitaker Thanks! Your version looks good to me.\n\n@flying-sheep \n-  I think the separation of `UserException` and `HTTPException` in Flask is intended. Maybe The `HTTPException` subclasses should be marked as `final` as they are just according to the HTTP Specification, each corresponding to a certain HTTP code .You should not subclass a certain `HTTPException` cause you should not make two  Exception type share the same HTTP code. Why are you trying to subclass a `Forbidden` instead of just raising the  `Forbidden` exception in your own Exception handler?  I'd like to hear about your opinion on this ;).\n-  As for the performance, as you won't register numerous error handlers, to transverse a small\n  list seems not a big issue, but make code much more simpler to analyze, don't you think so?\n  I also wonder if we can find a better approach  @untitaker \n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/68209038",
            "html_url": "https://github.com/pallets/flask/pull/1295#issuecomment-68209038",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1295",
            "id": 68209038,
            "node_id": "MDEyOklzc3VlQ29tbWVudDY4MjA5MDM4",
            "user": {
                "login": "flying-sheep",
                "id": 291575,
                "node_id": "MDQ6VXNlcjI5MTU3NQ==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/291575?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/flying-sheep",
                "html_url": "https://github.com/flying-sheep",
                "followers_url": "https://api.github.com/users/flying-sheep/followers",
                "following_url": "https://api.github.com/users/flying-sheep/following{/other_user}",
                "gists_url": "https://api.github.com/users/flying-sheep/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/flying-sheep/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/flying-sheep/subscriptions",
                "organizations_url": "https://api.github.com/users/flying-sheep/orgs",
                "repos_url": "https://api.github.com/users/flying-sheep/repos",
                "events_url": "https://api.github.com/users/flying-sheep/events{/privacy}",
                "received_events_url": "https://api.github.com/users/flying-sheep/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-12-28T14:47:27Z",
            "updated_at": "2014-12-28T14:49:38Z",
            "author_association": "CONTRIBUTOR",
            "body": "> I think the separation of UserException and HTTPException in Flask is intended\n\nyou might notice that my PR instates this separation whereas yours (and the existing code, due to a bug) doesn\u2019t.\n\nplease read the discussion in #1281, where i discovered the way the currently active code is broken.\n\n> You should not subclass a certain HTTPException cause you should not make two Exception type share the same HTTP code. Why are you trying to subclass a Forbidden instead of just raising the Forbidden exception in your own Exception handler? I'd like to hear about your opinion on this ;).\n\nbecause things might be forbidden for different reasons and it might be useful to react differently?\n\ne.g. the example in #1281: \n\n``` python\napp = Flask(__name__)\n\napp.errorhandler(403)\ndef default_forbidden():\n    return 'You\u2019re not allowed to do that', 403\n\n@app.errorhandler(CheatException)\ndef cheat(e):\n    return '''\n        You thought you\u2019d get through with faking your score\n        while it really is {e.real_score}\n    '''.format(e=e), CheatException.code\n\n@app.route('/submit_score/<score>')\ndef submit_score(score):\n    if not internal_score == score:\n        raise CheatException(internal_score)\n```\n\n>  As for the performance, as you won't register numerous error handlers,\n\nwell, performance is a secondary concern. i only responded to @untitaker\u2019s implication that your PR is in some way \u201clighter\u201d than mine, which i disagree with.\n\ni also think that it\u2019s clearer to group handlers by HTTP code than just stuffing them all into a huge list.\n\n> to transverse a small list seems not a big issue, but make code much more simpler to analyze, don't you think so? I also wonder if we can find a better approach @untitaker \n\nno, i don\u2019t :D\n\nlook at the code in my previous comment: it\u2019s just a nested dict `handlers[blueprint][code][exception_class]`. simpler than `handlers[blueprint][code] if code is not None else next((handler for cls, handler in handlers[blueprint][None] if exception_class is cls))`\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/109520053",
            "html_url": "https://github.com/pallets/flask/pull/1295#issuecomment-109520053",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1295",
            "id": 109520053,
            "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTUyMDA1Mw==",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-06-06T04:32:01Z",
            "updated_at": "2015-06-06T04:32:01Z",
            "author_association": "MEMBER",
            "body": "#1291 has been merged.\n"
        }
    ]
}