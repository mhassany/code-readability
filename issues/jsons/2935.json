{
    "url": "https://api.github.com/repos/pallets/flask/issues/2935",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/2935/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/2935/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/2935/events",
    "html_url": "https://github.com/pallets/flask/issues/2935",
    "id": 367393128,
    "node_id": "MDU6SXNzdWUzNjczOTMxMjg=",
    "number": 2935,
    "title": "copy_current_request_context copies old session object",
    "user": {
        "login": "dchevell",
        "id": 4359608,
        "node_id": "MDQ6VXNlcjQzNTk2MDg=",
        "avatar_url": "https://avatars1.githubusercontent.com/u/4359608?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dchevell",
        "html_url": "https://github.com/dchevell",
        "followers_url": "https://api.github.com/users/dchevell/followers",
        "following_url": "https://api.github.com/users/dchevell/following{/other_user}",
        "gists_url": "https://api.github.com/users/dchevell/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/dchevell/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dchevell/subscriptions",
        "organizations_url": "https://api.github.com/users/dchevell/orgs",
        "repos_url": "https://api.github.com/users/dchevell/repos",
        "events_url": "https://api.github.com/users/dchevell/events{/privacy}",
        "received_events_url": "https://api.github.com/users/dchevell/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2018-10-05T22:56:39Z",
    "updated_at": "2018-11-04T03:32:34Z",
    "closed_at": "2018-11-04T03:32:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "### Expected Behavior\r\n\r\nWhen using `copy_current_request_context` in the middle of a request, I'm expecting it to copy the current state of `flask.request` and `flask.session` at the time it's called. \r\n\r\n\r\n### Actual Behavior\r\n\r\nThe current state of `flask.request` is copied, but `flask.session` is from before the current request and doesn't contain changes made during the current request, before `copy_current_request_context` was called. To me this seems like unexpected behaviour. If it's not I'd like to understand a bit more about why, and also to find out whether there's any workaround or alternative approach I can take. \r\n\r\n### Example\r\n\r\nHere's a fully functional example you can save and run. It adds a test value to `flask.request` and `flask.session` during the request, then uses `copy_current_request_context` to decorate a method that will retrieve those same values in another thread. Two requests are made; on the first request the copied context can find the new value added to `flask.request` but cannot find the value added to `flask.session`. On the second request, the copied context can find the value added to `flask.request`, and now finds the value that was previously added to `flask.session` in the first request.\r\n\r\n\r\n```python\r\nimport concurrent.futures\r\nimport random\r\n\r\nfrom flask import Flask, copy_current_request_context, request, session\r\n\r\n\r\napp = Flask(__name__)\r\napp.config['SECRET_KEY'] = 'test'\r\nexecutor = concurrent.futures.ThreadPoolExecutor()\r\n\r\n\r\n@app.route('/')\r\ndef session_context():\r\n    test_value = random.randint(1, 1001)\r\n    request.test_value = test_value\r\n    session['TEST_VALUE'] = test_value\r\n\r\n    original_context = (\r\n        ('request', request.test_value),\r\n        ('session', session.get('TEST_VALUE'))\r\n    )\r\n\r\n    @copy_current_request_context\r\n    def debug_session():\r\n        return (\r\n            ('request', request.test_value),\r\n            ('session', session.get('TEST_VALUE'))\r\n        )\r\n\r\n    future = executor.submit(debug_session)\r\n    print('original_context:', original_context)\r\n    print('copied_context:', future.result())\r\n    return 'ok'\r\n\r\n\r\nif __name__ == '__main__':\r\n    client = app.test_client()\r\n    print('### First request ###')\r\n    client.get('/')\r\n    print('### Second request ###')\r\n    client.get('/')\r\n```\r\n\r\nExample output:\r\n\r\n```bash\r\n$ python session_context.py\r\n### First request ###\r\noriginal_context: (('request', 27), ('session', 27))\r\ncopied_context: (('request', 27), ('session', None))\r\n### Second request ###\r\noriginal_context: (('request', 63), ('session', 63))\r\ncopied_context: (('request', 63), ('session', 27))\r\n```\r\n\r\n### Environment\r\n\r\n* Python version: 3.7.0\r\n* Flask version: Flask==1.0.2\r\n* Werkzeug version: Werkzeug==0.14.1\r\n\r\n\r\nAlso, for whatever it's worth: I'm investigating this as part of improving this project: https://github.com/dchevell/flask-executor",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/427538967",
            "html_url": "https://github.com/pallets/flask/issues/2935#issuecomment-427538967",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2935",
            "id": 427538967,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzUzODk2Nw==",
            "user": {
                "login": "dchevell",
                "id": 4359608,
                "node_id": "MDQ6VXNlcjQzNTk2MDg=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/4359608?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/dchevell",
                "html_url": "https://github.com/dchevell",
                "followers_url": "https://api.github.com/users/dchevell/followers",
                "following_url": "https://api.github.com/users/dchevell/following{/other_user}",
                "gists_url": "https://api.github.com/users/dchevell/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/dchevell/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dchevell/subscriptions",
                "organizations_url": "https://api.github.com/users/dchevell/orgs",
                "repos_url": "https://api.github.com/users/dchevell/repos",
                "events_url": "https://api.github.com/users/dchevell/events{/privacy}",
                "received_events_url": "https://api.github.com/users/dchevell/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2018-10-06T02:24:12Z",
            "updated_at": "2018-10-09T09:31:38Z",
            "author_association": "CONTRIBUTOR",
            "body": "I've found a solution for this - but I don't trust it because I don't have a strong enough knowledge of the Werkzeug internals to know if there are unintended side effects.\r\n\r\nAfter making a copy of the request context, you can simply give it a copy of the current session object. Here's a modified version of `copy_current_request_context` that does just that:\r\n\r\n```python\r\ndef copy_current_request_context(f):\r\n    top = _request_ctx_stack.top\r\n    if top is None:\r\n        raise RuntimeError('This decorator can only be used at local scopes '\r\n            'when a request context is on the stack.  For instance within '\r\n            'view functions.')\r\n    reqctx = top.copy()\r\n    reqctx.session = session.copy()\r\n    def wrapper(*args, **kwargs):\r\n        with reqctx:\r\n            return f(*args, **kwargs)\r\n    return update_wrapper(wrapper, f)\r\n```\r\n\r\n`reqctx.session = session.copy()` is the addition here.\r\n\r\nWith this change, my example produces the expected behaviour. The Flask test suite passes, so there's no obvious side effects I can see.\r\n\r\nI would love to have the built in `copy_current_request_context` produce this behaviour, but I suppose the question becomes: should it? I'm guessing the behaviour I've run into exists because is not because `copy_current_request_context` is copying an old session object as I originally thought, but instead simply isn't copying anything. It stands to reason that as a byproduct of that `flask.session` proxy points to the previous state of the session object in the copied request context. Since the end result is that the request and session state are inconsistent I _think_ my solution still makes sense, so I've opened #2936 to propose the change. "
        }
    ]
}