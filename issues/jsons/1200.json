{
    "url": "https://api.github.com/repos/pallets/flask/issues/1200",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/1200/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/1200/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/1200/events",
    "html_url": "https://github.com/pallets/flask/issues/1200",
    "id": 45365576,
    "node_id": "MDU6SXNzdWU0NTM2NTU3Ng==",
    "number": 1200,
    "title": "MAX_CONTENT_LENGHT not being respected with JSON payload",
    "user": {
        "login": "ispmarin",
        "id": 12247,
        "node_id": "MDQ6VXNlcjEyMjQ3",
        "avatar_url": "https://avatars3.githubusercontent.com/u/12247?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ispmarin",
        "html_url": "https://github.com/ispmarin",
        "followers_url": "https://api.github.com/users/ispmarin/followers",
        "following_url": "https://api.github.com/users/ispmarin/following{/other_user}",
        "gists_url": "https://api.github.com/users/ispmarin/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ispmarin/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ispmarin/subscriptions",
        "organizations_url": "https://api.github.com/users/ispmarin/orgs",
        "repos_url": "https://api.github.com/users/ispmarin/repos",
        "events_url": "https://api.github.com/users/ispmarin/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ispmarin/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 8,
    "created_at": "2014-10-09T13:26:06Z",
    "updated_at": "2017-06-24T00:39:27Z",
    "closed_at": "2014-10-13T18:11:23Z",
    "author_association": "NONE",
    "body": "Setting the MAX_CONTENT_LENGHT variable does nothing to limit a json payload larger than the set limit. We are using Flask Classy to write the post method and Flask to handle the requests.\n\n```\n<Config {'JSON_AS_ASCII': True, 'BASIC_AUTH_REALM': '', 'MONGO_UNIX_SOCKET': '/tmp/mongodb-27017.sock', 'REC_SYS_API_PORT': 5000, 'SQLALCHEMY_POOL_RECYCLE': None, 'MONGO_PORT': 27017, 'PROJECT_ROOT': '/home/project', 'SQLALCHEMY_POOL_TIMEOUT': None, 'SQLALCHEMY_RECORD_QUERIES': None, 'SESSION_COOKIE_DOMAIN': None, 'SESSION_COOKIE_NAME': 'session', 'DB_NAME': 'test_tracks', 'TRACK_ACTIONS': ['apply'], 'SQLALCHEMY_NATIVE_UNICODE': None, 'MAX_CONTENT_LENGTH': 65536, 'PERMANENT_SESSION_LIFETIME': datetime.timedelta(31), 'SQLALCHEMY_POOL_SIZE': None, 'SQLALCHEMY_MAX_OVERFLOW': None, 'TRAP_HTTP_EXCEPTIONS': False, 'BASIC_AUTH_FORCE': False, 'PRESERVE_CONTEXT_ON_EXCEPTION': None, 'SQLALCHEMY_ECHO': False, 'SESSION_COOKIE_PATH': None, 'LOGGER_NAME': 'rtr', 'MONGO_USE_SOCKET': True, 'SECRET_KEY': None, 'APP_NAME': 'trkc', 'SERVER_NAME': None, 'PREFERRED_URL_SCHEME': 'http', 'TESTING': False, 'MONGODB_SETTINGS': {'DB': 'test_tracks'}, 'USE_X_SENDFILE': False, 'SQLALCHEMY_DATABASE_URI': 'sqlite:////tmp/test.db', 'SESSION_COOKIE_SECURE': False, 'SEND_FILE_MAX_AGE_DEFAULT': 43200, 'SQLALCHEMY_BINDS': {'logsite': 'sqlite:////tmp/test_logsite.db'}, 'DEBUG': False, 'SQLALCHEMY_COMMIT_ON_TEARDOWN': False, 'APPLICATION_ROOT': None, 'JSONIFY_PRETTYPRINT_REGULAR': True, 'PROPAGATE_EXCEPTIONS': None, 'TRAP_BAD_REQUEST_ERRORS': False, 'JSON_SORT_KEYS': True, 'SESSION_COOKIE_HTTPONLY': True, 'MONGO_HOST': 'localhost'}>\n```\n\nCheers\n",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/58510841",
            "html_url": "https://github.com/pallets/flask/issues/1200#issuecomment-58510841",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1200",
            "id": 58510841,
            "node_id": "MDEyOklzc3VlQ29tbWVudDU4NTEwODQx",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-10-09T13:44:38Z",
            "updated_at": "2014-10-09T13:44:38Z",
            "author_association": "MEMBER",
            "body": "Flask/Werkzeug only validate the content length when accessing the relevant request attributes.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/58513589",
            "html_url": "https://github.com/pallets/flask/issues/1200#issuecomment-58513589",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1200",
            "id": 58513589,
            "node_id": "MDEyOklzc3VlQ29tbWVudDU4NTEzNTg5",
            "user": {
                "login": "ispmarin",
                "id": 12247,
                "node_id": "MDQ6VXNlcjEyMjQ3",
                "avatar_url": "https://avatars3.githubusercontent.com/u/12247?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/ispmarin",
                "html_url": "https://github.com/ispmarin",
                "followers_url": "https://api.github.com/users/ispmarin/followers",
                "following_url": "https://api.github.com/users/ispmarin/following{/other_user}",
                "gists_url": "https://api.github.com/users/ispmarin/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/ispmarin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ispmarin/subscriptions",
                "organizations_url": "https://api.github.com/users/ispmarin/orgs",
                "repos_url": "https://api.github.com/users/ispmarin/repos",
                "events_url": "https://api.github.com/users/ispmarin/events{/privacy}",
                "received_events_url": "https://api.github.com/users/ispmarin/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-10-09T14:03:05Z",
            "updated_at": "2014-10-09T14:03:27Z",
            "author_association": "NONE",
            "body": "Could you please elaborate which relevant request attributes are being checked? The info in the documetation mentions \"If set to a value in bytes, Flask will reject incoming requests with a content length greater than this by returning a 413 status code.\", so I assumed that if my payload on a POST is larger than MAX_CONTENT_LENGTH it would be blocked with 413. Thanks for your patience!\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/58514760",
            "html_url": "https://github.com/pallets/flask/issues/1200#issuecomment-58514760",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1200",
            "id": 58514760,
            "node_id": "MDEyOklzc3VlQ29tbWVudDU4NTE0NzYw",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-10-09T14:10:59Z",
            "updated_at": "2014-10-09T14:10:59Z",
            "author_association": "MEMBER",
            "body": "Flask lazily parses and validates incoming request data as you access e.g. `request.form`. See https://github.com/mitsuhiko/flask/blob/master/tests/test_basic.py#L1143, if you remove the access to `flask.request.form['myfile']` inside the view functions, the testcase will fail.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/58514953",
            "html_url": "https://github.com/pallets/flask/issues/1200#issuecomment-58514953",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1200",
            "id": 58514953,
            "node_id": "MDEyOklzc3VlQ29tbWVudDU4NTE0OTUz",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-10-09T14:12:17Z",
            "updated_at": "2014-10-09T14:12:17Z",
            "author_association": "MEMBER",
            "body": "And the same holds true for basically every request attribute that consumes the request body.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/58929134",
            "html_url": "https://github.com/pallets/flask/issues/1200#issuecomment-58929134",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1200",
            "id": 58929134,
            "node_id": "MDEyOklzc3VlQ29tbWVudDU4OTI5MTM0",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-10-13T17:49:30Z",
            "updated_at": "2014-10-13T17:49:30Z",
            "author_association": "MEMBER",
            "body": "@ispmarin Is this answer sufficient for you and can i close the issue?\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/58932060",
            "html_url": "https://github.com/pallets/flask/issues/1200#issuecomment-58932060",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1200",
            "id": 58932060,
            "node_id": "MDEyOklzc3VlQ29tbWVudDU4OTMyMDYw",
            "user": {
                "login": "ispmarin",
                "id": 12247,
                "node_id": "MDQ6VXNlcjEyMjQ3",
                "avatar_url": "https://avatars3.githubusercontent.com/u/12247?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/ispmarin",
                "html_url": "https://github.com/ispmarin",
                "followers_url": "https://api.github.com/users/ispmarin/followers",
                "following_url": "https://api.github.com/users/ispmarin/following{/other_user}",
                "gists_url": "https://api.github.com/users/ispmarin/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/ispmarin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ispmarin/subscriptions",
                "organizations_url": "https://api.github.com/users/ispmarin/orgs",
                "repos_url": "https://api.github.com/users/ispmarin/repos",
                "events_url": "https://api.github.com/users/ispmarin/events{/privacy}",
                "received_events_url": "https://api.github.com/users/ispmarin/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-10-13T18:11:23Z",
            "updated_at": "2014-10-13T18:11:23Z",
            "author_association": "NONE",
            "body": "Got it, gonna investigate more the effects. Thanks\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/310767675",
            "html_url": "https://github.com/pallets/flask/issues/1200#issuecomment-310767675",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1200",
            "id": 310767675,
            "node_id": "MDEyOklzc3VlQ29tbWVudDMxMDc2NzY3NQ==",
            "user": {
                "login": "karlud",
                "id": 8483461,
                "node_id": "MDQ6VXNlcjg0ODM0NjE=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/8483461?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/karlud",
                "html_url": "https://github.com/karlud",
                "followers_url": "https://api.github.com/users/karlud/followers",
                "following_url": "https://api.github.com/users/karlud/following{/other_user}",
                "gists_url": "https://api.github.com/users/karlud/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/karlud/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/karlud/subscriptions",
                "organizations_url": "https://api.github.com/users/karlud/orgs",
                "repos_url": "https://api.github.com/users/karlud/repos",
                "events_url": "https://api.github.com/users/karlud/events{/privacy}",
                "received_events_url": "https://api.github.com/users/karlud/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2017-06-23T20:39:40Z",
            "updated_at": "2017-06-23T20:41:40Z",
            "author_association": "NONE",
            "body": "Pardon me for reopening this. There still seems to be a possible DoS safety issue here. If an endpoint calls `request.get_json()` before accessing any of the fields that trigger MAX_CONTENT_LENGTH checking, then it will read all the POSTed data into memory.\r\n\r\nHere's an example server and client that demonstrate this, using the `resource` module to inspect memory usage:\r\n\r\nServer:\r\n```\r\n#!/usr/bin/env python3\r\n\r\nfrom flask import Flask, request\r\nimport resource\r\n\r\napp = Flask(__name__)\r\napp.config['MAX_CONTENT_LENGTH'] = 1000\r\n\r\n@app.route('/mem')\r\ndef mem():\r\n  return str(resource.getrusage(resource.RUSAGE_SELF).ru_maxrss)\r\n\r\n@app.route('/unsafe', methods=['POST'])\r\ndef unsafe():\r\n  j = request.get_json()\r\n  return 'ok'\r\n\r\n@app.route('/safe', methods=['POST'])\r\ndef safe():\r\n  j = request.data\r\n  j = request.get_json()\r\n  return 'ok'\r\n\r\nif __name__ == '__main__':\r\n  app.run()\r\n```\r\n\r\nClient:\r\n\r\n```\r\n#!/usr/bin/env python3\r\n\r\nimport requests\r\n\r\nr = requests.get(\"http://localhost:5000/mem\")\r\nprint(\"Starting memory usage:\", r.text)\r\n\r\nr = requests.post(\"http://localhost:5000/safe\", json=[\"small req\"])\r\nprint(r.text)\r\n\r\nr = requests.get(\"http://localhost:5000/mem\")\r\nprint(\"After small request to /safe:\", r.text)\r\n\r\nr = requests.post(\"http://localhost:5000/unsafe\", json=[\"small req\"])\r\nprint(r.text)\r\n\r\nr = requests.get(\"http://localhost:5000/mem\")\r\nprint(\"After small request to /unsafe:\", r.text)\r\n\r\ntry:\r\n  r = requests.post(\"http://localhost:5000/safe\", json=[\"large req\"*59999999])\r\n  print(r.text)\r\nexcept Exception as e:\r\n  print(\"fail\")\r\n\r\nr = requests.get(\"http://localhost:5000/mem\")\r\nprint(\"After large request to /safe:\", r.text)\r\n\r\nr = requests.post(\"http://localhost:5000/unsafe\", json=[\"large req\"*59999999])\r\nprint(r.text)\r\n\r\nr = requests.get(\"http://localhost:5000/mem\")\r\nprint(\"After large request to /unsafe:\", r.text)\r\n```\r\n\r\nExample run:\r\n```\r\n$ python3 testclient.py\r\nStarting memory usage: 20631552\r\nok\r\nAfter small request to /safe: 20709376\r\nok\r\nAfter small request to /unsafe: 20713472\r\nfail\r\nAfter large request to /safe: 20992000\r\nok\r\nAfter large request to /unsafe: 1389424640\r\n```\r\nThe `/safe` endpoint, which peeks at `request.data` before running `request.get_json()`, successfully avoids allocating a gigantic amount of memory for the gigantic incoming POST body. However, the `/unsafe` endpoint, which doesn't, allocates >1GB memory for that POST body.\r\n\r\nIn other words, it sure seems like JSON servers that want to protect themselves from allocating arbitrary amounts of memory in response to a large POST _must_ do something to cause MAX_CONTENT_LENGTH checking _before_ using `request.get_json()`."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/310801741",
            "html_url": "https://github.com/pallets/flask/issues/1200#issuecomment-310801741",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1200",
            "id": 310801741,
            "node_id": "MDEyOklzc3VlQ29tbWVudDMxMDgwMTc0MQ==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2017-06-24T00:39:27Z",
            "updated_at": "2017-06-24T00:39:27Z",
            "author_association": "MEMBER",
            "body": "Closed by pallets/werkzeug#1126."
        }
    ]
}