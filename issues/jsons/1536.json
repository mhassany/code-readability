{
    "url": "https://api.github.com/repos/pallets/flask/issues/1536",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/1536/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/1536/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/1536/events",
    "html_url": "https://github.com/pallets/flask/pull/1536",
    "id": 95639032,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NDAyMjIyNDc=",
    "number": 1536,
    "title": "Support argument-less factory functions in CLI",
    "user": {
        "login": "mbr",
        "id": 110577,
        "node_id": "MDQ6VXNlcjExMDU3Nw==",
        "avatar_url": "https://avatars1.githubusercontent.com/u/110577?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mbr",
        "html_url": "https://github.com/mbr",
        "followers_url": "https://api.github.com/users/mbr/followers",
        "following_url": "https://api.github.com/users/mbr/following{/other_user}",
        "gists_url": "https://api.github.com/users/mbr/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/mbr/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mbr/subscriptions",
        "organizations_url": "https://api.github.com/users/mbr/orgs",
        "repos_url": "https://api.github.com/users/mbr/repos",
        "events_url": "https://api.github.com/users/mbr/events{/privacy}",
        "received_events_url": "https://api.github.com/users/mbr/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": {
        "login": "mitsuhiko",
        "id": 7396,
        "node_id": "MDQ6VXNlcjczOTY=",
        "avatar_url": "https://avatars1.githubusercontent.com/u/7396?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mitsuhiko",
        "html_url": "https://github.com/mitsuhiko",
        "followers_url": "https://api.github.com/users/mitsuhiko/followers",
        "following_url": "https://api.github.com/users/mitsuhiko/following{/other_user}",
        "gists_url": "https://api.github.com/users/mitsuhiko/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/mitsuhiko/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mitsuhiko/subscriptions",
        "organizations_url": "https://api.github.com/users/mitsuhiko/orgs",
        "repos_url": "https://api.github.com/users/mitsuhiko/repos",
        "events_url": "https://api.github.com/users/mitsuhiko/events{/privacy}",
        "received_events_url": "https://api.github.com/users/mitsuhiko/received_events",
        "type": "User",
        "site_admin": false
    },
    "assignees": [
        {
            "login": "mitsuhiko",
            "id": 7396,
            "node_id": "MDQ6VXNlcjczOTY=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/7396?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mitsuhiko",
            "html_url": "https://github.com/mitsuhiko",
            "followers_url": "https://api.github.com/users/mitsuhiko/followers",
            "following_url": "https://api.github.com/users/mitsuhiko/following{/other_user}",
            "gists_url": "https://api.github.com/users/mitsuhiko/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mitsuhiko/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mitsuhiko/subscriptions",
            "organizations_url": "https://api.github.com/users/mitsuhiko/orgs",
            "repos_url": "https://api.github.com/users/mitsuhiko/repos",
            "events_url": "https://api.github.com/users/mitsuhiko/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mitsuhiko/received_events",
            "type": "User",
            "site_admin": false
        }
    ],
    "milestone": {
        "url": "https://api.github.com/repos/pallets/flask/milestones/2",
        "html_url": "https://github.com/pallets/flask/milestone/2",
        "labels_url": "https://api.github.com/repos/pallets/flask/milestones/2/labels",
        "id": 795954,
        "node_id": "MDk6TWlsZXN0b25lNzk1OTU0",
        "number": 2,
        "title": "1.0",
        "description": "",
        "creator": {
            "login": "untitaker",
            "id": 837573,
            "node_id": "MDQ6VXNlcjgzNzU3Mw==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/untitaker",
            "html_url": "https://github.com/untitaker",
            "followers_url": "https://api.github.com/users/untitaker/followers",
            "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
            "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
            "organizations_url": "https://api.github.com/users/untitaker/orgs",
            "repos_url": "https://api.github.com/users/untitaker/repos",
            "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
            "received_events_url": "https://api.github.com/users/untitaker/received_events",
            "type": "User",
            "site_admin": false
        },
        "open_issues": 0,
        "closed_issues": 159,
        "state": "closed",
        "created_at": "2014-09-19T15:47:20Z",
        "updated_at": "2018-04-26T21:07:44Z",
        "due_on": "2018-04-26T07:00:00Z",
        "closed_at": "2018-04-26T21:07:44Z"
    },
    "comments": 8,
    "created_at": "2015-07-17T11:23:42Z",
    "updated_at": "2018-10-23T17:43:38Z",
    "closed_at": "2016-09-18T12:18:01Z",
    "author_association": "NONE",
    "pull_request": {
        "url": "https://api.github.com/repos/pallets/flask/pulls/1536",
        "html_url": "https://github.com/pallets/flask/pull/1536",
        "diff_url": "https://github.com/pallets/flask/pull/1536.diff",
        "patch_url": "https://github.com/pallets/flask/pull/1536.patch"
    },
    "body": "Since the cli module does does fairly aggressive autodiscovery of a\nflask application object anyway, supporting argument-less factory\nfunctions is not far from the current behavior.\n\nArgument-less factory function do happen if you configuration is based on your environment. There's a whole pattern around it (see http://12factor.net) that Heroku uses. I've written a Flask-Extension to support it (http://github.com/mbr/flask-appconfig) and I want to make sure it integrates well with the 1.0 CLI features.\n\nWhile it is possible to write a script to get the same functionality, this is a bit of a convention-over-configuration issue and seeing that the CLI already searches pretty thoroughly for an app instance, looking for a callable `create_app()` function seems reasonable (and very useful!) to me.\n\nThis may get a bit confusing if `create_app()` does exepct arguments, but the resulting \n\n```\nTypeError: create_app() takes exactly 1 argument (0 given)\n```\n\nseems very clear.\n\n<!-- Reviewable:start -->\n\n---\n\nThis change is [<img src=\"https://reviewable.io/review_button.svg\" height=\"34\" align=\"absmiddle\" alt=\"Reviewable\"/>](https://reviewable.io/reviews/pallets/flask/1536)\n\n<!-- Reviewable:end -->\n",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/132517466",
            "html_url": "https://github.com/pallets/flask/pull/1536#issuecomment-132517466",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1536",
            "id": 132517466,
            "node_id": "MDEyOklzc3VlQ29tbWVudDEzMjUxNzQ2Ng==",
            "user": {
                "login": "mbr",
                "id": 110577,
                "node_id": "MDQ6VXNlcjExMDU3Nw==",
                "avatar_url": "https://avatars1.githubusercontent.com/u/110577?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/mbr",
                "html_url": "https://github.com/mbr",
                "followers_url": "https://api.github.com/users/mbr/followers",
                "following_url": "https://api.github.com/users/mbr/following{/other_user}",
                "gists_url": "https://api.github.com/users/mbr/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/mbr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mbr/subscriptions",
                "organizations_url": "https://api.github.com/users/mbr/orgs",
                "repos_url": "https://api.github.com/users/mbr/repos",
                "events_url": "https://api.github.com/users/mbr/events{/privacy}",
                "received_events_url": "https://api.github.com/users/mbr/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-08-19T09:46:35Z",
            "updated_at": "2015-08-19T09:46:35Z",
            "author_association": "NONE",
            "body": "It would be great to get some official feedback whether or not this feature has a chance of making it into 1.0. Is there an argument against it?\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/132535611",
            "html_url": "https://github.com/pallets/flask/pull/1536#issuecomment-132535611",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1536",
            "id": 132535611,
            "node_id": "MDEyOklzc3VlQ29tbWVudDEzMjUzNTYxMQ==",
            "user": {
                "login": "RonnyPfannschmidt",
                "id": 156838,
                "node_id": "MDQ6VXNlcjE1NjgzOA==",
                "avatar_url": "https://avatars1.githubusercontent.com/u/156838?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/RonnyPfannschmidt",
                "html_url": "https://github.com/RonnyPfannschmidt",
                "followers_url": "https://api.github.com/users/RonnyPfannschmidt/followers",
                "following_url": "https://api.github.com/users/RonnyPfannschmidt/following{/other_user}",
                "gists_url": "https://api.github.com/users/RonnyPfannschmidt/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/RonnyPfannschmidt/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/RonnyPfannschmidt/subscriptions",
                "organizations_url": "https://api.github.com/users/RonnyPfannschmidt/orgs",
                "repos_url": "https://api.github.com/users/RonnyPfannschmidt/repos",
                "events_url": "https://api.github.com/users/RonnyPfannschmidt/events{/privacy}",
                "received_events_url": "https://api.github.com/users/RonnyPfannschmidt/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-08-19T10:42:16Z",
            "updated_at": "2015-08-19T10:42:16Z",
            "author_association": "CONTRIBUTOR",
            "body": "a note from personal oppinion: since one can just pass a `(lambda scriptobj: make_app())` to explicitly invoke own app factories, i don't quite see a good reason to include magical calling of code into something that's supposed to find a Flask instance, after all finding something existing is conceptually different from creating something new\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/132560242",
            "html_url": "https://github.com/pallets/flask/pull/1536#issuecomment-132560242",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1536",
            "id": 132560242,
            "node_id": "MDEyOklzc3VlQ29tbWVudDEzMjU2MDI0Mg==",
            "user": {
                "login": "mbr",
                "id": 110577,
                "node_id": "MDQ6VXNlcjExMDU3Nw==",
                "avatar_url": "https://avatars1.githubusercontent.com/u/110577?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/mbr",
                "html_url": "https://github.com/mbr",
                "followers_url": "https://api.github.com/users/mbr/followers",
                "following_url": "https://api.github.com/users/mbr/following{/other_user}",
                "gists_url": "https://api.github.com/users/mbr/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/mbr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mbr/subscriptions",
                "organizations_url": "https://api.github.com/users/mbr/orgs",
                "repos_url": "https://api.github.com/users/mbr/repos",
                "events_url": "https://api.github.com/users/mbr/events{/privacy}",
                "received_events_url": "https://api.github.com/users/mbr/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-08-19T11:52:38Z",
            "updated_at": "2015-08-19T11:52:38Z",
            "author_association": "NONE",
            "body": "> a note from personal oppinion: since one can just pass a (lambda scriptobj: make_app()) to explicitly invoke own app factories, i don't quite see a good reason to include magical calling of code into something that's supposed to find a Flask instance, after all finding something existing is conceptually different from creating something new\n\nI think the difference between creation and discovery in this case is a bit philosophical though; if I am not mistaken many apps that use the factory pattern are structured in a way that there is a single `wsgi.py` or similar that looks somewhat like this:\n\n``` python\n\nimport myapp\n\napp = myapp.create_app()\n```\n\nIn that case, \"discovering\" the app by importing the module is equivalent to creating it. I get that there is a difference in semantics, because discovering an app twice would result in the same object, while calling `create_app` twice obviously gives two separate instances.\n\nWhat I am really asking for is a way to dig into the discovery process somehow. I'd like to be able to ship Flask-Appconfig with a straightforward way of using the bundled flask tool with it without much trouble, while avoiding creating small boilerplate files like the one described above.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/132560631",
            "html_url": "https://github.com/pallets/flask/pull/1536#issuecomment-132560631",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1536",
            "id": 132560631,
            "node_id": "MDEyOklzc3VlQ29tbWVudDEzMjU2MDYzMQ==",
            "user": {
                "login": "mbr",
                "id": 110577,
                "node_id": "MDQ6VXNlcjExMDU3Nw==",
                "avatar_url": "https://avatars1.githubusercontent.com/u/110577?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/mbr",
                "html_url": "https://github.com/mbr",
                "followers_url": "https://api.github.com/users/mbr/followers",
                "following_url": "https://api.github.com/users/mbr/following{/other_user}",
                "gists_url": "https://api.github.com/users/mbr/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/mbr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mbr/subscriptions",
                "organizations_url": "https://api.github.com/users/mbr/orgs",
                "repos_url": "https://api.github.com/users/mbr/repos",
                "events_url": "https://api.github.com/users/mbr/events{/privacy}",
                "received_events_url": "https://api.github.com/users/mbr/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-08-19T11:55:05Z",
            "updated_at": "2015-08-19T11:55:05Z",
            "author_association": "NONE",
            "body": "I should add that there are probably other ways of achieving this, but the ones I can think of right now seem really fragile (such as creating an appplication object automagically upon import and other things).\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/132622283",
            "html_url": "https://github.com/pallets/flask/pull/1536#issuecomment-132622283",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1536",
            "id": 132622283,
            "node_id": "MDEyOklzc3VlQ29tbWVudDEzMjYyMjI4Mw==",
            "user": {
                "login": "RonnyPfannschmidt",
                "id": 156838,
                "node_id": "MDQ6VXNlcjE1NjgzOA==",
                "avatar_url": "https://avatars1.githubusercontent.com/u/156838?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/RonnyPfannschmidt",
                "html_url": "https://github.com/RonnyPfannschmidt",
                "followers_url": "https://api.github.com/users/RonnyPfannschmidt/followers",
                "following_url": "https://api.github.com/users/RonnyPfannschmidt/following{/other_user}",
                "gists_url": "https://api.github.com/users/RonnyPfannschmidt/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/RonnyPfannschmidt/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/RonnyPfannschmidt/subscriptions",
                "organizations_url": "https://api.github.com/users/RonnyPfannschmidt/orgs",
                "repos_url": "https://api.github.com/users/RonnyPfannschmidt/repos",
                "events_url": "https://api.github.com/users/RonnyPfannschmidt/events{/privacy}",
                "received_events_url": "https://api.github.com/users/RonnyPfannschmidt/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-08-19T14:37:36Z",
            "updated_at": "2015-08-19T14:37:36Z",
            "author_association": "CONTRIBUTOR",
            "body": "but i really don't see what's wrong with just using the create_app argument to the script context and a lambda - there you can pass in exactly what you want as a function in a explicit manner,\n\nand i think that tops over calling actual functions that wouldn't get auto-invoked at import time\n\nalso if you completely configure from the environment, whats wrong with just having a module inside your package that does exactly one thing - call the app-factory?\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/152128009",
            "html_url": "https://github.com/pallets/flask/pull/1536#issuecomment-152128009",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1536",
            "id": 152128009,
            "node_id": "MDEyOklzc3VlQ29tbWVudDE1MjEyODAwOQ==",
            "user": {
                "login": "mbr",
                "id": 110577,
                "node_id": "MDQ6VXNlcjExMDU3Nw==",
                "avatar_url": "https://avatars1.githubusercontent.com/u/110577?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/mbr",
                "html_url": "https://github.com/mbr",
                "followers_url": "https://api.github.com/users/mbr/followers",
                "following_url": "https://api.github.com/users/mbr/following{/other_user}",
                "gists_url": "https://api.github.com/users/mbr/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/mbr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mbr/subscriptions",
                "organizations_url": "https://api.github.com/users/mbr/orgs",
                "repos_url": "https://api.github.com/users/mbr/repos",
                "events_url": "https://api.github.com/users/mbr/events{/privacy}",
                "received_events_url": "https://api.github.com/users/mbr/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-10-29T09:38:07Z",
            "updated_at": "2015-10-29T09:38:07Z",
            "author_association": "NONE",
            "body": "> but i really don't see what's wrong with just using the create_app argument to the script context and a lambda - there you can pass in exactly what you want as a function in a explicit manner,\n\nThat's true, but i am trying to cover an 80% use-case here (at least for a specific style of deployment). Passing in specific arguments means leaving the domain of Flask-AppConfig anyway.\n\n> also if you completely configure from the environment, whats wrong with just having a module inside your package that does exactly one thing - call the app-factory?\n\nBecause that's exactly what I'm trying to avoid =). With that, I will have a new boilerplate file for each project I am creating, which I am not a fan of.\n\n## \n\nUltimately I am just looking for a way to hook into the discovery process or anything before it. At worst, I'll monkeypatch things if I have to, but I'd really like way to get in before auto-discovery happens. This just seemed the cleanest way to do it. As said, I'd be really happy if I found a more acceptable alternative to achieve what I'm trying to do.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/247806345",
            "html_url": "https://github.com/pallets/flask/pull/1536#issuecomment-247806345",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1536",
            "id": 247806345,
            "node_id": "MDEyOklzc3VlQ29tbWVudDI0NzgwNjM0NQ==",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2016-09-17T20:37:12Z",
            "updated_at": "2016-09-17T20:37:12Z",
            "author_association": "MEMBER",
            "body": "@mbr just pointed this out to me in person and I think it's an important issue. This is not a question of whether it's possible to make the Flask CLI as-is work with app factories, but rather whether we see app factories as second-class convention compared to having an app object called `app` or `application`. Currently Flask's CLI obviously does not encourage them at all while supporting the other conventions mentioned \"out of the box\".\n\nI'm assigning this to @mitsuhiko, because he's the one who came up with Flask's CLI in the first place.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/247844412",
            "html_url": "https://github.com/pallets/flask/pull/1536#issuecomment-247844412",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1536",
            "id": 247844412,
            "node_id": "MDEyOklzc3VlQ29tbWVudDI0Nzg0NDQxMg==",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2016-09-18T12:18:01Z",
            "updated_at": "2016-09-18T12:18:01Z",
            "author_association": "MEMBER",
            "body": "Discussed this in private with both.\n\nI'm closing this, with the argumentation that app factories, in theory, are only useful when passing arguments to them, and we can't reasonably support that in the CLI (and launcher scripts as described above are as boilerplate-less as you can have it).\n\nWhat definetly needs update is the documentation. We already merged a lot of PRs, mainly by @wgwz, to fix up the documentation to take the new `flask` CLI into account. This is just another instance of this issue. See https://github.com/pallets/flask/issues/2027\n"
        }
    ]
}