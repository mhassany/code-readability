{
    "url": "https://api.github.com/repos/pallets/flask/issues/2197",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/2197/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/2197/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/2197/events",
    "html_url": "https://github.com/pallets/flask/issues/2197",
    "id": 211612822,
    "node_id": "MDU6SXNzdWUyMTE2MTI4MjI=",
    "number": 2197,
    "title": "Allow error handler to pass on decision to subsequent handlers",
    "user": {
        "login": "tuukkamustonen",
        "id": 94327,
        "node_id": "MDQ6VXNlcjk0MzI3",
        "avatar_url": "https://avatars1.githubusercontent.com/u/94327?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tuukkamustonen",
        "html_url": "https://github.com/tuukkamustonen",
        "followers_url": "https://api.github.com/users/tuukkamustonen/followers",
        "following_url": "https://api.github.com/users/tuukkamustonen/following{/other_user}",
        "gists_url": "https://api.github.com/users/tuukkamustonen/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/tuukkamustonen/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tuukkamustonen/subscriptions",
        "organizations_url": "https://api.github.com/users/tuukkamustonen/orgs",
        "repos_url": "https://api.github.com/users/tuukkamustonen/repos",
        "events_url": "https://api.github.com/users/tuukkamustonen/events{/privacy}",
        "received_events_url": "https://api.github.com/users/tuukkamustonen/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 5,
    "created_at": "2017-03-03T07:15:01Z",
    "updated_at": "2017-05-31T05:05:43Z",
    "closed_at": "2017-05-30T19:13:36Z",
    "author_association": "NONE",
    "body": "I would like to do error handling conditionally, like:\r\n\r\n```python\r\ndef internal_error(exc: peewee.InternalError) -> Optional[Response]:\r\n    if exc.args[0] == 1213:\r\n        # Deadlock found when trying to get lock; try restarting transaction\r\n        return CustomErrorResponse(...)\r\n\r\ndef any_exception(exc: Exception) -> Response:\r\n        return CustomErrorResponse(...)\r\n\r\napp.register_error_handler(peewee.InternalError, internal_error)\r\napp.register_error_handler(Exception, any_exception)\r\n```\r\n\r\nCould it be so that if `None` is returned from an errorhandler, Flask keeps on iterating and calls the next suitable errorhandler?\r\n\r\nLines: https://github.com/pallets/flask/blob/master/flask/app.py#L1521-L1525 Looks like the code has changed somewhat since 0.10.1 that I'm running (in 0.10.1 this would have been 3-line change I think).\r\n\r\nOf course I could call `return any_exception(exc)` from `internal_error()` but that kinda adds direct dependency between the two methods and I would like to avoid it (consider the error handlers coming from different modules/classes etc. and maybe there's even third error handler sitting between that would be skipped here).",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/304978936",
            "html_url": "https://github.com/pallets/flask/issues/2197#issuecomment-304978936",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2197",
            "id": 304978936,
            "node_id": "MDEyOklzc3VlQ29tbWVudDMwNDk3ODkzNg==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2017-05-30T19:13:36Z",
            "updated_at": "2017-05-30T19:15:01Z",
            "author_association": "MEMBER",
            "body": "This is similar to how `before_request` handlers can return a response if they want to stop response handling early. I started to implement this, but I've decided to close it.\r\n\r\nError handler behavior is already somewhat complicated due to the lookup by blueprint, app, code, and exception, all over the exception's MRO. The current order is:\r\n\r\n1. blueprint, code, mro\r\n2. app, code, mro\r\n3. blueprint, exception, mro\r\n4. app, exception, mro\r\n\r\nWhen you throw in the idea of falling through handlers, it becomes even worse: what order is something handled in if there are handlers spread across multiple maps? For example, if the following handlers exist:\r\n\r\n1. blueprint, Child(Parent(Exception)), doesn't return\r\n2. blueprint, Exception, returns\r\n3. app, Parent, returns\r\n\r\nShould the next handler for Child be 2 because it is the next closest base in the current map, or should it be 3 because it is the next most specific base? What if 3 didn't return, how would we get back to 2? What if there were more layers of bases interleaved back and forth between maps?\r\n\r\nSo while it was an interesting idea and it makes sense why you'd expect that, the implementation becomes way too hard to reason about."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/304983487",
            "html_url": "https://github.com/pallets/flask/issues/2197#issuecomment-304983487",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2197",
            "id": 304983487,
            "node_id": "MDEyOklzc3VlQ29tbWVudDMwNDk4MzQ4Nw==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2017-05-30T19:31:09Z",
            "updated_at": "2017-05-30T19:43:36Z",
            "author_association": "MEMBER",
            "body": "Here's the patch if anyone's interested:\r\n\r\n~~~patch\r\nFrom c7ee054d0ed4c85cdbe80007f4a6ef2eda5457b2 Mon Sep 17 00:00:00 2001\r\nFrom: David Lord <davidism@gmail.com>\r\nDate: Tue, 30 May 2017 12:26:28 -0700\r\nSubject: [PATCH] allow error handlers to return none\r\n\r\n---\r\n flask/app.py        | 66 +++++++++++++++++++++++++++--------------------------\r\n tests/test_basic.py | 24 +++++++++++++++++++\r\n 2 files changed, 58 insertions(+), 32 deletions(-)\r\n\r\ndiff --git a/flask/app.py b/flask/app.py\r\nindex 3c6d9f5..4ccaf5d 100644\r\n--- a/flask/app.py\r\n+++ b/flask/app.py\r\n@@ -1489,31 +1489,24 @@ class Flask(_PackageBoundObject):\r\n         return f\r\n \r\n     def _find_error_handler(self, e):\r\n-        \"\"\"Find a registered error handler for a request in this order:\r\n-        blueprint handler for a specific code, app handler for a specific code,\r\n-        blueprint generic HTTPException handler, app generic HTTPException handler,\r\n-        and returns None if a suitable handler is not found.\r\n-        \"\"\"\r\n-        exc_class, code = self._get_exc_class_and_code(type(e))\r\n-\r\n-        def find_handler(handler_map):\r\n-            if not handler_map:\r\n-                return\r\n+        \"\"\"Iterate over the error handlers that can handle the given error.\r\n+        They are ordered by specificity: blueprint code; global code;\r\n+        blueprint exception; global exception. Each class in the MRO is tried\r\n+        across maps before moving to the next class.\"\"\"\r\n+        exc_class, exc_code = self._get_exc_class_and_code(type(e))\r\n+        handler_maps = [m for m in (\r\n+            self.error_handler_spec.get(name, {}).get(code) for is_bp, name, code in (\r\n+                (True, request.blueprint, exc_code), (False, None, exc_code),\r\n+                (True, request.blueprint, None), (False, None, None)\r\n+            ) if not (is_bp and name is None)\r\n+        ) if m]\r\n \r\n         for cls in exc_class.__mro__:\r\n+            for handler_map in handler_maps:\r\n                 handler = handler_map.get(cls)\r\n-                if handler is not None:\r\n-                    # cache for next time exc_class is raised\r\n-                    handler_map[exc_class] = handler\r\n-                    return handler\r\n-\r\n-        # check for any in blueprint or app\r\n-        for name, c in ((request.blueprint, code), (None, code),\r\n-                        (request.blueprint, None), (None, None)):\r\n-            handler = find_handler(self.error_handler_spec.get(name, {}).get(c))\r\n \r\n-            if handler:\r\n-                return handler\r\n+                if handler is not None:\r\n+                    yield handler\r\n \r\n     def handle_http_exception(self, e):\r\n         \"\"\"Handles an HTTP exception.  By default this will invoke the\r\n@@ -1527,10 +1520,13 @@ class Flask(_PackageBoundObject):\r\n         if e.code is None:\r\n             return e\r\n \r\n-        handler = self._find_error_handler(e)\r\n-        if handler is None:\r\n+        for handler in self._find_error_handler(e):\r\n+            rv = handler(e)\r\n+\r\n+            if rv is not None:\r\n+                return rv\r\n+\r\n         return e\r\n-        return handler(e)\r\n \r\n     def trap_http_exception(self, e):\r\n         \"\"\"Checks if an HTTP exception should be trapped or not.  By default\r\n@@ -1595,11 +1591,13 @@ class Flask(_PackageBoundObject):\r\n         if isinstance(e, HTTPException) and not self.trap_http_exception(e):\r\n             return self.handle_http_exception(e)\r\n \r\n-        handler = self._find_error_handler(e)\r\n+        for handler in self._find_error_handler(e):\r\n+            rv = handler(e)\r\n+\r\n+            if rv is not None:\r\n+                return rv\r\n \r\n-        if handler is None:\r\n         reraise(exc_type, exc_value, tb)\r\n-        return handler(e)\r\n \r\n     def handle_exception(self, e):\r\n         \"\"\"Default exception handling that kicks in when an exception\r\n@@ -1611,9 +1609,7 @@ class Flask(_PackageBoundObject):\r\n         .. versionadded:: 0.3\r\n         \"\"\"\r\n         exc_type, exc_value, tb = sys.exc_info()\r\n-\r\n         got_request_exception.send(self, exception=e)\r\n-        handler = self._find_error_handler(InternalServerError())\r\n \r\n         if self.propagate_exceptions:\r\n             # if we want to repropagate the exception, we can attempt to\r\n@@ -1626,9 +1622,15 @@ class Flask(_PackageBoundObject):\r\n                 raise e\r\n \r\n         self.log_exception((exc_type, exc_value, tb))\r\n-        if handler is None:\r\n-            return InternalServerError()\r\n-        return self.finalize_request(handler(e), from_error_handler=True)\r\n+        internal_error = InternalServerError()\r\n+\r\n+        for handler in self._find_error_handler(internal_error):\r\n+            rv = handler(e)\r\n+\r\n+            if rv is not None:\r\n+                return self.finalize_request(rv, from_error_handler=True)\r\n+\r\n+        return internal_error\r\n \r\n     def log_exception(self, exc_info):\r\n         \"\"\"Logs an exception.  This is called by :meth:`handle_exception`\r\ndiff --git a/tests/test_basic.py b/tests/test_basic.py\r\nindex c494e8b..d46ef3d 100644\r\n--- a/tests/test_basic.py\r\n+++ b/tests/test_basic.py\r\n@@ -870,6 +870,30 @@ def test_error_handling(app, client):\r\n     assert b'forbidden' == rv.data\r\n \r\n \r\n+def test_error_handler_returns_none(app, client):\r\n+    class Low(Exception):\r\n+        pass\r\n+\r\n+    class High(Low):\r\n+        pass\r\n+\r\n+    @app.errorhandler(High)\r\n+    def handle_high(e):\r\n+        pass\r\n+\r\n+    @app.errorhandler(Low)\r\n+    def handle_low(e):\r\n+        return 'low', 200\r\n+\r\n+    @app.route('/')\r\n+    def index():\r\n+        raise High()\r\n+\r\n+    rv = client.get('/')\r\n+    assert rv.status_code == 200\r\n+    assert rv.data == b'low'\r\n+\r\n+\r\n def test_error_handling_processing(app, client):\r\n     app.config['LOGGER_HANDLER_POLICY'] = 'never'\r\n     app.testing = False\r\n-- \r\n2.13.0\r\n\r\n\r\n~~~"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/305083729",
            "html_url": "https://github.com/pallets/flask/issues/2197#issuecomment-305083729",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2197",
            "id": 305083729,
            "node_id": "MDEyOklzc3VlQ29tbWVudDMwNTA4MzcyOQ==",
            "user": {
                "login": "tuukkamustonen",
                "id": 94327,
                "node_id": "MDQ6VXNlcjk0MzI3",
                "avatar_url": "https://avatars1.githubusercontent.com/u/94327?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/tuukkamustonen",
                "html_url": "https://github.com/tuukkamustonen",
                "followers_url": "https://api.github.com/users/tuukkamustonen/followers",
                "following_url": "https://api.github.com/users/tuukkamustonen/following{/other_user}",
                "gists_url": "https://api.github.com/users/tuukkamustonen/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/tuukkamustonen/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tuukkamustonen/subscriptions",
                "organizations_url": "https://api.github.com/users/tuukkamustonen/orgs",
                "repos_url": "https://api.github.com/users/tuukkamustonen/repos",
                "events_url": "https://api.github.com/users/tuukkamustonen/events{/privacy}",
                "received_events_url": "https://api.github.com/users/tuukkamustonen/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2017-05-31T05:02:58Z",
            "updated_at": "2017-05-31T05:02:58Z",
            "author_association": "NONE",
            "body": "Alright, thanks for looking into it!\r\n\r\nWhile I don't understand all that you wrote, I was in the assumption that error handlers are looked up in the order of declaration. In that scenario, just keeping iterating to the next handler should be easy. But apparently (newer) versions of Flask do things differently...\r\n\r\nFor anyone else stumbling here, you can probably achieve this by:\r\n\r\n```python\r\ndef internal_error(exc: peewee.InternalError) -> Response:\r\n    if exc.args[0] == 1213:\r\n        return CustomErrorResponse(...)\r\n    return any_exception(exc)  # <-- this\r\n\r\ndef any_exception(exc: Exception) -> Response:\r\n        return CustomErrorResponse(...)\r\n```\r\n\r\nAs stated, it's not perfect, but probably suffices."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/305083998",
            "html_url": "https://github.com/pallets/flask/issues/2197#issuecomment-305083998",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2197",
            "id": 305083998,
            "node_id": "MDEyOklzc3VlQ29tbWVudDMwNTA4Mzk5OA==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2017-05-31T05:05:03Z",
            "updated_at": "2017-05-31T05:05:10Z",
            "author_association": "MEMBER",
            "body": "They are not looked up in the order you assumed."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/305084066",
            "html_url": "https://github.com/pallets/flask/issues/2197#issuecomment-305084066",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2197",
            "id": 305084066,
            "node_id": "MDEyOklzc3VlQ29tbWVudDMwNTA4NDA2Ng==",
            "user": {
                "login": "tuukkamustonen",
                "id": 94327,
                "node_id": "MDQ6VXNlcjk0MzI3",
                "avatar_url": "https://avatars1.githubusercontent.com/u/94327?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/tuukkamustonen",
                "html_url": "https://github.com/tuukkamustonen",
                "followers_url": "https://api.github.com/users/tuukkamustonen/followers",
                "following_url": "https://api.github.com/users/tuukkamustonen/following{/other_user}",
                "gists_url": "https://api.github.com/users/tuukkamustonen/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/tuukkamustonen/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tuukkamustonen/subscriptions",
                "organizations_url": "https://api.github.com/users/tuukkamustonen/orgs",
                "repos_url": "https://api.github.com/users/tuukkamustonen/repos",
                "events_url": "https://api.github.com/users/tuukkamustonen/events{/privacy}",
                "received_events_url": "https://api.github.com/users/tuukkamustonen/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2017-05-31T05:05:42Z",
            "updated_at": "2017-05-31T05:05:42Z",
            "author_association": "NONE",
            "body": "I need to RTFM then... thanks!"
        }
    ]
}