{
    "url": "https://api.github.com/repos/pallets/flask/issues/3111",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/3111/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/3111/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/3111/events",
    "html_url": "https://github.com/pallets/flask/pull/3111",
    "id": 416542079,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MjU3NzUzMzQ3",
    "number": 3111,
    "title": "Allow dictionaries return values as JSON",
    "user": {
        "login": "pgjones",
        "id": 1391482,
        "node_id": "MDQ6VXNlcjEzOTE0ODI=",
        "avatar_url": "https://avatars3.githubusercontent.com/u/1391482?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pgjones",
        "html_url": "https://github.com/pgjones",
        "followers_url": "https://api.github.com/users/pgjones/followers",
        "following_url": "https://api.github.com/users/pgjones/following{/other_user}",
        "gists_url": "https://api.github.com/users/pgjones/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/pgjones/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/pgjones/subscriptions",
        "organizations_url": "https://api.github.com/users/pgjones/orgs",
        "repos_url": "https://api.github.com/users/pgjones/repos",
        "events_url": "https://api.github.com/users/pgjones/events{/privacy}",
        "received_events_url": "https://api.github.com/users/pgjones/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 398831866,
            "node_id": "MDU6TGFiZWwzOTg4MzE4NjY=",
            "url": "https://api.github.com/repos/pallets/flask/labels/json",
            "name": "json",
            "color": "1d76db",
            "default": false,
            "description": null
        }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": {
        "url": "https://api.github.com/repos/pallets/flask/milestones/3",
        "html_url": "https://github.com/pallets/flask/milestone/3",
        "labels_url": "https://api.github.com/repos/pallets/flask/milestones/3/labels",
        "id": 3093266,
        "node_id": "MDk6TWlsZXN0b25lMzA5MzI2Ng==",
        "number": 3,
        "title": "1.1.0",
        "description": "",
        "creator": {
            "login": "davidism",
            "id": 1242887,
            "node_id": "MDQ6VXNlcjEyNDI4ODc=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/davidism",
            "html_url": "https://github.com/davidism",
            "followers_url": "https://api.github.com/users/davidism/followers",
            "following_url": "https://api.github.com/users/davidism/following{/other_user}",
            "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
            "organizations_url": "https://api.github.com/users/davidism/orgs",
            "repos_url": "https://api.github.com/users/davidism/repos",
            "events_url": "https://api.github.com/users/davidism/events{/privacy}",
            "received_events_url": "https://api.github.com/users/davidism/received_events",
            "type": "User",
            "site_admin": false
        },
        "open_issues": 0,
        "closed_issues": 48,
        "state": "closed",
        "created_at": "2018-02-06T16:14:43Z",
        "updated_at": "2019-07-06T22:03:23Z",
        "due_on": null,
        "closed_at": "2019-07-06T22:03:23Z"
    },
    "comments": 16,
    "created_at": "2019-03-03T17:42:17Z",
    "updated_at": "2019-05-24T19:03:25Z",
    "closed_at": "2019-05-24T17:39:12Z",
    "author_association": "MEMBER",
    "pull_request": {
        "url": "https://api.github.com/repos/pallets/flask/pulls/3111",
        "html_url": "https://github.com/pallets/flask/pull/3111",
        "diff_url": "https://github.com/pallets/flask/pull/3111.diff",
        "patch_url": "https://github.com/pallets/flask/pull/3111.patch"
    },
    "body": "This is something I've been experimenting with in Quart and I don't see a downside. I can't find any old issues relating to this (although I've found it hard to search for). This is roughly an issue, but as a pull request (branch) you can take the code and try it out. Obliviously if you consider this a good idea I'll add much more testing and documentation. \r\n\r\nThis supports an increasingly common use-case whereby JSON is the primary response (rather than a templated string). Given Flask simplifies returning HTML responses, it seems fitting that it should also do so for JSON responses. In practice it allows,\r\n```python\r\n@app.route(\"/\")\r\ndef index():\r\n    return {\r\n        \"api_stuff\": \"values\",\r\n    }\r\n```\r\nwhich is equivalent to\r\n```python\r\n@app.route(\"/\")\r\ndef index():\r\n    return jsonify({\r\n        \"api_stuff\": \"values\",\r\n    })\r\n```\r\n\r\n### Note \r\n\r\nThis doesn't support returning anything other than an associate array at the top level in the JSON response. I'm ok with this as in practice APIs are only extensible if the top level is an associate array.",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/469046082",
            "html_url": "https://github.com/pallets/flask/pull/3111#issuecomment-469046082",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/3111",
            "id": 469046082,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ2OTA0NjA4Mg==",
            "user": {
                "login": "ThiefMaster",
                "id": 179599,
                "node_id": "MDQ6VXNlcjE3OTU5OQ==",
                "avatar_url": "https://avatars1.githubusercontent.com/u/179599?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/ThiefMaster",
                "html_url": "https://github.com/ThiefMaster",
                "followers_url": "https://api.github.com/users/ThiefMaster/followers",
                "following_url": "https://api.github.com/users/ThiefMaster/following{/other_user}",
                "gists_url": "https://api.github.com/users/ThiefMaster/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/ThiefMaster/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ThiefMaster/subscriptions",
                "organizations_url": "https://api.github.com/users/ThiefMaster/orgs",
                "repos_url": "https://api.github.com/users/ThiefMaster/repos",
                "events_url": "https://api.github.com/users/ThiefMaster/events{/privacy}",
                "received_events_url": "https://api.github.com/users/ThiefMaster/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2019-03-03T17:44:29Z",
            "updated_at": "2019-03-03T17:44:29Z",
            "author_association": "MEMBER",
            "body": "Good idea, but I think this should be done on the application level.\r\n\r\nAlso, if I can return a dict to be jsonified, I'd expect to be able to do the same with let's say a number, boolean or a list - especially a list is quite common for JSON responses."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/469048304",
            "html_url": "https://github.com/pallets/flask/pull/3111#issuecomment-469048304",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/3111",
            "id": 469048304,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ2OTA0ODMwNA==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2019-03-03T18:09:52Z",
            "updated_at": "2019-03-03T18:09:52Z",
            "author_association": "MEMBER",
            "body": "This seems like a good idea. SO questions about \"dict object is not callable\" are common. This is already pretty common example of how to extend `Flask.make_response`.\r\n\r\nI agree with only handling dict for now. List is problematic because returning a 2- or 3-tuple/list has meaning already, and iterables generally have a different meaning in WSGI. There's no way to return a string and get a JSON string. If we want to extend this to number, boolean, and null, we can address that later."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/469050417",
            "html_url": "https://github.com/pallets/flask/pull/3111#issuecomment-469050417",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/3111",
            "id": 469050417,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ2OTA1MDQxNw==",
            "user": {
                "login": "ThiefMaster",
                "id": 179599,
                "node_id": "MDQ6VXNlcjE3OTU5OQ==",
                "avatar_url": "https://avatars1.githubusercontent.com/u/179599?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/ThiefMaster",
                "html_url": "https://github.com/ThiefMaster",
                "followers_url": "https://api.github.com/users/ThiefMaster/followers",
                "following_url": "https://api.github.com/users/ThiefMaster/following{/other_user}",
                "gists_url": "https://api.github.com/users/ThiefMaster/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/ThiefMaster/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ThiefMaster/subscriptions",
                "organizations_url": "https://api.github.com/users/ThiefMaster/orgs",
                "repos_url": "https://api.github.com/users/ThiefMaster/repos",
                "events_url": "https://api.github.com/users/ThiefMaster/events{/privacy}",
                "received_events_url": "https://api.github.com/users/ThiefMaster/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2019-03-03T18:34:37Z",
            "updated_at": "2019-03-03T18:34:37Z",
            "author_association": "MEMBER",
            "body": "Wouldn't it be more consistent to fail with a clear error message when returning a dict? And then document how to jsonify all returned values for the app / a blueprint?"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/469052734",
            "html_url": "https://github.com/pallets/flask/pull/3111#issuecomment-469052734",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/3111",
            "id": 469052734,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ2OTA1MjczNA==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2019-03-03T18:59:45Z",
            "updated_at": "2019-03-03T18:59:45Z",
            "author_association": "MEMBER",
            "body": "I had been thinking about making the error message nicer, since \"X is not callable\" is just confusing. I think we can both support `dict` and have a better error message for unrecognized types."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/469409549",
            "html_url": "https://github.com/pallets/flask/pull/3111#issuecomment-469409549",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/3111",
            "id": 469409549,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ2OTQwOTU0OQ==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2019-03-04T20:29:11Z",
            "updated_at": "2019-03-04T20:34:31Z",
            "author_association": "MEMBER",
            "body": "ThiefMaster brings up that this might make it seem that we're endorsing \"APIs should return dicts\", which while a good general rule isn't always true. I'm not convinced one way or another yet. `jsonify` itself didn't support other types until recently, and it's still available to use directly. This change won't solve the second most common source of the error, which is users expecting to be able to return a `cursor.fetchall()` db result list.\r\n\r\nIs there ever a case where we'd want to make a dict signify something about the response like a tuple does now? Perhaps as ASGI support is added? If we go through with this, we're basically locking this option out, although I'm not entirely happy with returning a tuple as a shortcut for a Response in the first place.\r\n\r\nThe lowest impact way to change this is to make a nice error message that mentions jsonify and points to the docs."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/469422591",
            "html_url": "https://github.com/pallets/flask/pull/3111#issuecomment-469422591",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/3111",
            "id": 469422591,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ2OTQyMjU5MQ==",
            "user": {
                "login": "pgjones",
                "id": 1391482,
                "node_id": "MDQ6VXNlcjEzOTE0ODI=",
                "avatar_url": "https://avatars3.githubusercontent.com/u/1391482?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/pgjones",
                "html_url": "https://github.com/pgjones",
                "followers_url": "https://api.github.com/users/pgjones/followers",
                "following_url": "https://api.github.com/users/pgjones/following{/other_user}",
                "gists_url": "https://api.github.com/users/pgjones/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/pgjones/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/pgjones/subscriptions",
                "organizations_url": "https://api.github.com/users/pgjones/orgs",
                "repos_url": "https://api.github.com/users/pgjones/repos",
                "events_url": "https://api.github.com/users/pgjones/events{/privacy}",
                "received_events_url": "https://api.github.com/users/pgjones/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2019-03-04T21:09:32Z",
            "updated_at": "2019-03-04T21:09:32Z",
            "author_association": "MEMBER",
            "body": "I think \"APIs should return dicts\" is a fine thing to endorse, and this is simply some sugar to make things easier (it doesn't actually make returning something else as JSON any more difficult). \r\n\r\nI'm not aware of any extra meaning to a dict response and in my experience of ASGI with Quart I've not come across any desire to do this (other than for JSON).\r\n\r\nI'm happy to add the error message with this, but the aim in my view is the simplified way to return JSON. I think the tuple shortcut is a strength of Flask, as it makes a HTML response very easy to construct - my hope is that this does so for JSON responses."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/469423924",
            "html_url": "https://github.com/pallets/flask/pull/3111#issuecomment-469423924",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/3111",
            "id": 469423924,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ2OTQyMzkyNA==",
            "user": {
                "login": "ThiefMaster",
                "id": 179599,
                "node_id": "MDQ6VXNlcjE3OTU5OQ==",
                "avatar_url": "https://avatars1.githubusercontent.com/u/179599?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/ThiefMaster",
                "html_url": "https://github.com/ThiefMaster",
                "followers_url": "https://api.github.com/users/ThiefMaster/followers",
                "following_url": "https://api.github.com/users/ThiefMaster/following{/other_user}",
                "gists_url": "https://api.github.com/users/ThiefMaster/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/ThiefMaster/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ThiefMaster/subscriptions",
                "organizations_url": "https://api.github.com/users/ThiefMaster/orgs",
                "repos_url": "https://api.github.com/users/ThiefMaster/repos",
                "events_url": "https://api.github.com/users/ThiefMaster/events{/privacy}",
                "received_events_url": "https://api.github.com/users/ThiefMaster/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2019-03-04T21:13:34Z",
            "updated_at": "2019-03-04T21:13:34Z",
            "author_association": "MEMBER",
            "body": "Why would you want to return a dict for an API that returns a collection, and does not have metadata associated with the collection itself (and thus requires an object on the top level).\r\n\r\nSomething like [this](https://developer.github.com/v3/orgs/#list-your-organizations) in the GitHub API for example. It's a collection and thus a list - and pagination is handled solely out-of-band through headers.\r\n\r\nIn the past having an array on the top level was bad because of browser security problems that allowed circumventing the same-origin policy, but those have been fixed years ago."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/469424527",
            "html_url": "https://github.com/pallets/flask/pull/3111#issuecomment-469424527",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/3111",
            "id": 469424527,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ2OTQyNDUyNw==",
            "user": {
                "login": "ThiefMaster",
                "id": 179599,
                "node_id": "MDQ6VXNlcjE3OTU5OQ==",
                "avatar_url": "https://avatars1.githubusercontent.com/u/179599?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/ThiefMaster",
                "html_url": "https://github.com/ThiefMaster",
                "followers_url": "https://api.github.com/users/ThiefMaster/followers",
                "following_url": "https://api.github.com/users/ThiefMaster/following{/other_user}",
                "gists_url": "https://api.github.com/users/ThiefMaster/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/ThiefMaster/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ThiefMaster/subscriptions",
                "organizations_url": "https://api.github.com/users/ThiefMaster/orgs",
                "repos_url": "https://api.github.com/users/ThiefMaster/repos",
                "events_url": "https://api.github.com/users/ThiefMaster/events{/privacy}",
                "received_events_url": "https://api.github.com/users/ThiefMaster/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2019-03-04T21:15:16Z",
            "updated_at": "2019-03-04T21:15:16Z",
            "author_association": "MEMBER",
            "body": "Don't get me wrong, I'm all for making it easy to write proper APIs - but I'd rather have to opt-in to this behavior (e.g. for an API blueprint of the whole app), and in that case jsonify *any* return value that can be jsonified (ie pretty much anything that's not a response or a `data, statuscode` tuple)"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/469435441",
            "html_url": "https://github.com/pallets/flask/pull/3111#issuecomment-469435441",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/3111",
            "id": 469435441,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ2OTQzNTQ0MQ==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2019-03-04T21:49:43Z",
            "updated_at": "2019-03-04T21:49:43Z",
            "author_association": "MEMBER",
            "body": "Opting in isn't much different than what users already have to do to support this (they'd still need need to be aware that it's even possible, and import a separate `Flask` class, just wouldn't have to add a few lines to `make_response`).\r\n\r\nThis sort of seems to be getting into \"what is good API design\" territory. At some point we need to assume users with opinions about API design, such as pagination in headers or returning lists (which are both fine), will do that regardless of any default Flask provides. Or they'll choose an extension such as Flask-Restful and not be affected by it anyway. For beginners, this is one less thing to trip up on."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/471270814",
            "html_url": "https://github.com/pallets/flask/pull/3111#issuecomment-471270814",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/3111",
            "id": 471270814,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MTI3MDgxNA==",
            "user": {
                "login": "pgjones",
                "id": 1391482,
                "node_id": "MDQ6VXNlcjEzOTE0ODI=",
                "avatar_url": "https://avatars3.githubusercontent.com/u/1391482?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/pgjones",
                "html_url": "https://github.com/pgjones",
                "followers_url": "https://api.github.com/users/pgjones/followers",
                "following_url": "https://api.github.com/users/pgjones/following{/other_user}",
                "gists_url": "https://api.github.com/users/pgjones/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/pgjones/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/pgjones/subscriptions",
                "organizations_url": "https://api.github.com/users/pgjones/orgs",
                "repos_url": "https://api.github.com/users/pgjones/repos",
                "events_url": "https://api.github.com/users/pgjones/events{/privacy}",
                "received_events_url": "https://api.github.com/users/pgjones/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2019-03-10T09:18:38Z",
            "updated_at": "2019-03-10T09:19:53Z",
            "author_association": "MEMBER",
            "body": "Given the discussion I've gone ahead and updated the documentation and tests (am I missing something? I expected I'd need to do more than this). I think this should be merged and would encourage your detailed review.\r\n(I think the error message has already been fixed)."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/494629053",
            "html_url": "https://github.com/pallets/flask/pull/3111#issuecomment-494629053",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/3111",
            "id": 494629053,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ5NDYyOTA1Mw==",
            "user": {
                "login": "lepture",
                "id": 290496,
                "node_id": "MDQ6VXNlcjI5MDQ5Ng==",
                "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/lepture",
                "html_url": "https://github.com/lepture",
                "followers_url": "https://api.github.com/users/lepture/followers",
                "following_url": "https://api.github.com/users/lepture/following{/other_user}",
                "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lepture/subscriptions",
                "organizations_url": "https://api.github.com/users/lepture/orgs",
                "repos_url": "https://api.github.com/users/lepture/repos",
                "events_url": "https://api.github.com/users/lepture/events{/privacy}",
                "received_events_url": "https://api.github.com/users/lepture/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2019-05-22T02:34:19Z",
            "updated_at": "2019-05-22T02:34:19Z",
            "author_association": "MEMBER",
            "body": "This seems not a general use case, there are many cases for API response, for example:\r\n\r\n1. list: `[]`\r\n2. with status code: `{}, 201`\r\n\r\nI think what you want can be done with a custom `Flask`:\r\n\r\n```python\r\nclass MyFlask(Flask):\r\n    def make_response(self, rv):\r\n        if isinstance(rv, dict):\r\n            return jsonify(rv)\r\n        return super(MyFlask, self).make_response(rv)\r\n```"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/494708567",
            "html_url": "https://github.com/pallets/flask/pull/3111#issuecomment-494708567",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/3111",
            "id": 494708567,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ5NDcwODU2Nw==",
            "user": {
                "login": "pgjones",
                "id": 1391482,
                "node_id": "MDQ6VXNlcjEzOTE0ODI=",
                "avatar_url": "https://avatars3.githubusercontent.com/u/1391482?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/pgjones",
                "html_url": "https://github.com/pgjones",
                "followers_url": "https://api.github.com/users/pgjones/followers",
                "following_url": "https://api.github.com/users/pgjones/following{/other_user}",
                "gists_url": "https://api.github.com/users/pgjones/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/pgjones/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/pgjones/subscriptions",
                "organizations_url": "https://api.github.com/users/pgjones/orgs",
                "repos_url": "https://api.github.com/users/pgjones/repos",
                "events_url": "https://api.github.com/users/pgjones/events{/privacy}",
                "received_events_url": "https://api.github.com/users/pgjones/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2019-05-22T08:35:31Z",
            "updated_at": "2019-05-22T20:12:14Z",
            "author_association": "MEMBER",
            "body": "Thanks for you interest @lepture, I had hoped the discussion above answered your points - but now I think it isn't clear (any chance you could point out where?). I've also written this [article](https://medium.com/octopus-wealth/returning-json-from-flask-cf4ce6fe9aeb) which I hope clearly makes the case for this change.\r\n\r\nEdit: This patch allows `{}, 201` and a variant `{}, {\"X-Header\": \"value\"}, 201`"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/495668814",
            "html_url": "https://github.com/pallets/flask/pull/3111#issuecomment-495668814",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/3111",
            "id": 495668814,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ5NTY2ODgxNA==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2019-05-24T15:04:14Z",
            "updated_at": "2019-05-24T15:04:14Z",
            "author_association": "MEMBER",
            "body": "I'm going to say yes to this. The coverage of a common use case and tripping point for new users outweighs the restrictions it imposes on the format, and doesn't prevent using the already well-documented patterns and libraries for more complex API design."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/495708083",
            "html_url": "https://github.com/pallets/flask/pull/3111#issuecomment-495708083",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/3111",
            "id": 495708083,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ5NTcwODA4Mw==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2019-05-24T16:53:12Z",
            "updated_at": "2019-05-24T16:53:12Z",
            "author_association": "MEMBER",
            "body": "@pgjones I force pushed to get this in line with the latest changes and added a changelog. You're going to have to reset your local master branch after this is merged.\r\n\r\n```\r\ngit fetch origin\r\ngit checkout master\r\ngit reset --hard origin/master\r\n```"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/495721557",
            "html_url": "https://github.com/pallets/flask/pull/3111#issuecomment-495721557",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/3111",
            "id": 495721557,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ5NTcyMTU1Nw==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2019-05-24T17:30:08Z",
            "updated_at": "2019-05-24T17:30:08Z",
            "author_association": "MEMBER",
            "body": "I added a section to the quickstart titled \"APIs with JSON\". We should probably break out the JSON support docs into their own page at some point. Some of it is in the API docs, but it doesn't make a ton of sense there."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/495756395",
            "html_url": "https://github.com/pallets/flask/pull/3111#issuecomment-495756395",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/3111",
            "id": 495756395,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ5NTc1NjM5NQ==",
            "user": {
                "login": "pgjones",
                "id": 1391482,
                "node_id": "MDQ6VXNlcjEzOTE0ODI=",
                "avatar_url": "https://avatars3.githubusercontent.com/u/1391482?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/pgjones",
                "html_url": "https://github.com/pgjones",
                "followers_url": "https://api.github.com/users/pgjones/followers",
                "following_url": "https://api.github.com/users/pgjones/following{/other_user}",
                "gists_url": "https://api.github.com/users/pgjones/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/pgjones/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/pgjones/subscriptions",
                "organizations_url": "https://api.github.com/users/pgjones/orgs",
                "repos_url": "https://api.github.com/users/pgjones/repos",
                "events_url": "https://api.github.com/users/pgjones/events{/privacy}",
                "received_events_url": "https://api.github.com/users/pgjones/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2019-05-24T19:03:25Z",
            "updated_at": "2019-05-24T19:03:25Z",
            "author_association": "MEMBER",
            "body": "\ud83c\udf89 \ud83d\ude04 thanks @davidism "
        }
    ]
}