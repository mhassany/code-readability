{
    "url": "https://api.github.com/repos/pallets/flask/issues/2679",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/2679/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/2679/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/2679/events",
    "html_url": "https://github.com/pallets/flask/issues/2679",
    "id": 310685233,
    "node_id": "MDU6SXNzdWUzMTA2ODUyMzM=",
    "number": 2679,
    "title": "Hooks in session_interface",
    "user": {
        "login": "ak04nv",
        "id": 73960,
        "node_id": "MDQ6VXNlcjczOTYw",
        "avatar_url": "https://avatars2.githubusercontent.com/u/73960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ak04nv",
        "html_url": "https://github.com/ak04nv",
        "followers_url": "https://api.github.com/users/ak04nv/followers",
        "following_url": "https://api.github.com/users/ak04nv/following{/other_user}",
        "gists_url": "https://api.github.com/users/ak04nv/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ak04nv/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ak04nv/subscriptions",
        "organizations_url": "https://api.github.com/users/ak04nv/orgs",
        "repos_url": "https://api.github.com/users/ak04nv/repos",
        "events_url": "https://api.github.com/users/ak04nv/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ak04nv/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 5,
    "created_at": "2018-04-03T03:52:38Z",
    "updated_at": "2018-04-04T02:04:39Z",
    "closed_at": "2018-04-03T14:40:19Z",
    "author_association": "NONE",
    "body": "HI there!\r\n\r\nI'm trying to get session data from table in my custom session interface in Flask and I'm getting the error Connection already open. This exception appears because connection opens automatically when I get a session data from `open_session` method in session interface. And after that Flask runs hooks `before_request` where the method to connect to database [was registered](https://github.com/coleifer/peewee/blob/master/playhouse/flask_utils.py#L148).\r\n\r\n\r\n```python\r\nimport peewee as pw\r\n\r\nfrom flask import Flask, jsonify\r\nfrom flask.sessions import SessionInterface, SessionMixin\r\nfrom werkzeug.datastructures import CallbackDict\r\n\r\nfrom playhouse.flask_utils import FlaskDB\r\nfrom playhouse.sqlite_ext import JSONField\r\n\r\nfrom datetime import datetime\r\n\r\n\r\napp = Flask(__name__)\r\ndb = FlaskDB(app, 'sqlite:///test_db.sqlite')\r\n\r\n\r\nclass Session(CallbackDict, SessionMixin):\r\n\r\n    def __init__(self, store={}):\r\n        def on_update(self):\r\n            self.modified = True\r\n\r\n        self._store = store\r\n        self.modified = False\r\n\r\n        CallbackDict.__init__(self, store.get('data', {}), on_update)\r\n\r\n    @classmethod\r\n    def find(cls, sid):\r\n        try:\r\n            store = SessionStore.get(sid=sid)\r\n        except SessionStore.DoesNotExist:\r\n            store = {}\r\n        return cls(store)\r\n\r\n    def save(self):\r\n        if hasattr(self._store, 'data') and self.modified:\r\n            self._store.data = self\r\n        self._store.save()\r\n\r\n\r\nclass MySI(SessionInterface):\r\n    null_session_class = Session\r\n\r\n    def open_session(self, app, request):\r\n        sid = request.cookies.get('sid')\r\n        # This is a point where request object already exists\r\n        # but hooks before_request are not called\r\n        return Session.find(sid) if sid else None\r\n\r\n    def save_session(self, app, session, response):\r\n        if session.modified:\r\n            session.save()\r\n\r\n\r\nclass SessionStore(db.Model):\r\n    sid = pw.CharField(primary_key=True)\r\n    data = JSONField()\r\n    expired = pw.DateTimeField(default=datetime.now)\r\n\r\n    class Meta:\r\n        table_name = 'sessions'\r\n\r\n\r\napp.session_interface = MySI()\r\n\r\n@app.route('/')\r\ndef main():\r\n    return jsonify(ok=1)\r\n\r\nif __name__ == '__main__':\r\n    if not SessionStore.table_exists():\r\n        SessionStore.create_table()\r\n    app.run(debug=True)\r\n```\r\n\r\nTraceback:\r\n\r\n```bash\r\n127.0.0.1 - - [03/Apr/2018 11:42:35] \"GET / HTTP/1.1\" 500 -\r\nTraceback (most recent call last):\r\n  File \"/home/ak04nv/.virtualenvs/web-app-boilerplate/lib/python3.6/site-packages/flask/app.py\", line 1997, in __call__\r\n    return self.wsgi_app(environ, start_response)\r\n  File \"/home/ak04nv/.virtualenvs/web-app-boilerplate/lib/python3.6/site-packages/flask/app.py\", line 1985, in wsgi_app\r\n    response = self.handle_exception(e)\r\n  File \"/home/ak04nv/.virtualenvs/web-app-boilerplate/lib/python3.6/site-packages/flask/app.py\", line 1540, in handle_exception\r\n    reraise(exc_type, exc_value, tb)\r\n  File \"/home/ak04nv/.virtualenvs/web-app-boilerplate/lib/python3.6/site-packages/flask/_compat.py\", line 33, in reraise\r\n    raise value\r\n  File \"/home/ak04nv/.virtualenvs/web-app-boilerplate/lib/python3.6/site-packages/flask/app.py\", line 1982, in wsgi_app\r\n    response = self.full_dispatch_request()\r\n  File \"/home/ak04nv/.virtualenvs/web-app-boilerplate/lib/python3.6/site-packages/flask/app.py\", line 1614, in full_dispatch_request\r\n    rv = self.handle_user_exception(e)\r\n  File \"/home/ak04nv/.virtualenvs/web-app-boilerplate/lib/python3.6/site-packages/flask/app.py\", line 1517, in handle_user_exception\r\n    reraise(exc_type, exc_value, tb)\r\n  File \"/home/ak04nv/.virtualenvs/web-app-boilerplate/lib/python3.6/site-packages/flask/_compat.py\", line 33, in reraise\r\n    raise value\r\n  File \"/home/ak04nv/.virtualenvs/web-app-boilerplate/lib/python3.6/site-packages/flask/app.py\", line 1610, in full_dispatch_request\r\n    rv = self.preprocess_request()\r\n  File \"/home/ak04nv/.virtualenvs/web-app-boilerplate/lib/python3.6/site-packages/flask/app.py\", line 1831, in preprocess_request\r\n    rv = func()\r\n  File \"/home/ak04nv/.virtualenvs/web-app-boilerplate/lib/python3.6/site-packages/playhouse/flask_utils.py\", line 174, in connect_db\r\n    self.database.connect()\r\n  File \"/home/ak04nv/.virtualenvs/web-app-boilerplate/lib/python3.6/site-packages/peewee.py\", line 2463, in connect\r\n    raise OperationalError('Connection already opened.')\r\npeewee.OperationalError: Connection already opened.\r\n```\r\n\r\n```bash\r\n$ pip install flask peewee\r\n$ python test.py &\r\n$ curl -b sid=123 localhost:5000\r\n```\r\n\r\nPython: 3.6.4\r\nFlask: 0.12.2\r\nWerkzeug: 0.14.1",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/378274028",
            "html_url": "https://github.com/pallets/flask/issues/2679#issuecomment-378274028",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2679",
            "id": 378274028,
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODI3NDAyOA==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2018-04-03T14:40:19Z",
            "updated_at": "2018-04-03T14:40:19Z",
            "author_association": "MEMBER",
            "body": "This appears to be an issue with the database extension. Similar to how it checks if the database is open before closing it, it should check that the database is not connected before connecting to it."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/378275908",
            "html_url": "https://github.com/pallets/flask/issues/2679#issuecomment-378275908",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2679",
            "id": 378275908,
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODI3NTkwOA==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2018-04-03T14:45:41Z",
            "updated_at": "2018-04-03T14:46:58Z",
            "author_association": "MEMBER",
            "body": "Looking at the extension code, it's not even clear why there's a `before_request`. Clearly the database is connected to by the model when querying it, since it works in the session before the handler triggers. And it must be more robust there too, since querying multiple models presumably doesn't trigger this issue."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/378326004",
            "html_url": "https://github.com/pallets/flask/issues/2679#issuecomment-378326004",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2679",
            "id": 378326004,
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODMyNjAwNA==",
            "user": {
                "login": "ak04nv",
                "id": 73960,
                "node_id": "MDQ6VXNlcjczOTYw",
                "avatar_url": "https://avatars2.githubusercontent.com/u/73960?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/ak04nv",
                "html_url": "https://github.com/ak04nv",
                "followers_url": "https://api.github.com/users/ak04nv/followers",
                "following_url": "https://api.github.com/users/ak04nv/following{/other_user}",
                "gists_url": "https://api.github.com/users/ak04nv/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/ak04nv/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ak04nv/subscriptions",
                "organizations_url": "https://api.github.com/users/ak04nv/orgs",
                "repos_url": "https://api.github.com/users/ak04nv/repos",
                "events_url": "https://api.github.com/users/ak04nv/events{/privacy}",
                "received_events_url": "https://api.github.com/users/ak04nv/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2018-04-03T17:11:31Z",
            "updated_at": "2018-04-03T17:11:31Z",
            "author_association": "NONE",
            "body": "@davidism I've rewritten the code without any database connection\r\n```python\r\nimport peewee as pw\r\n\r\nfrom flask import Flask, jsonify, request\r\nfrom flask.sessions import SessionInterface, SessionMixin\r\nfrom werkzeug.datastructures import CallbackDict\r\n\r\nfrom datetime import datetime\r\n\r\n\r\napp = Flask(__name__)\r\nSESSIONS = {}\r\n\r\n\r\nclass Session(CallbackDict, SessionMixin):\r\n\r\n    def __init__(self, store={}):\r\n        def on_update(self):\r\n            self.modified = True\r\n\r\n        CallbackDict.__init__(self, store.get('data', {}), on_update)\r\n        self.modified = False\r\n\r\n    def save(self):\r\n        SESSIONS[self.sid] = self.copy()\r\n\r\n\r\nclass MySI(SessionInterface):\r\n    null_session_class = Session\r\n\r\n    def open_session(self, app, request):\r\n        sid = request.cookies.get('sid')\r\n        # This is a point where request object already exists\r\n        # but hooks before_request are not called\r\n        print(request)\r\n        return SESSIONS.get(sid) if sid else None\r\n\r\n    def save_session(self, app, session, response):\r\n        if session.modified:\r\n            session.save()\r\n\r\n\r\napp.session_interface = MySI()\r\n\r\n@app.before_request\r\ndef register_handler():\r\n    print('Handler has called')\r\n\r\n@app.route('/')\r\ndef main():\r\n    return jsonify(ok=1)\r\n\r\nif __name__ == '__main__':\r\n    app.run(debug=True)\r\n```\r\nThere is result:\r\n```bash\r\n * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\r\n * Restarting with stat\r\n * Debugger is active!\r\n * Debugger PIN: 112-429-377\r\n<Request 'http://localhost:5000/' [GET]>\r\nHandler has called\r\n127.0.0.1 - - [04/Apr/2018 01:04:49] \"GET / HTTP/1.1\" 200 -\r\n```\r\nQuestion: why `Request` object printed earlier than \u00abHandler has called\u00bb ?"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/378377393",
            "html_url": "https://github.com/pallets/flask/issues/2679#issuecomment-378377393",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2679",
            "id": 378377393,
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODM3NzM5Mw==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2018-04-03T20:01:37Z",
            "updated_at": "2018-04-03T20:01:37Z",
            "author_association": "MEMBER",
            "body": "Because the flow is:\r\n\r\n1. request context created\r\n2. session opened\r\n3. `before_request` handlers called\r\n4. view function called\r\n\r\nSo that the session is available in `before_request` handlers."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/378456223",
            "html_url": "https://github.com/pallets/flask/issues/2679#issuecomment-378456223",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2679",
            "id": 378456223,
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODQ1NjIyMw==",
            "user": {
                "login": "ak04nv",
                "id": 73960,
                "node_id": "MDQ6VXNlcjczOTYw",
                "avatar_url": "https://avatars2.githubusercontent.com/u/73960?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/ak04nv",
                "html_url": "https://github.com/ak04nv",
                "followers_url": "https://api.github.com/users/ak04nv/followers",
                "following_url": "https://api.github.com/users/ak04nv/following{/other_user}",
                "gists_url": "https://api.github.com/users/ak04nv/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/ak04nv/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ak04nv/subscriptions",
                "organizations_url": "https://api.github.com/users/ak04nv/orgs",
                "repos_url": "https://api.github.com/users/ak04nv/repos",
                "events_url": "https://api.github.com/users/ak04nv/events{/privacy}",
                "received_events_url": "https://api.github.com/users/ak04nv/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2018-04-04T02:03:13Z",
            "updated_at": "2018-04-04T02:04:39Z",
            "author_association": "NONE",
            "body": "@davidism Thanks!\r\nI thought `before_request` means before request context creation. In fact it means before calling your view. Using `request_started` in my case works fine!"
        }
    ]
}