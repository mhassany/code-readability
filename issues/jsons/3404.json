{
    "url": "https://api.github.com/repos/pallets/flask/issues/3404",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/3404/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/3404/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/3404/events",
    "html_url": "https://github.com/pallets/flask/issues/3404",
    "id": 512717050,
    "node_id": "MDU6SXNzdWU1MTI3MTcwNTA=",
    "number": 3404,
    "title": "route decorator on MethodView classes",
    "user": {
        "login": "dougthor42",
        "id": 5386897,
        "node_id": "MDQ6VXNlcjUzODY4OTc=",
        "avatar_url": "https://avatars2.githubusercontent.com/u/5386897?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dougthor42",
        "html_url": "https://github.com/dougthor42",
        "followers_url": "https://api.github.com/users/dougthor42/followers",
        "following_url": "https://api.github.com/users/dougthor42/following{/other_user}",
        "gists_url": "https://api.github.com/users/dougthor42/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/dougthor42/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dougthor42/subscriptions",
        "organizations_url": "https://api.github.com/users/dougthor42/orgs",
        "repos_url": "https://api.github.com/users/dougthor42/repos",
        "events_url": "https://api.github.com/users/dougthor42/events{/privacy}",
        "received_events_url": "https://api.github.com/users/dougthor42/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-10-25T20:55:31Z",
    "updated_at": "2019-11-15T15:17:23Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "body": "<!-- **This issue tracker is a tool to address bugs in Flask itself.\r\nPlease use the #pocoo IRC channel on freenode or Stack Overflow for general\r\nquestions about using Flask or issues not related to Flask.** -->\r\n\r\n<!-- If you'd like to report a bug in Flask, fill out the template below. Provide\r\nany extra information that may be useful / related to your problem.\r\nIdeally, create an [MCVE](https://stackoverflow.com/help/mcve), which helps us\r\nunderstand the problem and helps check that it is not caused by something in\r\nyour code. -->\r\n\r\n\r\n### TL;DR:\r\n+ Being able to use a Blueprint's `@pb.route` decorator on a `MethodView` class can help made code more readable\r\n+ It should be a pretty trivial fix.\r\n+ I'm working on tests and a merge request right now.\r\n\r\n\r\n### Expected Behavior\r\nUsers should be able to combine blueprints with `MethodView`.\r\n\r\n```python\r\nfrom flask import Blueprint\r\nfrom flask.views import MethodView\r\n\r\napi = Blueprint(\"api\", __name__, url_prefix=\"/api/v1\")\r\n\r\n@api.route(\"/users\")\r\n@api.route(\"/users/<user_id>\")\r\nclass UserAPI(MethodView):\r\n\r\n    def get(self, user_id=None):\r\n        if user_id is None:\r\n            return \"list of all users\"\r\n        else:\r\n            return f\"just user {user_id}\"\r\n\r\n    def post(self, user_id):\r\n        return f\"POST {user_id}\"\r\n\r\n    def delete(self, user_id):\r\n        return f\"DELETE {user_id}\"\r\n\r\n    def put(self, user_id):\r\n        return f\"PUT {user_id}\"\r\n\r\n    def PATCH(self, user_id):\r\n        return f\"PATCH {user_id}\"\r\n```\r\n\r\n\r\n### Actual Behavior\r\nUsing a blueprint's `@route` decorator on a `MethodView` results in `TypeError` is raised:\r\n\r\n```pytb\r\nTraceback (most recent call last):\r\n  File \"/c/gitlab/mocvd/sic-inventory/.venv/lib/python3.6/site-packages/flask/app.py\", line 2463, in __call__\r\n    return self.wsgi_app(environ, start_response)\r\n  File \"/c/gitlab/mocvd/sic-inventory/.venv/lib/python3.6/site-packages/flask/app.py\", line 2449, in wsgi_app\r\n    response = self.handle_exception(e)\r\n  File \"/c/gitlab/mocvd/sic-inventory/.venv/lib/python3.6/site-packages/flask/app.py\", line 1866, in handle_exception\r\n    reraise(exc_type, exc_value, tb)\r\n  File \"/c/gitlab/mocvd/sic-inventory/.venv/lib/python3.6/site-packages/flask/_compat.py\", line 39, in reraise\r\n    raise value\r\n  File \"/c/gitlab/mocvd/sic-inventory/.venv/lib/python3.6/site-packages/flask/app.py\", line 2446, in wsgi_app\r\n    response = self.full_dispatch_request()\r\n  File \"/c/gitlab/mocvd/sic-inventory/.venv/lib/python3.6/site-packages/flask/app.py\", line 1952, in full_dispatch_request\r\n    return self.finalize_request(rv)\r\n  File \"/c/gitlab/mocvd/sic-inventory/.venv/lib/python3.6/site-packages/flask/app.py\", line 1967, in finalize_request\r\n    response = self.make_response(rv)\r\n  File \"/c/gitlab/mocvd/sic-inventory/.venv/lib/python3.6/site-packages/flask/app.py\", line 2130, in make_response\r\n    \" {rv.__class__.__name__}.\".format(rv=rv)\r\nTypeError: The view function did not return a valid response. The return type must be a string, dict, tuple, Response instance, or WSGI callable, but it was a UserAPI.\r\n```\r\n\r\nInstead, users need to manually add rules to the app after the fact, which can be hard to read and requires that the `app` instance be available in the module.\r\n\r\n```python\r\nuser_view = UserAPI.as_view('user_api')\r\napp.add_url_rule('/users/', defaults={'user_id': None},\r\n                 view_func=user_view, methods=['GET',])\r\napp.add_url_rule('/users/', view_func=user_view, methods=['POST',])\r\napp.add_url_rule('/users/<int:user_id>', view_func=user_view,\r\n                 methods=['GET', 'PUT', 'PATCH', 'DELETE'])\r\n```\r\n\r\n\r\n### Environment\r\n\r\n* Python version: 3.6.8\r\n* Flask version: 1.1.1\r\n* Werkzeug version: 0.16.0\r\n\r\n\r\n### The Fix\r\n\r\nBased on my testing is *should* be relatively trivial to support this. All that needs to be done is edit `Blueprint.route`:\r\n\r\n```diff\r\ndiff --git a/src/flask/blueprints.py b/src/flask/blueprints.py\r\nindex 8978104d..f6f62dd6 100644\r\n--- a/src/flask/blueprints.py\r\n+++ b/src/flask/blueprints.py\r\n@@ -11,6 +11,8 @@\r\n \"\"\"\r\n from functools import update_wrapper\r\n\r\n+from .views import MethodViewType\r\n+\r\n from .helpers import _endpoint_from_view_func\r\n from .helpers import _PackageBoundObject\r\n\r\n@@ -276,6 +278,11 @@ class Blueprint(_PackageBoundObject):\r\n\r\n         def decorator(f):\r\n             endpoint = options.pop(\"endpoint\", f.__name__)\r\n+\r\n+            # Support decorating MethodView classes\r\n+            if isinstance(f, MethodViewType):\r\n+                f = f.as_view(endpoint)\r\n+\r\n             self.add_url_rule(rule, endpoint, f, **options)\r\n             return f\r\n```\r\n\r\n**Note:** I originally saw this feature in the `marshmallow-code/flask-smorest` library (originally `Nobatek/flask-rest-api`) [flask_smorest/blueprint.py](https://github.com/marshmallow-code/flask-smorest/blob/cc618f74abc2035d9f2904efed32cfc3bafad3ab/flask_smorest/blueprint.py#L90).\r\nThe above code is taken almost verbatim from that library."
}