{
    "url": "https://api.github.com/repos/pallets/flask/issues/1590",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/1590/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/1590/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/1590/events",
    "html_url": "https://github.com/pallets/flask/issues/1590",
    "id": 112725213,
    "node_id": "MDU6SXNzdWUxMTI3MjUyMTM=",
    "number": 1590,
    "title": "in pluggable views, why not passing url variable parameters to view object?",
    "user": {
        "login": "ethe",
        "id": 12211036,
        "node_id": "MDQ6VXNlcjEyMjExMDM2",
        "avatar_url": "https://avatars0.githubusercontent.com/u/12211036?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ethe",
        "html_url": "https://github.com/ethe",
        "followers_url": "https://api.github.com/users/ethe/followers",
        "following_url": "https://api.github.com/users/ethe/following{/other_user}",
        "gists_url": "https://api.github.com/users/ethe/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ethe/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ethe/subscriptions",
        "organizations_url": "https://api.github.com/users/ethe/orgs",
        "repos_url": "https://api.github.com/users/ethe/repos",
        "events_url": "https://api.github.com/users/ethe/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ethe/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2015-10-22T03:38:57Z",
    "updated_at": "2015-10-22T05:55:06Z",
    "closed_at": "2015-10-22T05:00:26Z",
    "author_association": "NONE",
    "body": "in flask doc's giving examples, the view would look like this:\n\n``` python\nclass UserAPI(MethodView):\n\n    def get(self, user_id):\n        if user_id is None:\n            # return a list of users\n            pass\n        else:\n            # expose a single user\n            pass\n\n    def post(self):\n        # create a new user\n        pass\n\n    def delete(self, user_id):\n        # delete a single user\n        pass\n\n    def put(self, user_id):\n        # update a single user\n        pass\n```\n\nwhy not make it like this?\n\n``` python\nclass UserAPI(MethodView):\n\n    def __init__(self, user_id):\n        self.user_id = user_id\n\n    def get(self):\n        if self.user_id is None:\n            # return a list of users\n            pass\n        else:\n            # expose a single user\n            pass\n\n    def post(self):\n        # create a new user\n        pass\n\n    def delete(self):\n        # delete a single user\n        pass\n\n    def put(self):\n        # update a single user\n        pass\n```\n\nthe first way seems not simple and direct.\n",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/150106366",
            "html_url": "https://github.com/pallets/flask/issues/1590#issuecomment-150106366",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1590",
            "id": 150106366,
            "node_id": "MDEyOklzc3VlQ29tbWVudDE1MDEwNjM2Ng==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-10-22T05:00:26Z",
            "updated_at": "2015-10-22T05:01:34Z",
            "author_association": "MEMBER",
            "body": "That's not how these class based views were designed.  The `View` classes are _factories_, they're instantiated to create views, not to handle them.  This means you could create an `__init__` method that customizes what the views do.  For example, you could have a `APIView` that takes a model, so a common set of views could be applied to different models, `APIView.as_view('users', User)`.  That's not to say that you couldn't design a class that does what you want instead, but that's not what these were designed for.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/150114506",
            "html_url": "https://github.com/pallets/flask/issues/1590#issuecomment-150114506",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1590",
            "id": 150114506,
            "node_id": "MDEyOklzc3VlQ29tbWVudDE1MDExNDUwNg==",
            "user": {
                "login": "ethe",
                "id": 12211036,
                "node_id": "MDQ6VXNlcjEyMjExMDM2",
                "avatar_url": "https://avatars0.githubusercontent.com/u/12211036?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/ethe",
                "html_url": "https://github.com/ethe",
                "followers_url": "https://api.github.com/users/ethe/followers",
                "following_url": "https://api.github.com/users/ethe/following{/other_user}",
                "gists_url": "https://api.github.com/users/ethe/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/ethe/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ethe/subscriptions",
                "organizations_url": "https://api.github.com/users/ethe/orgs",
                "repos_url": "https://api.github.com/users/ethe/repos",
                "events_url": "https://api.github.com/users/ethe/events{/privacy}",
                "received_events_url": "https://api.github.com/users/ethe/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-10-22T05:55:06Z",
            "updated_at": "2015-10-22T05:55:06Z",
            "author_association": "NONE",
            "body": "thanks.\n"
        }
    ]
}