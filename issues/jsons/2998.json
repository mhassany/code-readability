{
    "url": "https://api.github.com/repos/pallets/flask/issues/2998",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/2998/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/2998/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/2998/events",
    "html_url": "https://github.com/pallets/flask/issues/2998",
    "id": 381733284,
    "node_id": "MDU6SXNzdWUzODE3MzMyODQ=",
    "number": 2998,
    "title": "Using logging's root logger before app.run() breaks Flask logging",
    "user": {
        "login": "ramnes",
        "id": 835072,
        "node_id": "MDQ6VXNlcjgzNTA3Mg==",
        "avatar_url": "https://avatars2.githubusercontent.com/u/835072?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ramnes",
        "html_url": "https://github.com/ramnes",
        "followers_url": "https://api.github.com/users/ramnes/followers",
        "following_url": "https://api.github.com/users/ramnes/following{/other_user}",
        "gists_url": "https://api.github.com/users/ramnes/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ramnes/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ramnes/subscriptions",
        "organizations_url": "https://api.github.com/users/ramnes/orgs",
        "repos_url": "https://api.github.com/users/ramnes/repos",
        "events_url": "https://api.github.com/users/ramnes/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ramnes/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 8,
    "created_at": "2018-11-16T19:38:10Z",
    "updated_at": "2019-03-05T22:53:49Z",
    "closed_at": "2018-11-29T13:50:05Z",
    "author_association": "NONE",
    "body": "On latest PyPI's release (1.0.2), using `logging`'s root logger before running Flask breaks its logging.\r\n\r\nFor example, with such a `run.py` file:\r\n```python\r\nimport logging\r\nimport flask\r\n\r\nlogging.info(\"it breaks\")\r\nflask.Flask(__name__).run()\r\n```\r\n\r\n`python run.py` outputs this:\r\n```\r\n * Serving Flask app \"run\" (lazy loading)\r\n * Environment: production\r\n   WARNING: Do not use the development server in a production environment.\r\n   Use a production WSGI server instead.\r\n * Debug mode: off\r\n```\r\n\r\nand then stops any kind of logging.\r\n\r\nThe application is running and answering, but you don't get the `Running on http://...` line, nor any request logging.\r\n\r\nIt's worth noting that using the root logger inside a route doesn't break Flask.",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/442754730",
            "html_url": "https://github.com/pallets/flask/issues/2998#issuecomment-442754730",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2998",
            "id": 442754730,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ0Mjc1NDczMA==",
            "user": {
                "login": "J-Parsons",
                "id": 5050183,
                "node_id": "MDQ6VXNlcjUwNTAxODM=",
                "avatar_url": "https://avatars3.githubusercontent.com/u/5050183?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/J-Parsons",
                "html_url": "https://github.com/J-Parsons",
                "followers_url": "https://api.github.com/users/J-Parsons/followers",
                "following_url": "https://api.github.com/users/J-Parsons/following{/other_user}",
                "gists_url": "https://api.github.com/users/J-Parsons/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/J-Parsons/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/J-Parsons/subscriptions",
                "organizations_url": "https://api.github.com/users/J-Parsons/orgs",
                "repos_url": "https://api.github.com/users/J-Parsons/repos",
                "events_url": "https://api.github.com/users/J-Parsons/events{/privacy}",
                "received_events_url": "https://api.github.com/users/J-Parsons/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2018-11-29T08:54:35Z",
            "updated_at": "2018-11-29T08:54:35Z",
            "author_association": "NONE",
            "body": "TL;DR: This behavior is caused by `flask.logging.has_level_handler()` and `logging.basicConfig()`.  Specifically, using the root logger (i.e. calling `logging.<function()>`) before calling `app.logger` will add a handler to the root logger and cause `flask.logging.has_level_handler()` to return True when it should return False.\r\n\r\nWhen you use any function from the logging module such as `logging.info('message')` or `logging.basicConfig(filename='some_log_file')`, you work with the root logger. The root logger is a Logger object that sits inside the logging module *with a default level of* `logging.WARNING`. The root logger isn't created with any handlers attached, but when you use a module-level function like those I offered previously (specifically any function that feeds into `basicConfig()`), they will attach a file handler or a stream handler to the root logger for you.\r\n\r\nFrom the logging module (3.7):\r\n```\r\ndef info(msg, *args, **kwargs):\r\n    ...\r\n    if len(root.handlers) == 0:\r\n        basicConfig()  # logging.debug(), etc... all feed into basicConfig()\r\n   ...\r\n\r\ndef basicConfig(**kwargs):\r\n    ...\r\n        if len(root.handlers) == 0:\r\n            ...  # left out for brevity\r\n            if handlers is None:\r\n                filename = kwargs.pop(\"filename\", None)  # if you use basicConfig() directly\r\n                mode = kwargs.pop(\"filemode\", 'a')\r\n                if filename:\r\n                    h = FileHandler(filename, mode)\r\n                else:\r\n                    stream = kwargs.pop(\"stream\", None)  # if you use message-emitting functions like info()\r\n                    h = StreamHandler(stream)\r\n            ...  # Some formatting stuff\r\n                root.addHandler(h)  # Adds the stream or file handler to the root logger\r\n            ...\r\n```\r\n\r\nIn the scenario laid out by @ramnes, the root logger is used first, will have a default level of warning, and will have a stream handler attached to it. Now if we go to `flask.logging.create_logger()` (which is where all of the calls to the application-level logger will feed into some time after the call to `logging.info()`), we see the following in the `flask.logging` module:\r\n\r\n```\r\ndef create_logger(app)\r\n    ...\r\n   logger = logging.getLogger('flask.app')\r\n   \r\n    # This prevents the problem if FLASK_DEBUG is set, but it won't trigger in this example.\r\n    if app.debug and logger.level == logging.NOTSET:\r\n        logger.setLevel(logging.DEBUG)\r\n\r\n    if not has_level_handler(logger):                                \r\n        logger.addHandler(default_handler)\r\n\r\n    return logger\r\n```\r\n\r\nThe primary issue lies with `has_level_handler()`:\r\n\r\n```\r\ndef has_level_handler(logger):\r\n    ...\r\n    level = logger.getEffectiveLevel()  # This is the first culprit, it will return 30 (the root logger's level)\r\n    current = logger\r\n\r\n    while current:\r\n        if any(handler.level <= level for handler in current.handlers):  # This is the second culprit\r\n            return True\r\n\r\n        if not current.propagate:\r\n            break\r\n\r\n        current = current.parent  # This is the third culprit\r\n\r\n    return False\r\n```\r\n\r\n`has_level_handler()` has three lines that cause the problem if used after a root logger is configured.\r\n\r\nFirst, in our example, `getEffectiveLevel()` will return a value of 30 (warning). The application logger begins its life with a level of 0, so `getEffectiveLevel()` will defer to the nearest level in the logging tree. In our case, that's the root logger with a level of 30 (the 30 is returned). Next, we enter the loop and check the application logger for any handlers with a level of 30 or below. We don't find any, so we get the logger's parent (the root logger) and loop again. This time, we do find a handler: *the handler logging attached to the root logger for us*. All handlers begin their life with a level of 0, so this incidental handler fits the the conditional `if any(handler.level <= level for handler in current.handlers)` *and has `has_level_handler()` return True when it should return False.* Hopping back to `create_logger()`, **this means that the application logger will never be given the default handler**.\r\n\r\nNow, whenever the application logger is asked to emit a message, it will have to defer to the nearest handler in the logging tree, which just so happens to be the incidental handler that we attached the root logger when we used it at the very beginning. In our example, this is a stream handler, which happens to default to stderr. Recall that the root logger defaults to a level of warning. This means that any messages with a debug- or info-level messages that the application logger attempts to emit will be suppressed. In our example, warning messages and above will still be output to stderr. If you call `basicConfig(filename='file.log')`, then warning messages and above will be appended to `file.log`. Notice that the werkzeug logger will still emit some warning messages if you haven't touched with it.\r\n\r\nThere are a couple of potential quick fixes (these won't solve the problem, only mask it)\r\n1. Call the application logger (`app.logger.<something>`) before the root logger so that it uses its own default handler (recommended).\r\n2. Give the application logger the level and handler (also with a level) you want before using it\r\n3. Set the root logger's level to something different\r\n4. Set the root logger's file / stream handler to something different\r\n5. Add more handlers (with levels) to the root logger \r\n\r\nFor a longer-fix, I would look at patching `flask.logging.has_level_handler()`, although I'm not sure how because I don't understand its intentions."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/442839979",
            "html_url": "https://github.com/pallets/flask/issues/2998#issuecomment-442839979",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2998",
            "id": 442839979,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MjgzOTk3OQ==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2018-11-29T13:50:05Z",
            "updated_at": "2018-11-29T13:50:05Z",
            "author_association": "MEMBER",
            "body": "This is absolutely intentional. #2436 Flask previously had behavior where it would clear any existing handlers and insert its own, which is bad behavior for a library and was disruptive to people who were configuring logging. Now it will only insert a handler if logging was not otherwise configured to handle its logs. If you want to use Python's logging, you should configure it very early and not rely on Flask's default behavior."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/442851745",
            "html_url": "https://github.com/pallets/flask/issues/2998#issuecomment-442851745",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2998",
            "id": 442851745,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ0Mjg1MTc0NQ==",
            "user": {
                "login": "ramnes",
                "id": 835072,
                "node_id": "MDQ6VXNlcjgzNTA3Mg==",
                "avatar_url": "https://avatars2.githubusercontent.com/u/835072?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/ramnes",
                "html_url": "https://github.com/ramnes",
                "followers_url": "https://api.github.com/users/ramnes/followers",
                "following_url": "https://api.github.com/users/ramnes/following{/other_user}",
                "gists_url": "https://api.github.com/users/ramnes/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/ramnes/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ramnes/subscriptions",
                "organizations_url": "https://api.github.com/users/ramnes/orgs",
                "repos_url": "https://api.github.com/users/ramnes/repos",
                "events_url": "https://api.github.com/users/ramnes/events{/privacy}",
                "received_events_url": "https://api.github.com/users/ramnes/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2018-11-29T14:25:16Z",
            "updated_at": "2018-11-29T14:31:01Z",
            "author_association": "NONE",
            "body": "Whether this behavior is the resultant of an intentional implementation or not is not the point here. I do agree that #2436 make things much better than just removing any existing handler as Flask used to do, but please understand that the current behavior is very developer-hostile in that particular case. No one, beside someone that perfectly knows Flask internals, would consider `logging.info(\"it breaks\")` as a way of configuring (or just altering) Flask's logging. And yet, the root logger is mostly used by beginners, and developers that just want to throw some logging somewhere quickly for debugging purposes. I don't know any library other than Flask which has its logging altered by a simple use of the root logger."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/442854585",
            "html_url": "https://github.com/pallets/flask/issues/2998#issuecomment-442854585",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2998",
            "id": 442854585,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ0Mjg1NDU4NQ==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2018-11-29T14:33:07Z",
            "updated_at": "2018-11-29T14:34:00Z",
            "author_association": "MEMBER",
            "body": "It's not Flask's logging you're configuring, it's Python's. Open an issue with Python if you find that confusing. There is no 100% solution, I'm not changing this again."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/442870520",
            "html_url": "https://github.com/pallets/flask/issues/2998#issuecomment-442870520",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2998",
            "id": 442870520,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ0Mjg3MDUyMA==",
            "user": {
                "login": "ramnes",
                "id": 835072,
                "node_id": "MDQ6VXNlcjgzNTA3Mg==",
                "avatar_url": "https://avatars2.githubusercontent.com/u/835072?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/ramnes",
                "html_url": "https://github.com/ramnes",
                "followers_url": "https://api.github.com/users/ramnes/followers",
                "following_url": "https://api.github.com/users/ramnes/following{/other_user}",
                "gists_url": "https://api.github.com/users/ramnes/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/ramnes/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ramnes/subscriptions",
                "organizations_url": "https://api.github.com/users/ramnes/orgs",
                "repos_url": "https://api.github.com/users/ramnes/repos",
                "events_url": "https://api.github.com/users/ramnes/events{/privacy}",
                "received_events_url": "https://api.github.com/users/ramnes/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2018-11-29T15:16:42Z",
            "updated_at": "2018-11-29T15:17:59Z",
            "author_association": "NONE",
            "body": "I do agree that the fault mostly comes from Python here. But still, I could not understand why there was no log at all rather than some logs using the default handler, so I gave a quick look in the code. The reason actually lies in Werkzeug, not Flask. Please consider the following PR for a proposal of changes that would fix this \"for free\": https://github.com/pallets/werkzeug/pull/1407"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/469890114",
            "html_url": "https://github.com/pallets/flask/issues/2998#issuecomment-469890114",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2998",
            "id": 469890114,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ2OTg5MDExNA==",
            "user": {
                "login": "celvartamfam",
                "id": 39306828,
                "node_id": "MDQ6VXNlcjM5MzA2ODI4",
                "avatar_url": "https://avatars0.githubusercontent.com/u/39306828?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/celvartamfam",
                "html_url": "https://github.com/celvartamfam",
                "followers_url": "https://api.github.com/users/celvartamfam/followers",
                "following_url": "https://api.github.com/users/celvartamfam/following{/other_user}",
                "gists_url": "https://api.github.com/users/celvartamfam/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/celvartamfam/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/celvartamfam/subscriptions",
                "organizations_url": "https://api.github.com/users/celvartamfam/orgs",
                "repos_url": "https://api.github.com/users/celvartamfam/repos",
                "events_url": "https://api.github.com/users/celvartamfam/events{/privacy}",
                "received_events_url": "https://api.github.com/users/celvartamfam/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2019-03-05T22:47:47Z",
            "updated_at": "2019-03-05T22:47:47Z",
            "author_association": "NONE",
            "body": "I see a different behavior.  When I configure the root logger before any flask code is executed I still get a handler attached to the \"werkzeug\" handler that outputs plain text to stderr but leaves the propagate flag on.\r\n\r\nI have configured my service to output JSON formatted log messages that can be parsed by an ELK stack with the field I want so I can correlate all the log messages from any given operation all through all of the microservices it uses.\r\n\r\nAs a result of the added handler...  If I do nothing I get both a JSON line and a plain text line."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/469891143",
            "html_url": "https://github.com/pallets/flask/issues/2998#issuecomment-469891143",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2998",
            "id": 469891143,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ2OTg5MTE0Mw==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2019-03-05T22:51:14Z",
            "updated_at": "2019-03-05T22:51:14Z",
            "author_association": "MEMBER",
            "body": "@celvartamfam see the linked PR in the comment above yours."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/469891539",
            "html_url": "https://github.com/pallets/flask/issues/2998#issuecomment-469891539",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2998",
            "id": 469891539,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ2OTg5MTUzOQ==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2019-03-05T22:52:32Z",
            "updated_at": "2019-03-05T22:53:49Z",
            "author_association": "MEMBER",
            "body": "Logging configuration should be done for each library that outputs logging, that's just how Python is set up. This is discussed in the [documentation](http://flask.pocoo.org/docs/1.0/logging/#other-libraries). Flask's logging does not affect Werkzeug's.\r\n\r\nAlso, it sounds like you're using the dev server in a production environment, which is the only time werkzeug logs would output. Don't do that."
        }
    ]
}