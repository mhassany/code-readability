{
    "url": "https://api.github.com/repos/pallets/flask/issues/1073",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/1073/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/1073/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/1073/events",
    "html_url": "https://github.com/pallets/flask/issues/1073",
    "id": 34637893,
    "node_id": "MDU6SXNzdWUzNDYzNzg5Mw==",
    "number": 1073,
    "title": "Python Flask Gevent stack - Simple \u201cHello World\u201d app shows as inefficient when benchmarked",
    "user": {
        "login": "ghost",
        "id": 10137,
        "node_id": "MDQ6VXNlcjEwMTM3",
        "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ghost",
        "html_url": "https://github.com/ghost",
        "followers_url": "https://api.github.com/users/ghost/followers",
        "following_url": "https://api.github.com/users/ghost/following{/other_user}",
        "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
        "organizations_url": "https://api.github.com/users/ghost/orgs",
        "repos_url": "https://api.github.com/users/ghost/repos",
        "events_url": "https://api.github.com/users/ghost/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ghost/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 14,
    "created_at": "2014-05-30T11:30:28Z",
    "updated_at": "2016-06-08T22:15:12Z",
    "closed_at": "2014-07-26T13:57:05Z",
    "author_association": "NONE",
    "body": "I have the following simple \"Hello World\" app:\n\n```\nfrom gevent import monkey\nmonkey.patch_all()\nfrom flask import Flask\nfrom gevent import wsgi\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n  return 'Hello World'\n\nserver = wsgi.WSGIServer(('127.0.0.1', 5000), app)\nserver.serve_forever()\n```\n\nAs you can see it's pretty straightforward.\n\nThe problem is that despite such simpliness it's pretty slow/inefficient as the following benchmark (made with Apache Benchmark) shows:\n\n```\nab -k -n 1000 -c 100 http://127.0.0.1:5000/\n\nBenchmarking 127.0.0.1 (be patient)\nCompleted 100 requests\nCompleted 200 requests\nCompleted 300 requests\nCompleted 400 requests\nCompleted 500 requests\nCompleted 600 requests\nCompleted 700 requests\nCompleted 800 requests\nCompleted 900 requests\nCompleted 1000 requests\nFinished 1000 requests\n\n\nServer Software:        \nServer Hostname:        127.0.0.1\nServer Port:            5000\n\nDocument Path:          /\nDocument Length:        11 bytes\n\nConcurrency Level:      100\nTime taken for tests:   1.515 seconds\nComplete requests:      1000\nFailed requests:        0\nWrite errors:           0\nKeep-Alive requests:    0\nTotal transferred:      146000 bytes\nHTML transferred:       11000 bytes\nRequests per second:    660.22 [#/sec] (mean)\nTime per request:       151.465 [ms] (mean)\nTime per request:       1.515 [ms] (mean, across all concurrent requests)\nTransfer rate:          94.13 [Kbytes/sec] received\n\nConnection Times (ms)\n              min  mean[+/-sd] median   max\nConnect:        0    0   0.6      0       3\nProcessing:     1  145  33.5    149     191\nWaiting:        1  144  33.5    148     191\nTotal:          4  145  33.0    149     191\n\nPercentage of the requests served within a certain time (ms)\n  50%    149\n  66%    157\n  75%    165\n  80%    173\n  90%    183\n  95%    185\n  98%    187\n  99%    188\n 100%    191 (longest request)\n```\n\nEventually increasing the number of connections and/or concurrency doesn't bring better results, in fact it becomes worse.\n\nWhat I'm most concerned about is the fact that I can't go over 700 **Requests per second** and a **Transfer rate** of 98 Kbytes/sec.\n\nAlso, the individual **Time per request** seems to be too much.\n\nI got curious about what Python and Gevent are doing in the background, or better, what the OS is doing, so I used a **strace** to determine eventual system-side issues and here's the result:\n\n```\n% time     seconds  usecs/call     calls    errors syscall\n------ ----------- ----------- --------- --------- ----------------\n 56.46    0.000284           0      1386           close\n 24.25    0.000122           0      1016           write\n 10.74    0.000054           0      1000           send\n  4.17    0.000021           0      3652      3271 open\n  2.19    0.000011           0       641           read\n  2.19    0.000011           0      6006           fcntl64\n  0.00    0.000000           0         1           waitpid\n  0.00    0.000000           0         1           execve\n  0.00    0.000000           0         3           time\n  0.00    0.000000           0        12        12 access\n  0.00    0.000000           0        32           brk\n  0.00    0.000000           0         5         1 ioctl\n  0.00    0.000000           0      5006           gettimeofday\n  0.00    0.000000           0         4         2 readlink\n  0.00    0.000000           0       191           munmap\n  0.00    0.000000           0         1         1 statfs\n  0.00    0.000000           0         1         1 sigreturn\n  0.00    0.000000           0         2           clone\n  0.00    0.000000           0         2           uname\n  0.00    0.000000           0        21           mprotect\n  0.00    0.000000           0        69        65 _llseek\n  0.00    0.000000           0        71           rt_sigaction\n  0.00    0.000000           0         1           rt_sigprocmask\n  0.00    0.000000           0         3           getcwd\n  0.00    0.000000           0         1           getrlimit\n  0.00    0.000000           0       243           mmap2\n  0.00    0.000000           0      1838       748 stat64\n  0.00    0.000000           0        74           lstat64\n  0.00    0.000000           0       630           fstat64\n  0.00    0.000000           0         1           getuid32\n  0.00    0.000000           0         1           getgid32\n  0.00    0.000000           0         1           geteuid32\n  0.00    0.000000           0         1           getegid32\n  0.00    0.000000           0         4           getdents64\n  0.00    0.000000           0         3         1 futex\n  0.00    0.000000           0         1           set_thread_area\n  0.00    0.000000           0         2           epoll_ctl\n  0.00    0.000000           0        12         1 epoll_wait\n  0.00    0.000000           0         1           set_tid_address\n  0.00    0.000000           0        26           clock_gettime\n  0.00    0.000000           0         2           openat\n  0.00    0.000000           0         1           set_robust_list\n  0.00    0.000000           0         1           eventfd2\n  0.00    0.000000           0         1           epoll_create1\n  0.00    0.000000           0         1           pipe2\n  0.00    0.000000           0         1           socket\n  0.00    0.000000           0         1           bind\n  0.00    0.000000           0         1           listen\n  0.00    0.000000           0      1000           accept\n  0.00    0.000000           0         1           getsockname\n  0.00    0.000000           0      2000      1000 recv\n  0.00    0.000000           0         1           setsockopt\n------ ----------- ----------- --------- --------- ----------------\n100.00    0.000503                 24977      5103 total\n```\n\nAs you can see there are 5103 errors, the worst offender being the **open** **syscall** which I suspect has to do with files not being found (**ENOENT**). To my surprise **epoll** didn't look like a _troubler_, as I heard of many horror stories about it.\n\nI wish to post the full **strace** which goes into the detail of every single call, but it is way too large.\n\nA final note; I also set the following system parameters (which are the maximum allowed amount) hoping it would change the situation but it didn't:\n\n```\necho \u201c32768   61000\u2033 > /proc/sys/net/ipv4/ip_local_port_range\nsysctl -w fs.file-max=128000\nsysctl -w net.ipv4.tcp_keepalive_time=300\nsysctl -w net.core.somaxconn=61000\nsysctl -w net.ipv4.tcp_max_syn_backlog=2500\nsysctl -w net.core.netdev_max_backlog=2500\nulimit -n 1024\n```\n\nMy question is, given that the sample I'm using can't be changed so much to fix these issues, where should I look to correct them?\n\nFor a comparison I made the following \"Hello World\" script with Wheezy.web & Gevent and I got ~2000 Requests per second:\n\n```\nfrom gevent import monkey\nmonkey.patch_all()\nfrom gevent import pywsgi\nfrom wheezy.http import HTTPResponse\nfrom wheezy.http import WSGIApplication\nfrom wheezy.routing import url\nfrom wheezy.web.handlers import BaseHandler\nfrom wheezy.web.middleware import bootstrap_defaults\nfrom wheezy.web.middleware import path_routing_middleware_factory\n\ndef helloworld(request):\n    response = HTTPResponse()\n    response.write('hello world')\n    return response\n\n\nroutes = [\n    url('hello', helloworld, name='helloworld')\n]\n\n\noptions = {}\nmain = WSGIApplication(\n    middleware=[\n        bootstrap_defaults(url_mapping=routes),\n        path_routing_middleware_factory\n    ],\n    options=options\n)\n\n\nserver = pywsgi.WSGIServer(('127.0.0.1', 5000), main, backlog=128000)\nserver.serve_forever()\n```\n\nAnd the benchmark results:\n\n```\nab -k -n 1000 -c 1000 http://127.0.0.1:5000/hello\n\nBenchmarking 127.0.0.1 (be patient)\nCompleted 100 requests\nCompleted 200 requests\nCompleted 300 requests\nCompleted 400 requests\nCompleted 500 requests\nCompleted 600 requests\nCompleted 700 requests\nCompleted 800 requests\nCompleted 900 requests\nCompleted 1000 requests\nFinished 1000 requests\n\n\nServer Software:        \nServer Hostname:        127.0.0.1\nServer Port:            5000\n\nDocument Path:          /front\nDocument Length:        11 bytes\n\nConcurrency Level:      1000\nTime taken for tests:   0.484 seconds\nComplete requests:      1000\nFailed requests:        0\nWrite errors:           0\nKeep-Alive requests:    0\nTotal transferred:      170000 bytes\nHTML transferred:       11000 bytes\nRequests per second:    2067.15 [#/sec] (mean)\nTime per request:       483.758 [ms] (mean)\nTime per request:       0.484 [ms] (mean, across all concurrent requests)\nTransfer rate:          343.18 [Kbytes/sec] received\n\nConnection Times (ms)\n              min  mean[+/-sd] median   max\nConnect:        0    8  10.9      0      28\nProcessing:     2   78  39.7     56     263\nWaiting:        2   78  39.7     56     263\nTotal:         18   86  42.6     66     263\n\nPercentage of the requests served within a certain time (ms)\n  50%     66\n  66%     83\n  75%    129\n  80%    131\n  90%    152\n  95%    160\n  98%    178\n  99%    182\n 100%    263 (longest request)\n```\n\nI find Wheezy.web's speed great, but I'd still like to use Flask as it's far simpler and less time consuming to work with.\n",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/44643981",
            "html_url": "https://github.com/pallets/flask/issues/1073#issuecomment-44643981",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1073",
            "id": 44643981,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NjQzOTgx",
            "user": {
                "login": "danielchatfield",
                "id": 1058676,
                "node_id": "MDQ6VXNlcjEwNTg2NzY=",
                "avatar_url": "https://avatars3.githubusercontent.com/u/1058676?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/danielchatfield",
                "html_url": "https://github.com/danielchatfield",
                "followers_url": "https://api.github.com/users/danielchatfield/followers",
                "following_url": "https://api.github.com/users/danielchatfield/following{/other_user}",
                "gists_url": "https://api.github.com/users/danielchatfield/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/danielchatfield/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/danielchatfield/subscriptions",
                "organizations_url": "https://api.github.com/users/danielchatfield/orgs",
                "repos_url": "https://api.github.com/users/danielchatfield/repos",
                "events_url": "https://api.github.com/users/danielchatfield/events{/privacy}",
                "received_events_url": "https://api.github.com/users/danielchatfield/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-05-30T12:11:30Z",
            "updated_at": "2014-05-30T12:11:30Z",
            "author_association": "NONE",
            "body": "It would be interesting to see the `strace` of the Wheezy.web one.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/44645615",
            "html_url": "https://github.com/pallets/flask/issues/1073#issuecomment-44645615",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1073",
            "id": 44645615,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NjQ1NjE1",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-05-30T12:34:42Z",
            "updated_at": "2014-05-30T12:34:42Z",
            "author_association": "MEMBER",
            "body": "And now measure Django please, and tell them that it is too slow. I am sure\nthey'll tell you that Django is slower than Flask or Wheezy because it simply\ndoes more.\n\nOn Fri, May 30, 2014 at 04:30:38AM -0700, yakamooz wrote:\n\n> I have the following simple \"Hello World\" app:\n> \n> ```\n> from gevent import monkey\n> monkey.patch_all()\n> from flask import Flask\n> from gevent import wsgi\n> \n> app = Flask(__name__)\n> \n> @app.route('/')\n> def index():\n>   return 'Hello World'\n> \n> server = wsgi.WSGIServer(('127.0.0.1', 5000), app)\n> server.serve_forever()\n> ```\n> \n> As you can see it's pretty straightforward.\n> \n> The problem is that despite such simpliness it's pretty slow/inefficient as the following benchmark (made with Apache Benchmark) shows:\n> \n> ```\n> ab -k -n 1000 -c 100 http://127.0.0.1:5000/\n> \n> Benchmarking 127.0.0.1 (be patient)\n> Completed 100 requests\n> Completed 200 requests\n> Completed 300 requests\n> Completed 400 requests\n> Completed 500 requests\n> Completed 600 requests\n> Completed 700 requests\n> Completed 800 requests\n> Completed 900 requests\n> Completed 1000 requests\n> Finished 1000 requests\n> \n> \n> Server Software:        \n> Server Hostname:        127.0.0.1\n> Server Port:            5000\n> \n> Document Path:          /\n> Document Length:        11 bytes\n> \n> Concurrency Level:      100\n> Time taken for tests:   1.515 seconds\n> Complete requests:      1000\n> Failed requests:        0\n> Write errors:           0\n> Keep-Alive requests:    0\n> Total transferred:      146000 bytes\n> HTML transferred:       11000 bytes\n> Requests per second:    660.22 [#/sec] (mean)\n> Time per request:       151.465 [ms] (mean)\n> Time per request:       1.515 [ms] (mean, across all concurrent requests)\n> Transfer rate:          94.13 [Kbytes/sec] received\n> \n> Connection Times (ms)\n>               min  mean[+/-sd] median   max\n> Connect:        0    0   0.6      0       3\n> Processing:     1  145  33.5    149     191\n> Waiting:        1  144  33.5    148     191\n> Total:          4  145  33.0    149     191\n> \n> Percentage of the requests served within a certain time (ms)\n>   50%    149\n>   66%    157\n>   75%    165\n>   80%    173\n>   90%    183\n>   95%    185\n>   98%    187\n>   99%    188\n>  100%    191 (longest request)\n> ```\n> \n> Eventually increasing the number of connections and/or concurrency doesn't bring better results, in fact it becomes worse.\n> \n> What I'm most concerned about is the fact that I can't go over 700 **Requests per second** and a **Transfer rate** of 98 Kbytes/sec.\n> \n> Also, the individual **Time per request** seems to be too much.\n> \n> I got curious about what Python and Gevent are doing in the background, or better, what the OS is doing, so I used a **strace** to determine eventual system-side issues and here's the result:\n> \n> ```\n> % time     seconds  usecs/call     calls    errors syscall\n> ------ ----------- ----------- --------- --------- ----------------\n>  56.46    0.000284           0      1386           close\n>  24.25    0.000122           0      1016           write\n>  10.74    0.000054           0      1000           send\n>   4.17    0.000021           0      3652      3271 open\n>   2.19    0.000011           0       641           read\n>   2.19    0.000011           0      6006           fcntl64\n>   0.00    0.000000           0         1           waitpid\n>   0.00    0.000000           0         1           execve\n>   0.00    0.000000           0         3           time\n>   0.00    0.000000           0        12        12 access\n>   0.00    0.000000           0        32           brk\n>   0.00    0.000000           0         5         1 ioctl\n>   0.00    0.000000           0      5006           gettimeofday\n>   0.00    0.000000           0         4         2 readlink\n>   0.00    0.000000           0       191           munmap\n>   0.00    0.000000           0         1         1 statfs\n>   0.00    0.000000           0         1         1 sigreturn\n>   0.00    0.000000           0         2           clone\n>   0.00    0.000000           0         2           uname\n>   0.00    0.000000           0        21           mprotect\n>   0.00    0.000000           0        69        65 _llseek\n>   0.00    0.000000           0        71           rt_sigaction\n>   0.00    0.000000           0         1           rt_sigprocmask\n>   0.00    0.000000           0         3           getcwd\n>   0.00    0.000000           0         1           getrlimit\n>   0.00    0.000000           0       243           mmap2\n>   0.00    0.000000           0      1838       748 stat64\n>   0.00    0.000000           0        74           lstat64\n>   0.00    0.000000           0       630           fstat64\n>   0.00    0.000000           0         1           getuid32\n>   0.00    0.000000           0         1           getgid32\n>   0.00    0.000000           0         1           geteuid32\n>   0.00    0.000000           0         1           getegid32\n>   0.00    0.000000           0         4           getdents64\n>   0.00    0.000000           0         3         1 futex\n>   0.00    0.000000           0         1           set_thread_area\n>   0.00    0.000000           0         2           epoll_ctl\n>   0.00    0.000000           0        12         1 epoll_wait\n>   0.00    0.000000           0         1           set_tid_address\n>   0.00    0.000000           0        26           clock_gettime\n>   0.00    0.000000           0         2           openat\n>   0.00    0.000000           0         1           set_robust_list\n>   0.00    0.000000           0         1           eventfd2\n>   0.00    0.000000           0         1           epoll_create1\n>   0.00    0.000000           0         1           pipe2\n>   0.00    0.000000           0         1           socket\n>   0.00    0.000000           0         1           bind\n>   0.00    0.000000           0         1           listen\n>   0.00    0.000000           0      1000           accept\n>   0.00    0.000000           0         1           getsockname\n>   0.00    0.000000           0      2000      1000 recv\n>   0.00    0.000000           0         1           setsockopt\n> ------ ----------- ----------- --------- --------- ----------------\n> 100.00    0.000503                 24977      5103 total\n> ```\n> \n> As you can see there are 5103 errors, the worst offender being the **open** **syscall** which I suspect has to do with files not being found (**ENOENT**). To my surprise **epoll** didn't look like a _troubler_, as I heard of many horror stories about it.\n> \n> I wish to post the full **strace** which goes into the detail of every single call, but it is way too large.\n> \n> A final note; I also set the following system parameters (which are the maximum allowed amount) hoping it would change the situation but it didn't:\n> \n> ```\n> echo \u201c32768 61000\u2033 > /proc/sys/net/ipv4/ip_local_port_range\n> sysctl -w fs.file-max=128000\n> sysctl -w net.ipv4.tcp_keepalive_time=300\n> sysctl -w net.core.somaxconn=61000\n> sysctl -w net.ipv4.tcp_max_syn_backlog=2500\n> sysctl -w net.core.netdev_max_backlog=2500\n> ulimit -n 1024\n> ```\n> \n> My question is, given that the sample I'm using can't be changed so much to fix these issues, where should I look to correct them?\n> \n> For a comparison I made the following \"Hello World\" script with Wheezy.web & Gevent and I got ~2000 Requests per second:\n> \n> ```\n> from gevent import monkey\n> monkey.patch_all()\n> from gevent import pywsgi\n> from wheezy.http import HTTPResponse\n> from wheezy.http import WSGIApplication\n> from wheezy.routing import url\n> from wheezy.web.handlers import BaseHandler\n> from wheezy.web.middleware import bootstrap_defaults\n> from wheezy.web.middleware import path_routing_middleware_factory\n> \n> def helloworld(request):\n>     response = HTTPResponse()\n>     response.write('hello world')\n>     return response\n> \n> \n> routes = [\n>     url('hello', helloworld, name='helloworld')\n> ]\n> \n> \n> options = {}\n> main = WSGIApplication(\n>     middleware=[\n>         bootstrap_defaults(url_mapping=routes),\n>         path_routing_middleware_factory\n>     ],\n>     options=options\n> )\n> \n> \n> server = pywsgi.WSGIServer(('127.0.0.1', 5000), main, backlog=128000)\n> server.serve_forever()\n> ```\n> \n> And the benchmark results:\n> \n> ```\n> ab -k -n 1000 -c 1000 http://127.0.0.1:5000/hello\n> \n> Benchmarking 127.0.0.1 (be patient)\n> Completed 100 requests\n> Completed 200 requests\n> Completed 300 requests\n> Completed 400 requests\n> Completed 500 requests\n> Completed 600 requests\n> Completed 700 requests\n> Completed 800 requests\n> Completed 900 requests\n> Completed 1000 requests\n> Finished 1000 requests\n> \n> \n> Server Software:        \n> Server Hostname:        127.0.0.1\n> Server Port:            5000\n> \n> Document Path:          /front\n> Document Length:        11 bytes\n> \n> Concurrency Level:      1000\n> Time taken for tests:   0.484 seconds\n> Complete requests:      1000\n> Failed requests:        0\n> Write errors:           0\n> Keep-Alive requests:    0\n> Total transferred:      170000 bytes\n> HTML transferred:       11000 bytes\n> Requests per second:    2067.15 [#/sec] (mean)\n> Time per request:       483.758 [ms] (mean)\n> Time per request:       0.484 [ms] (mean, across all concurrent requests)\n> Transfer rate:          343.18 [Kbytes/sec] received\n> \n> Connection Times (ms)\n>               min  mean[+/-sd] median   max\n> Connect:        0    8  10.9      0      28\n> Processing:     2   78  39.7     56     263\n> Waiting:        2   78  39.7     56     263\n> Total:         18   86  42.6     66     263\n> \n> Percentage of the requests served within a certain time (ms)\n>   50%     66\n>   66%     83\n>   75%    129\n>   80%    131\n>   90%    152\n>   95%    160\n>   98%    178\n>   99%    182\n>  100%    263 (longest request)\n> ```\n> \n> I find Wheezy.web's speed great, but I'd still like to use Flask as it's far simpler and less time consuming to work with.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/mitsuhiko/flask/issues/1073\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/44646172",
            "html_url": "https://github.com/pallets/flask/issues/1073#issuecomment-44646172",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1073",
            "id": 44646172,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NjQ2MTcy",
            "user": {
                "login": "danielchatfield",
                "id": 1058676,
                "node_id": "MDQ6VXNlcjEwNTg2NzY=",
                "avatar_url": "https://avatars3.githubusercontent.com/u/1058676?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/danielchatfield",
                "html_url": "https://github.com/danielchatfield",
                "followers_url": "https://api.github.com/users/danielchatfield/followers",
                "following_url": "https://api.github.com/users/danielchatfield/following{/other_user}",
                "gists_url": "https://api.github.com/users/danielchatfield/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/danielchatfield/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/danielchatfield/subscriptions",
                "organizations_url": "https://api.github.com/users/danielchatfield/orgs",
                "repos_url": "https://api.github.com/users/danielchatfield/repos",
                "events_url": "https://api.github.com/users/danielchatfield/events{/privacy}",
                "received_events_url": "https://api.github.com/users/danielchatfield/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-05-30T12:41:52Z",
            "updated_at": "2014-05-30T12:41:52Z",
            "author_association": "NONE",
            "body": "I agree with @untitaker that striving for anything close to wheezy.web performance is not realistic -wheezy was designed explicitly for speed and high concurrency and thus lacks the flexibility of flask and doesn't do nearly as much stuff for you.\n\nIn fact if concurrent performance is of that much importance then go would probably be a better choice over python.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/44647264",
            "html_url": "https://github.com/pallets/flask/issues/1073#issuecomment-44647264",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1073",
            "id": 44647264,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NjQ3MjY0",
            "user": {
                "login": "ghost",
                "id": 10137,
                "node_id": "MDQ6VXNlcjEwMTM3",
                "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/ghost",
                "html_url": "https://github.com/ghost",
                "followers_url": "https://api.github.com/users/ghost/followers",
                "following_url": "https://api.github.com/users/ghost/following{/other_user}",
                "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
                "organizations_url": "https://api.github.com/users/ghost/orgs",
                "repos_url": "https://api.github.com/users/ghost/repos",
                "events_url": "https://api.github.com/users/ghost/events{/privacy}",
                "received_events_url": "https://api.github.com/users/ghost/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-05-30T12:56:00Z",
            "updated_at": "2014-05-30T12:59:32Z",
            "author_association": "NONE",
            "body": "@danielchatfield Here is the Wheezy.web strace (weird that it took more time in the background):\n\n```\n% time     seconds  usecs/call     calls    errors syscall\n------ ----------- ----------- --------- --------- ----------------\n 35.70    0.000876           0      2919       771 stat64\n 22.58    0.000554           0      2000           send\n  7.29    0.000179           0      4564      2280 recv\n  6.48    0.000159           0      3721      3277 open\n  6.07    0.000149           0     12858           fcntl64\n  5.70    0.000140           0      2207        65 accept\n  5.66    0.000139           0      2590           close\n  5.18    0.000127           0     10153           gettimeofday\n  2.08    0.000051           0       729           fstat64\n  1.39    0.000034           0       676           read\n  1.30    0.000032          32         1           waitpid\n  0.57    0.000014           0       292           mmap2\n  0.00    0.000000           0      2002           write\n  0.00    0.000000           0         1           execve\n  0.00    0.000000           0         4           time\n  0.00    0.000000           0        13        13 access\n  0.00    0.000000           0        39           brk\n  0.00    0.000000           0         5         1 ioctl\n  0.00    0.000000           0         4         2 readlink\n  0.00    0.000000           0       225           munmap\n  0.00    0.000000           0         1         1 statfs\n  0.00    0.000000           0         2           clone\n  0.00    0.000000           0         2           uname\n  0.00    0.000000           0        26           mprotect\n  0.00    0.000000           0        69        65 _llseek\n  0.00    0.000000           0        70           rt_sigaction\n  0.00    0.000000           0         1           rt_sigprocmask\n  0.00    0.000000           0         1           getcwd\n  0.00    0.000000           0         1           getrlimit\n  0.00    0.000000           0         5           lstat64\n  0.00    0.000000           0         1           getuid32\n  0.00    0.000000           0         1           getgid32\n  0.00    0.000000           0         1           geteuid32\n  0.00    0.000000           0         1           getegid32\n  0.00    0.000000           0         4           getdents64\n  0.00    0.000000           0         4         1 futex\n  0.00    0.000000           0         1           set_thread_area\n  0.00    0.000000           0       282           epoll_ctl\n  0.00    0.000000           0        89           epoll_wait\n  0.00    0.000000           0         1           set_tid_address\n  0.00    0.000000           0       181           clock_gettime\n  0.00    0.000000           0         2           openat\n  0.00    0.000000           0         1           set_robust_list\n  0.00    0.000000           0         1           eventfd2\n  0.00    0.000000           0         1           epoll_create1\n  0.00    0.000000           0         1           pipe2\n  0.00    0.000000           0         1           socket\n  0.00    0.000000           0         1           bind\n  0.00    0.000000           0         1           listen\n  0.00    0.000000           0         1           getsockname\n  0.00    0.000000           0         1           setsockopt\n------ ----------- ----------- --------- --------- ----------------\n100.00    0.002454                 45758      6476 total\n```\n\nThe fact is that I'm trying to squeeze the most out of Flask because I like its simplicity and speed of development in primis.\n\nThis wasn't an attempt to bash Flask and/or Python, really. I hope that given this benchmark and its strace someone could help me to find the \"culprit\" in Flask lower concurrency and fix it.\n\nI wouldn't go with Go (sorry for the confusion I introduced) because Python is cleaner and easier to work it.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/44650581",
            "html_url": "https://github.com/pallets/flask/issues/1073#issuecomment-44650581",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1073",
            "id": 44650581,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NjUwNTgx",
            "user": {
                "login": "methane",
                "id": 199592,
                "node_id": "MDQ6VXNlcjE5OTU5Mg==",
                "avatar_url": "https://avatars2.githubusercontent.com/u/199592?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/methane",
                "html_url": "https://github.com/methane",
                "followers_url": "https://api.github.com/users/methane/followers",
                "following_url": "https://api.github.com/users/methane/following{/other_user}",
                "gists_url": "https://api.github.com/users/methane/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/methane/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/methane/subscriptions",
                "organizations_url": "https://api.github.com/users/methane/orgs",
                "repos_url": "https://api.github.com/users/methane/repos",
                "events_url": "https://api.github.com/users/methane/events{/privacy}",
                "received_events_url": "https://api.github.com/users/methane/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-05-30T13:32:24Z",
            "updated_at": "2014-05-30T13:35:02Z",
            "author_association": "CONTRIBUTOR",
            "body": "Flask:\n\n```\nfcntl(15, F_GETFL)                      = 0x802 (flags O_RDWR|O_NONBLOCK) <0.000371>\nfcntl(15, F_SETFL, O_RDWR|O_NONBLOCK)   = 0 <0.001111>\ngettimeofday({1401456796, 717391}, NULL) = 0 <0.000255>\nrecvfrom(15, \"GET / HTTP/1.0\\r\\nConnection: Keep\"..., 8192, 0, NULL, NULL) = 106 <0.000385>\ngettimeofday({1401456796, 719872}, NULL) = 0 <0.000293>\ngettimeofday({1401456796, 721357}, NULL) = 0 <0.000367>\nsendto(15, \"HTTP/1.1 200 OK\\r\\nContent-Type: t\"..., 146, 0, NULL, 0) = 146 <0.000408>\ngettimeofday({1401456796, 722988}, NULL) = 0 <0.000089>\ngettimeofday({1401456796, 723339}, NULL) = 0 <0.000088>\nstat(\"/etc/localtime\", {st_mode=S_IFREG|0644, st_size=331, ...}) = 0 <0.000437>\nwrite(2, \"127.0.0.1 - - [2014-05-30 22:33:\"..., 70127.0.0.1 - - [2014-05-30 22:33:16] \"GET / HTTP/1.0\" 200 146 0.003116\n) = 70 <0.000489>\nrecvfrom(15, 0x2703cc4, 16384, 0, 0, 0) = -1 EAGAIN (Resource temporarily unavailable) <0.000395>\nclose(15)                               = 0 <0.000517>\n```\n\nWheezy.web:\n\n```\nfcntl(15, F_GETFL)                      = 0x802 (flags O_RDWR|O_NONBLOCK) <0.000335>\nfcntl(15, F_SETFL, O_RDWR|O_NONBLOCK)   = 0 <0.000378>\ngettimeofday({1401456852, 680479}, NULL) = 0 <0.001002>\nrecvfrom(15, \"GET /hello HTTP/1.0\\r\\nConnection:\"..., 8192, 0, NULL, NULL) = 111 <0.000553>\ngettimeofday({1401456852, 684721}, NULL) = 0 <0.000306>\ngettimeofday({1401456852, 685890}, NULL) = 0 <0.000578>\nsendto(15, \"HTTP/1.1 200 OK\\r\\nContent-Type: t\"..., 170, 0, NULL, 0) = 170 <0.000739>\ngettimeofday({1401456852, 688582}, NULL) = 0 <0.001020>\ngettimeofday({1401456852, 690220}, NULL) = 0 <0.000405>\nstat(\"/etc/localtime\", {st_mode=S_IFREG|0644, st_size=331, ...}) = 0 <0.000339>\nwrite(2, \"127.0.0.1 - - [2014-05-30 22:34:\"..., 75127.0.0.1 - - [2014-05-30 22:34:12] \"GET /hello HTTP/1.0\" 200 170 0.003861\n) = 75 <0.000424>\nrecvfrom(15, 0x23b9f54, 16384, 0, 0, 0) = -1 EAGAIN (Resource temporarily unavailable) <0.000475>\nclose(15)                               = 0 <0.000638>\n```\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/44651891",
            "html_url": "https://github.com/pallets/flask/issues/1073#issuecomment-44651891",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1073",
            "id": 44651891,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NjUxODkx",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-05-30T13:45:39Z",
            "updated_at": "2014-05-30T13:45:39Z",
            "author_association": "MEMBER",
            "body": "I don't think it can be fixed, because improving Flask's performance to be comparable with Wheezy ultimatively would mean to remove functionality.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/44652005",
            "html_url": "https://github.com/pallets/flask/issues/1073#issuecomment-44652005",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1073",
            "id": 44652005,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NjUyMDA1",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-05-30T13:46:41Z",
            "updated_at": "2014-05-30T13:46:41Z",
            "author_association": "MEMBER",
            "body": "Of course that doesn't mean that any improvements could be made, but i am sure there are no low-hanging fruits.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/44652609",
            "html_url": "https://github.com/pallets/flask/issues/1073#issuecomment-44652609",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1073",
            "id": 44652609,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NjUyNjA5",
            "user": {
                "login": "methane",
                "id": 199592,
                "node_id": "MDQ6VXNlcjE5OTU5Mg==",
                "avatar_url": "https://avatars2.githubusercontent.com/u/199592?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/methane",
                "html_url": "https://github.com/methane",
                "followers_url": "https://api.github.com/users/methane/followers",
                "following_url": "https://api.github.com/users/methane/following{/other_user}",
                "gists_url": "https://api.github.com/users/methane/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/methane/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/methane/subscriptions",
                "organizations_url": "https://api.github.com/users/methane/orgs",
                "repos_url": "https://api.github.com/users/methane/repos",
                "events_url": "https://api.github.com/users/methane/events{/privacy}",
                "received_events_url": "https://api.github.com/users/methane/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-05-30T13:51:28Z",
            "updated_at": "2014-05-30T13:51:28Z",
            "author_association": "CONTRIBUTOR",
            "body": "Another data\n\nwheezy.web:\n\n```\n./wrk -d 10 -c 100 http://127.0.0.1:5000/hello\nRunning 10s test @ http://127.0.0.1:5000/hello\n  2 threads and 100 connections\n  Thread Stats   Avg      Stdev     Max   +/- Stdev\n    Latency     3.67s     1.37s    4.20s    87.65%\n    Req/Sec     1.02k     0.94k    2.56k    35.43%\n  19061 requests in 10.00s, 2.74MB read\n  Socket errors: connect 0, read 0, write 0, timeout 64\nRequests/sec:   1906.22\nTransfer/sec:    281.09KB\n\n# time of server\nreal    0m15.023s\nuser    0m5.431s\nsys     0m3.403s\n```\n\nFlask:\n\n```\n$ ./wrk -d 10 -c 100 http://127.0.0.1:5000/\nRunning 10s test @ http://127.0.0.1:5000/\n  2 threads and 100 connections\n  Thread Stats   Avg      Stdev     Max   +/- Stdev\n    Latency     6.53s     2.33s    7.43s    88.61%\n    Req/Sec   718.82    691.44     1.67k    29.73%\n  13451 requests in 10.00s, 1.63MB read\n  Socket errors: connect 0, read 0, write 0, timeout 160\nRequests/sec:   1344.95\nTransfer/sec:    166.81KB\n\nreal    0m14.723s\nuser    0m6.828s\nsys     0m2.467s\n```\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/44652766",
            "html_url": "https://github.com/pallets/flask/issues/1073#issuecomment-44652766",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1073",
            "id": 44652766,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NjUyNzY2",
            "user": {
                "login": "methane",
                "id": 199592,
                "node_id": "MDQ6VXNlcjE5OTU5Mg==",
                "avatar_url": "https://avatars2.githubusercontent.com/u/199592?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/methane",
                "html_url": "https://github.com/methane",
                "followers_url": "https://api.github.com/users/methane/followers",
                "following_url": "https://api.github.com/users/methane/following{/other_user}",
                "gists_url": "https://api.github.com/users/methane/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/methane/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/methane/subscriptions",
                "organizations_url": "https://api.github.com/users/methane/orgs",
                "repos_url": "https://api.github.com/users/methane/repos",
                "events_url": "https://api.github.com/users/methane/events{/privacy}",
                "received_events_url": "https://api.github.com/users/methane/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-05-30T13:53:08Z",
            "updated_at": "2014-05-30T13:53:08Z",
            "author_association": "CONTRIBUTOR",
            "body": "I agree with @untitaker \n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/44656440",
            "html_url": "https://github.com/pallets/flask/issues/1073#issuecomment-44656440",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1073",
            "id": 44656440,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NjU2NDQw",
            "user": {
                "login": "ghost",
                "id": 10137,
                "node_id": "MDQ6VXNlcjEwMTM3",
                "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/ghost",
                "html_url": "https://github.com/ghost",
                "followers_url": "https://api.github.com/users/ghost/followers",
                "following_url": "https://api.github.com/users/ghost/following{/other_user}",
                "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
                "organizations_url": "https://api.github.com/users/ghost/orgs",
                "repos_url": "https://api.github.com/users/ghost/repos",
                "events_url": "https://api.github.com/users/ghost/events{/privacy}",
                "received_events_url": "https://api.github.com/users/ghost/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-05-30T14:25:29Z",
            "updated_at": "2014-05-30T14:25:29Z",
            "author_association": "NONE",
            "body": "@methane Looking at the strace make it look like there's no much difference between the two. Now that the community confirmed its performance, what do you suggest I do to handle 1500-2000 Requests per second without modifying Flask? Switch from CPython to Pypy? Spread Python processes over many servers and CPU's?\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/44681572",
            "html_url": "https://github.com/pallets/flask/issues/1073#issuecomment-44681572",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1073",
            "id": 44681572,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NjgxNTcy",
            "user": {
                "login": "DasIch",
                "id": 182316,
                "node_id": "MDQ6VXNlcjE4MjMxNg==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/182316?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/DasIch",
                "html_url": "https://github.com/DasIch",
                "followers_url": "https://api.github.com/users/DasIch/followers",
                "following_url": "https://api.github.com/users/DasIch/following{/other_user}",
                "gists_url": "https://api.github.com/users/DasIch/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/DasIch/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/DasIch/subscriptions",
                "organizations_url": "https://api.github.com/users/DasIch/orgs",
                "repos_url": "https://api.github.com/users/DasIch/repos",
                "events_url": "https://api.github.com/users/DasIch/events{/privacy}",
                "received_events_url": "https://api.github.com/users/DasIch/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-05-30T18:08:49Z",
            "updated_at": "2014-05-30T18:08:49Z",
            "author_association": "CONTRIBUTOR",
            "body": "First of all 10.000 requests is a fairly small number, you want to increase that to about 100.000 or even 1.000.000.\n\nNevertheless if I replicate your benchmark exactly on my machine (Mid 2011 MacBook Air 1.8 GHz i7) I get more than twice the performance.\n\nSwitching to PyPy for faster interpretation, using gunicorn with eventlet (no gevent with PyPy, yet at least), using 6 worker processes which seem to produce optimal results and adjusting the number of requests to 1.000.000 I get a throughput of 780 Kb/s and 4600 req/s.\n\nFurther looking at the benchmark method used I can't help but feel that 100 concurrent requests are also fairly low. In fact there are people reconfiguring kernels and developing async systems to achieve more than 10k concurrent requests. Simply setting the file descriptor limit to ulimit -n 10000 allowed me to increase the number of concurrent requests to 350 - by far not as high as I hoped but with more effort one could probably make more requests work - which allowed for a small but decent increase to about 5200 req/s and 900 Kb/s.\n\nThis is far faster than what you have achieved for both Flask and Wheezy, even accounting for my apparently faster hardware.\n\nThe problem here is not that Flask is slow you simply haven't configured your web server correctly. You could probably improve performance further still by using varnish for example. My machine is not exactly server material and given that hardware costs much less than developer time, getting a nice server would be an easy way to increase performance significantly as well.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/44760313",
            "html_url": "https://github.com/pallets/flask/issues/1073#issuecomment-44760313",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1073",
            "id": 44760313,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NzYwMzEz",
            "user": {
                "login": "ghost",
                "id": 10137,
                "node_id": "MDQ6VXNlcjEwMTM3",
                "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/ghost",
                "html_url": "https://github.com/ghost",
                "followers_url": "https://api.github.com/users/ghost/followers",
                "following_url": "https://api.github.com/users/ghost/following{/other_user}",
                "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
                "organizations_url": "https://api.github.com/users/ghost/orgs",
                "repos_url": "https://api.github.com/users/ghost/repos",
                "events_url": "https://api.github.com/users/ghost/events{/privacy}",
                "received_events_url": "https://api.github.com/users/ghost/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-05-31T21:33:57Z",
            "updated_at": "2014-05-31T21:36:24Z",
            "author_association": "NONE",
            "body": "@DasIch  It looks like your machine has more throughput than mine. May I ask you how you run Gunicorn and PyPy?\n\nI wanted to try PyPy too and got faster results like yours.\n\nFor the test I used Monocle + Tornado (and PyPy of course) and 1000 concurrent connections x1000 times.\n\nI got ~6000 req/s with it. I got way worse results with Wheezy.web this time.\n\nI know that Gevent isn't (still) supposed to work with PyPy, but I wanted to give it a try and make it work anyway. You guess, I got it working without too much effort. Though I'm very dubious that it works 100% at all, but good, this is a start point nonetheless.\n\nSo, I got the Gevent + Flask snippet to work with PyPy and it wasn't bad (~4-5000 req/s when fully \"warmed\"). It was still less performing than Monocle + Tornado. But if you have to trade the simplicity of Flask for the performance of Monocle + Tornado you can live with the performance of Flask + Gevent anyway as there's no much difference and you got to produce faster.\n\nI want to share with you how I got Gevent and PyPy working, so we may fix remaining issues.\n\nFirst make sure that you have all the required libraries in your system:\n\n```\n$ apt-get install libssl-dev libev-dev libffi-dev ncurses-dev\n```\n\nInstall the cffi module:\n\n```\n$ pypy -m pip install cffi\n```\n\nInstall a version of Gevent which has been modified to run on PyPy:\n\n```\n$ git clone https://github.com/schmir/gevent.git\n$ cd gevent\n$ git checkout pypy-hacks\n$ pypy setup.py install\n```\n\nI also patched the gevent.core cffi module to fix the \"erroneous\" byte declaration that stopped the installation process. You may want to apply it:\n\n```\n$ git clone https://github.com/yakamooz/pypycore.git\n$ cd pypycore\n$ CFLAGS=-O2 pypy -m pip install -e .\n```\n\nThere is a socket.py that I patched in the \"pypycore\" folder you cloned from Github. Replace the one in /usr/lib/pypy/lib-python/2.7 with it (make a backup for safety).\n\nBefore doing anything with PyPy and Gevent make sure Gevent uses the right gevent.core in the following way:\n\n```\n$ export GEVENT_LOOP=pypycore.loop\n```\n\nNow you can use Gevent and PyPy together!\n\nI'd be glad if you posted your performance with it and see if you get more throughput than the ~4-5000 req/s I had.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/44772126",
            "html_url": "https://github.com/pallets/flask/issues/1073#issuecomment-44772126",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1073",
            "id": 44772126,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NzcyMTI2",
            "user": {
                "login": "ghost",
                "id": 10137,
                "node_id": "MDQ6VXNlcjEwMTM3",
                "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/ghost",
                "html_url": "https://github.com/ghost",
                "followers_url": "https://api.github.com/users/ghost/followers",
                "following_url": "https://api.github.com/users/ghost/following{/other_user}",
                "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
                "organizations_url": "https://api.github.com/users/ghost/orgs",
                "repos_url": "https://api.github.com/users/ghost/repos",
                "events_url": "https://api.github.com/users/ghost/events{/privacy}",
                "received_events_url": "https://api.github.com/users/ghost/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-06-01T08:57:19Z",
            "updated_at": "2014-06-01T12:42:14Z",
            "author_association": "NONE",
            "body": "**UPDATE**:\nIt looks like Syncless is x5-6 faster than Gevent, x1-2 than Tornado+Monocle on PyPy and Gunicorn+Eventlet on PyPy as I got ~7000 req/s with it https://code.google.com/p/syncless/ and Flask on pure Python.  \n\nI'm going to patch it to work with PyPy and see how much I get.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/224746572",
            "html_url": "https://github.com/pallets/flask/issues/1073#issuecomment-224746572",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1073",
            "id": 224746572,
            "node_id": "MDEyOklzc3VlQ29tbWVudDIyNDc0NjU3Mg==",
            "user": {
                "login": "genxstylez",
                "id": 1086338,
                "node_id": "MDQ6VXNlcjEwODYzMzg=",
                "avatar_url": "https://avatars2.githubusercontent.com/u/1086338?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/genxstylez",
                "html_url": "https://github.com/genxstylez",
                "followers_url": "https://api.github.com/users/genxstylez/followers",
                "following_url": "https://api.github.com/users/genxstylez/following{/other_user}",
                "gists_url": "https://api.github.com/users/genxstylez/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/genxstylez/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/genxstylez/subscriptions",
                "organizations_url": "https://api.github.com/users/genxstylez/orgs",
                "repos_url": "https://api.github.com/users/genxstylez/repos",
                "events_url": "https://api.github.com/users/genxstylez/events{/privacy}",
                "received_events_url": "https://api.github.com/users/genxstylez/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2016-06-08T22:15:12Z",
            "updated_at": "2016-06-08T22:15:12Z",
            "author_association": "NONE",
            "body": "@osmantekin I know this might be outdated, but I can't managed to get ~7000 req/s, what was your setup?\n\nCurrently I get ~2300 req/s with Gunicorn + Gevent + CPython and ~1600 req/s Gunicorn + Gevent + PyPy on my 8 core PC.\nThanks.\n"
        }
    ]
}