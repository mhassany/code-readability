{
    "url": "https://api.github.com/repos/pallets/flask/issues/1674",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/1674/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/1674/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/1674/events",
    "html_url": "https://github.com/pallets/flask/issues/1674",
    "id": 124525488,
    "node_id": "MDU6SXNzdWUxMjQ1MjU0ODg=",
    "number": 1674,
    "title": "When using an external debugger, exceptions are not properly propagated",
    "user": {
        "login": "miguelgrinberg",
        "id": 2715854,
        "node_id": "MDQ6VXNlcjI3MTU4NTQ=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/2715854?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/miguelgrinberg",
        "html_url": "https://github.com/miguelgrinberg",
        "followers_url": "https://api.github.com/users/miguelgrinberg/followers",
        "following_url": "https://api.github.com/users/miguelgrinberg/following{/other_user}",
        "gists_url": "https://api.github.com/users/miguelgrinberg/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/miguelgrinberg/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/miguelgrinberg/subscriptions",
        "organizations_url": "https://api.github.com/users/miguelgrinberg/orgs",
        "repos_url": "https://api.github.com/users/miguelgrinberg/repos",
        "events_url": "https://api.github.com/users/miguelgrinberg/events{/privacy}",
        "received_events_url": "https://api.github.com/users/miguelgrinberg/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2016-01-01T01:27:07Z",
    "updated_at": "2016-01-26T06:17:04Z",
    "closed_at": "2016-01-26T06:17:04Z",
    "author_association": "MEMBER",
    "body": "In trying to set up a small Flask application to work with an external debugger, I noticed that the way exceptions are handled vs. propagated isn't working as documented in the [Working with Debuggers](http://flask.pocoo.org/docs/0.10/errorhandling/#working-with-debuggers) section of the documentation.\n\nThe documentation specifies that to use an external debugger you have to play with the `debug`, `use_debugger` and `use_reloader` settings. In the following table I show all possible combinations of `debug` and `use_debugger` and what the current behavior is (Note that I'm assuming `use_reloader` is always set to `False` for this discussion, as this setting is not part of the problem):\n\n```\n| debug | use_debugger | Who catches exceptions | Correct behavior?               |\n+-------+--------------+------------------------+---------------------------------+\n| True  | True         | Werkzeug's debugger    | Yes                             |\n| False | True         | Flask, returns 500     | Yes (I think?)                  |\n| True  | False        | Werkzeug's WSGI server | No, exceptions should propagate |\n| False | False        | Flask, returns 500     | Yes                             |\n```\n\nThe appropriate configuration for using an external debugger is the one shown in the 3rd row of the above table, but note that with this configuration, exceptions are not propagated all the way up and never reach an external debugger. With this configuration Flask does the right thing and reraises the exception, but the Werkzeug WSGI server then catches it and handles it by logging the stack trace and moving on, because it was not told otherwise.\n\nFor this set up to work as documented, Werkzeug's server should have `passthrough_errors` set to `True`. If I add this setting to `app.run()` then exceptions are allowed to reach an external debugger.\n\nMy impression is that the value of the `PROPAGATE_EXCEPTIONS` configuration item should be synchronized with Werkzeug's `passthrough_errors`, so that Flask and Werkzeug consistently handle or reraise exceptions.\n\nI'm happy to submit a pull request with the fix (which is quite simple), if you accept this as a valid issue. Please let me know what you think.\n"
}