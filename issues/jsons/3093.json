{
    "url": "https://api.github.com/repos/pallets/flask/issues/3093",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/3093/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/3093/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/3093/events",
    "html_url": "https://github.com/pallets/flask/issues/3093",
    "id": 407736693,
    "node_id": "MDU6SXNzdWU0MDc3MzY2OTM=",
    "number": 3093,
    "title": "custom error handler not being called for HTTP error 412 ",
    "user": {
        "login": "GiancarloFusiello",
        "id": 7973166,
        "node_id": "MDQ6VXNlcjc5NzMxNjY=",
        "avatar_url": "https://avatars1.githubusercontent.com/u/7973166?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/GiancarloFusiello",
        "html_url": "https://github.com/GiancarloFusiello",
        "followers_url": "https://api.github.com/users/GiancarloFusiello/followers",
        "following_url": "https://api.github.com/users/GiancarloFusiello/following{/other_user}",
        "gists_url": "https://api.github.com/users/GiancarloFusiello/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/GiancarloFusiello/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/GiancarloFusiello/subscriptions",
        "organizations_url": "https://api.github.com/users/GiancarloFusiello/orgs",
        "repos_url": "https://api.github.com/users/GiancarloFusiello/repos",
        "events_url": "https://api.github.com/users/GiancarloFusiello/events{/privacy}",
        "received_events_url": "https://api.github.com/users/GiancarloFusiello/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 7,
    "created_at": "2019-02-07T14:50:19Z",
    "updated_at": "2019-02-19T14:31:15Z",
    "closed_at": "2019-02-07T15:11:18Z",
    "author_association": "NONE",
    "body": "I have created a custom error_handler function like so:\r\n```python\r\ndef http_error_handler(error: HTTPException) -> Response:\r\n    # rest of the code here\r\n```\r\nI then register all default http errors to use the above handler like so:\r\n\r\n```python\r\nfrom werkzeug.exceptions import default_exceptions\r\n\r\nfor code in default_exceptions:\r\n    app.errorhandler(code)(http_error_handler)\r\n```\r\n\r\nI can confirm that my handler function has registered for all http errors in `default_exceptions`:\r\n```python\r\napp.error_handler_spec\r\n{None: {400: {<class 'werkzeug.exceptions.BadRequest'>: <function http_error_handler at 0x7f0d3cd688c8>},\r\n        401: {<class 'werkzeug.exceptions.Unauthorized'>: <function http_error_handler at 0x7f0d3cd688c8>},\r\n        403: {<class 'werkzeug.exceptions.Forbidden'>: <function http_error_handler at 0x7f0d3cd688c8>},\r\n        404: {<class 'werkzeug.exceptions.NotFound'>: <function http_error_handler at 0x7f0d3cd688c8>},\r\n        405: {<class 'werkzeug.exceptions.MethodNotAllowed'>: <function http_error_handler at 0x7f0d3cd688c8>},\r\n        406: {<class 'werkzeug.exceptions.NotAcceptable'>: <function http_error_handler at 0x7f0d3cd688c8>},\r\n        408: {<class 'werkzeug.exceptions.RequestTimeout'>: <function http_error_handler at 0x7f0d3cd688c8>},\r\n        409: {<class 'werkzeug.exceptions.Conflict'>: <function http_error_handler at 0x7f0d3cd688c8>},\r\n        410: {<class 'werkzeug.exceptions.Gone'>: <function http_error_handler at 0x7f0d3cd688c8>},\r\n        411: {<class 'werkzeug.exceptions.LengthRequired'>: <function http_error_handler at 0x7f0d3cd688c8>},\r\n        412: {<class 'werkzeug.exceptions.PreconditionFailed'>: <function http_error_handler at 0x7f0d3cd688c8>},\r\n        413: {<class 'werkzeug.exceptions.RequestEntityTooLarge'>: <function http_error_handler at 0x7f0d3cd688c8>},\r\n        414: {<class 'werkzeug.exceptions.RequestURITooLarge'>: <function http_error_handler at 0x7f0d3cd688c8>},\r\n        415: {<class 'werkzeug.exceptions.UnsupportedMediaType'>: <function http_error_handler at 0x7f0d3cd688c8>},\r\n        416: {<class 'werkzeug.exceptions.RequestedRangeNotSatisfiable'>: <function http_error_handler at 0x7f0d3cd688c8>},\r\n        417: {<class 'werkzeug.exceptions.ExpectationFailed'>: <function http_error_handler at 0x7f0d3cd688c8>},\r\n        418: {<class 'werkzeug.exceptions.ImATeapot'>: <function http_error_handler at 0x7f0d3cd688c8>},\r\n        422: {<class 'werkzeug.exceptions.UnprocessableEntity'>: <function http_error_handler at 0x7f0d3cd688c8>},\r\n        423: {<class 'werkzeug.exceptions.Locked'>: <function http_error_handler at 0x7f0d3cd688c8>},\r\n        428: {<class 'werkzeug.exceptions.PreconditionRequired'>: <function http_error_handler at 0x7f0d3cd688c8>},\r\n        429: {<class 'werkzeug.exceptions.TooManyRequests'>: <function http_error_handler at 0x7f0d3cd688c8>},\r\n        431: {<class 'werkzeug.exceptions.RequestHeaderFieldsTooLarge'>: <function http_error_handler at 0x7f0d3cd688c8>},\r\n        451: {<class 'werkzeug.exceptions.UnavailableForLegalReasons'>: <function http_error_handler at 0x7f0d3cd688c8>},\r\n        500: {<class 'werkzeug.exceptions.InternalServerError'>: <function http_error_handler at 0x7f0d3cd688c8>},\r\n        501: {<class 'werkzeug.exceptions.NotImplemented'>: <function http_error_handler at 0x7f0d3cd688c8>},\r\n        502: {<class 'werkzeug.exceptions.BadGateway'>: <function http_error_handler at 0x7f0d3cd688c8>},\r\n        503: {<class 'werkzeug.exceptions.ServiceUnavailable'>: <function http_error_handler at 0x7f0d3cd688c8>},\r\n        504: {<class 'werkzeug.exceptions.GatewayTimeout'>: <function http_error_handler at 0x7f0d3cd688c8>},\r\n        505: {<class 'werkzeug.exceptions.HTTPVersionNotSupported'>: <function http_error_handler at 0x7f0d3cd688c8>}}}\r\n```\r\nI'm then testing each error using an endpoint that accepts requests like so `/error?code=404` which in tern calls `flask.abort(404)` that then calls `http_error_handler` I created.\r\n\r\nI noticed that all http errors are calling my custom error function except for http error 412 even though you can see it has registered above. Any ideas?\r\n\r\nSide note, if there is a better way of testing custom error pages then please advise.\r\n\r\nThanks in advance.\r\n\r\n### Environment\r\n\r\n* Python version: 3.7.2-alpine3.8 docker image\r\n* Flask version: 1.0.2\r\n* Werkzeug version: 0.14.1\r\n",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/461461104",
            "html_url": "https://github.com/pallets/flask/issues/3093#issuecomment-461461104",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/3093",
            "id": 461461104,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MTQ2MTEwNA==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2019-02-07T15:11:18Z",
            "updated_at": "2019-02-07T15:13:08Z",
            "author_association": "MEMBER",
            "body": "I can't reproduce this issue as described. Navigating to `/?code=412` with the following app returned \"caught\" as expected. Using your for loop produced the same result.\r\n\r\n```python\r\nfrom flask import Flask, request, abort\r\n\r\napp = Flask(__name__)\r\n\r\n@app.route(\"/\")\r\ndef index():\r\n    abort(request.args.get(\"code\", type=int))\r\n\r\n@app.errorhandler(412)\r\ndef handle_412(e):\r\n    return \"caught\"\r\n```"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/461464648",
            "html_url": "https://github.com/pallets/flask/issues/3093#issuecomment-461464648",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/3093",
            "id": 461464648,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MTQ2NDY0OA==",
            "user": {
                "login": "GiancarloFusiello",
                "id": 7973166,
                "node_id": "MDQ6VXNlcjc5NzMxNjY=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/7973166?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/GiancarloFusiello",
                "html_url": "https://github.com/GiancarloFusiello",
                "followers_url": "https://api.github.com/users/GiancarloFusiello/followers",
                "following_url": "https://api.github.com/users/GiancarloFusiello/following{/other_user}",
                "gists_url": "https://api.github.com/users/GiancarloFusiello/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/GiancarloFusiello/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/GiancarloFusiello/subscriptions",
                "organizations_url": "https://api.github.com/users/GiancarloFusiello/orgs",
                "repos_url": "https://api.github.com/users/GiancarloFusiello/repos",
                "events_url": "https://api.github.com/users/GiancarloFusiello/events{/privacy}",
                "received_events_url": "https://api.github.com/users/GiancarloFusiello/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2019-02-07T15:18:41Z",
            "updated_at": "2019-02-07T15:19:20Z",
            "author_association": "NONE",
            "body": "@davidism do you get the same result without using `errorhandler` as a decorator? like so:\r\n```python\r\nfrom flask import Flask, request, abort\r\n\r\ndef handle_412(e):\r\n    return \"caught\"\r\n\r\napp = Flask(__name__)\r\napp.errorhandler(412)(handle_412)\r\n\r\n@app.route(\"/\")\r\ndef index():\r\n    abort(request.args.get(\"code\", type=int))\r\n```\r\nI'm using the app factory pattern rather than using the @app decorator.\r\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/461466632",
            "html_url": "https://github.com/pallets/flask/issues/3093#issuecomment-461466632",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/3093",
            "id": 461466632,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MTQ2NjYzMg==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2019-02-07T15:22:45Z",
            "updated_at": "2019-02-07T15:24:07Z",
            "author_association": "MEMBER",
            "body": "You're still using `errorhandler` as a decorator there. The non-decorator form is `app.register_error_handler(code, function)`. Yes, I got the same result for all forms."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/461500511",
            "html_url": "https://github.com/pallets/flask/issues/3093#issuecomment-461500511",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/3093",
            "id": 461500511,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MTUwMDUxMQ==",
            "user": {
                "login": "GiancarloFusiello",
                "id": 7973166,
                "node_id": "MDQ6VXNlcjc5NzMxNjY=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/7973166?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/GiancarloFusiello",
                "html_url": "https://github.com/GiancarloFusiello",
                "followers_url": "https://api.github.com/users/GiancarloFusiello/followers",
                "following_url": "https://api.github.com/users/GiancarloFusiello/following{/other_user}",
                "gists_url": "https://api.github.com/users/GiancarloFusiello/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/GiancarloFusiello/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/GiancarloFusiello/subscriptions",
                "organizations_url": "https://api.github.com/users/GiancarloFusiello/orgs",
                "repos_url": "https://api.github.com/users/GiancarloFusiello/repos",
                "events_url": "https://api.github.com/users/GiancarloFusiello/events{/privacy}",
                "received_events_url": "https://api.github.com/users/GiancarloFusiello/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2019-02-07T16:33:08Z",
            "updated_at": "2019-02-07T16:33:08Z",
            "author_association": "NONE",
            "body": "I have updated the code to use `app.register_error_handler` but I'm still getting the same issue. I even had my colleague clone the repo and he was able to reproduce.\r\n\r\nWould you be so kind and please clone [this](https://github.com/libero/search), checkout branch `feature/add_custom_errors` and run `make tests` from the root of the project? This will build the docker container (may take a couple of minutes) and run tests."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/461782181",
            "html_url": "https://github.com/pallets/flask/issues/3093#issuecomment-461782181",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/3093",
            "id": 461782181,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MTc4MjE4MQ==",
            "user": {
                "login": "GiancarloFusiello",
                "id": 7973166,
                "node_id": "MDQ6VXNlcjc5NzMxNjY=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/7973166?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/GiancarloFusiello",
                "html_url": "https://github.com/GiancarloFusiello",
                "followers_url": "https://api.github.com/users/GiancarloFusiello/followers",
                "following_url": "https://api.github.com/users/GiancarloFusiello/following{/other_user}",
                "gists_url": "https://api.github.com/users/GiancarloFusiello/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/GiancarloFusiello/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/GiancarloFusiello/subscriptions",
                "organizations_url": "https://api.github.com/users/GiancarloFusiello/orgs",
                "repos_url": "https://api.github.com/users/GiancarloFusiello/repos",
                "events_url": "https://api.github.com/users/GiancarloFusiello/events{/privacy}",
                "received_events_url": "https://api.github.com/users/GiancarloFusiello/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2019-02-08T12:03:56Z",
            "updated_at": "2019-02-08T12:03:56Z",
            "author_association": "NONE",
            "body": "@davidism I have spent some time debugging Flask/Werkzeug and you can see [here](https://github.com/pallets/werkzeug/blob/0.14.1/werkzeug/wrappers.py#L1250) and [here](https://github.com/pallets/werkzeug/blob/0.14.1/werkzeug/wrappers.py#L1290) that the response headers and data are stripped from the response if the status code is 412.\r\n\r\nTherefore, I'm not sure how you were able to see your custom response data/message for http exception for status 412. Either way, this appears to be working as expected. Thanks for taking a look."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/465079280",
            "html_url": "https://github.com/pallets/flask/issues/3093#issuecomment-465079280",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/3093",
            "id": 465079280,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NTA3OTI4MA==",
            "user": {
                "login": "un-def",
                "id": 2131407,
                "node_id": "MDQ6VXNlcjIxMzE0MDc=",
                "avatar_url": "https://avatars0.githubusercontent.com/u/2131407?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/un-def",
                "html_url": "https://github.com/un-def",
                "followers_url": "https://api.github.com/users/un-def/followers",
                "following_url": "https://api.github.com/users/un-def/following{/other_user}",
                "gists_url": "https://api.github.com/users/un-def/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/un-def/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/un-def/subscriptions",
                "organizations_url": "https://api.github.com/users/un-def/orgs",
                "repos_url": "https://api.github.com/users/un-def/repos",
                "events_url": "https://api.github.com/users/un-def/events{/privacy}",
                "received_events_url": "https://api.github.com/users/un-def/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2019-02-19T10:38:37Z",
            "updated_at": "2019-02-19T10:38:37Z",
            "author_association": "NONE",
            "body": "@GiancarloFusiello have you tried an unreleased version of Werkzeug (0.15)? I guess your issue is related to a known problem: https://github.com/pallets/werkzeug/issues/1231 https://github.com/pallets/werkzeug/pull/1255\r\n\r\nWerkzeug <=0.13 should also work fine, but Flask 1.x requires Werkzeug >= 0.14.\r\n\r\n\r\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/465150787",
            "html_url": "https://github.com/pallets/flask/issues/3093#issuecomment-465150787",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/3093",
            "id": 465150787,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NTE1MDc4Nw==",
            "user": {
                "login": "GiancarloFusiello",
                "id": 7973166,
                "node_id": "MDQ6VXNlcjc5NzMxNjY=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/7973166?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/GiancarloFusiello",
                "html_url": "https://github.com/GiancarloFusiello",
                "followers_url": "https://api.github.com/users/GiancarloFusiello/followers",
                "following_url": "https://api.github.com/users/GiancarloFusiello/following{/other_user}",
                "gists_url": "https://api.github.com/users/GiancarloFusiello/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/GiancarloFusiello/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/GiancarloFusiello/subscriptions",
                "organizations_url": "https://api.github.com/users/GiancarloFusiello/orgs",
                "repos_url": "https://api.github.com/users/GiancarloFusiello/repos",
                "events_url": "https://api.github.com/users/GiancarloFusiello/events{/privacy}",
                "received_events_url": "https://api.github.com/users/GiancarloFusiello/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2019-02-19T14:31:15Z",
            "updated_at": "2019-02-19T14:31:15Z",
            "author_association": "NONE",
            "body": "@un-def thank you for pointing this out to me. PyPi doesn't have a reference to 0.15 yet but I can confirm that this is no longer an issue in version 0.15.dev0 which I was able to install from github. However, I don't feel comfortable using this in production but I'll look to upgrade to when officially released. Thanks again for you help."
        }
    ]
}