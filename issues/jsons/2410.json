{
    "url": "https://api.github.com/repos/pallets/flask/issues/2410",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/2410/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/2410/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/2410/events",
    "html_url": "https://github.com/pallets/flask/issues/2410",
    "id": 241728540,
    "node_id": "MDU6SXNzdWUyNDE3Mjg1NDA=",
    "number": 2410,
    "title": "Flask CLI doesn't support application context in argument callbacks",
    "user": {
        "login": "runfalk",
        "id": 864128,
        "node_id": "MDQ6VXNlcjg2NDEyOA==",
        "avatar_url": "https://avatars1.githubusercontent.com/u/864128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/runfalk",
        "html_url": "https://github.com/runfalk",
        "followers_url": "https://api.github.com/users/runfalk/followers",
        "following_url": "https://api.github.com/users/runfalk/following{/other_user}",
        "gists_url": "https://api.github.com/users/runfalk/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/runfalk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/runfalk/subscriptions",
        "organizations_url": "https://api.github.com/users/runfalk/orgs",
        "repos_url": "https://api.github.com/users/runfalk/repos",
        "events_url": "https://api.github.com/users/runfalk/events{/privacy}",
        "received_events_url": "https://api.github.com/users/runfalk/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 380608249,
            "node_id": "MDU6TGFiZWwzODA2MDgyNDk=",
            "url": "https://api.github.com/repos/pallets/flask/labels/cli",
            "name": "cli",
            "color": "1d76db",
            "default": false,
            "description": null
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2017-07-10T14:17:27Z",
    "updated_at": "2019-06-01T13:48:50Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "I recently converted an old managing script to use Flask's built in CLI instead. I have a table for clients that are identified using a shortname/slug. I thought about using Click's argument callback for this. Given a shortname my function would get an instance of the client from my ORM. The problem is that the application context is not active when the callback is run.\r\n\r\n### Expected Behavior\r\n\r\nSince many scripts will rely on a database connection it makes sense to have the application context be available in arguments.\r\n\r\n```python\r\nimport click\r\nfrom flask import current_app, Flask\r\n\r\napp = Flask(\"demo\")\r\n\r\ndef example_callback(ctx, param, value):\r\n    # Access the application context to trigger an exception\r\n    click.echo(current_app.config)\r\n    return {\"id\": 1, \"shortname\": value}\r\n\r\n@app.cli.command()\r\n@click.argument(\"arg\", callback=example_callback)\r\ndef view(arg):\r\n    click.echo(arg)\r\n```\r\n\r\nI run this using `flask view foobar`.\r\n\r\n### Actual Behavior\r\n\r\n```pytb\r\nTraceback (most recent call last):\r\n  File \"/dev/flask-cli-demo/venv/bin/flask\", line 11, in <module>\r\n    sys.exit(main())\r\n  File \"/dev/flask-cli-demo/venv/local/lib/python2.7/site-packages/flask/cli.py\", line 513, in main\r\n    cli.main(args=args, prog_name=name)\r\n  File \"/dev/flask-cli-demo/venv/local/lib/python2.7/site-packages/flask/cli.py\", line 380, in main\r\n    return AppGroup.main(self, *args, **kwargs)\r\n  File \"/dev/flask-cli-demo/venv/local/lib/python2.7/site-packages/click/core.py\", line 697, in main\r\n    rv = self.invoke(ctx)\r\n  File \"/dev/flask-cli-demo/venv/local/lib/python2.7/site-packages/click/core.py\", line 1064, in invoke\r\n    sub_ctx = cmd.make_context(cmd_name, args, parent=ctx)\r\n  File \"/dev/flask-cli-demo/venv/local/lib/python2.7/site-packages/click/core.py\", line 621, in make_context\r\n    self.parse_args(ctx, args)\r\n  File \"/dev/flask-cli-demo/venv/local/lib/python2.7/site-packages/click/core.py\", line 880, in parse_args\r\n    value, args = param.handle_parse_result(ctx, opts, args)\r\n  File \"/dev/flask-cli-demo/venv/local/lib/python2.7/site-packages/click/core.py\", line 1404, in handle_parse_result\r\n    self.callback, ctx, self, value)\r\n  File \"/dev/flask-cli-demo/venv/local/lib/python2.7/site-packages/click/core.py\", line 78, in invoke_param_callback\r\n    return callback(ctx, param, value)\r\n  File \"/dev/flask-cli-demo/app.py\", line 8, in example_callback\r\n    click.echo(current_app.config)\r\n  File \"/dev/flask-cli-demo/venv/local/lib/python2.7/site-packages/werkzeug/local.py\", line 347, in __getattr__\r\n    return getattr(self._get_current_object(), name)\r\n  File \"/dev/flask-cli-demo/venv/local/lib/python2.7/site-packages/werkzeug/local.py\", line 306, in _get_current_object\r\n    return self.__local()\r\n  File \"/dev/flask-cli-demo/venv/local/lib/python2.7/site-packages/flask/globals.py\", line 51, in _find_app\r\n    raise RuntimeError(_app_ctx_err_msg)\r\nRuntimeError: Working outside of application context.\r\n```\r\n\r\n### Environment\r\n```\r\nclick==6.7\r\nFlask==0.12.2\r\nitsdangerous==0.24\r\nJinja2==2.9.6\r\nMarkupSafe==1.0\r\npkg-resources==0.0.0\r\nWerkzeug==0.12.2\r\n```\r\n\r\n### Workaround\r\nThe only workaround I've found is doing the same thing `@with_appcontext` does which is:\r\n\r\n```python\r\nwith ctx.ensure_object(ScriptInfo).load_app().app_context():\r\n```\r\n\r\nUsing `@with_appcontext` on `example_callback` doesn't work since that gives a warning about using a deprecated function signature (from before Click 2.0).\r\n\r\n### Why is this a problem?\r\nThis results in two separate instantiations of my ORM. Some ORM's (like the one I'm using) doesn't allow sharing objects across instances (for good reason) which makes the client object I produce unusable anyway.",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/333340249",
            "html_url": "https://github.com/pallets/flask/issues/2410#issuecomment-333340249",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2410",
            "id": 333340249,
            "node_id": "MDEyOklzc3VlQ29tbWVudDMzMzM0MDI0OQ==",
            "user": {
                "login": "homeworkprod",
                "id": 95277,
                "node_id": "MDQ6VXNlcjk1Mjc3",
                "avatar_url": "https://avatars0.githubusercontent.com/u/95277?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/homeworkprod",
                "html_url": "https://github.com/homeworkprod",
                "followers_url": "https://api.github.com/users/homeworkprod/followers",
                "following_url": "https://api.github.com/users/homeworkprod/following{/other_user}",
                "gists_url": "https://api.github.com/users/homeworkprod/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/homeworkprod/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/homeworkprod/subscriptions",
                "organizations_url": "https://api.github.com/users/homeworkprod/orgs",
                "repos_url": "https://api.github.com/users/homeworkprod/repos",
                "events_url": "https://api.github.com/users/homeworkprod/events{/privacy}",
                "received_events_url": "https://api.github.com/users/homeworkprod/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2017-09-30T22:31:12Z",
            "updated_at": "2019-06-01T13:48:50Z",
            "author_association": "CONTRIBUTOR",
            "body": "I've run into the issue of the app context not being available to argument callbacks as well.\r\n\r\nSpecific example: Pass a user name as command line argument, than have the argument callback function look it up in the database and return the entity to work with it in the command's implementation.\r\n\r\nConsidering that Click was designed long after Flask existed (and both by the same author), and is now required by the latter, my personal experience with attempting to port CLI scripts/commands (built with Flask-Script or not) over to the `flask` command in the last few *years* has been, surprisingly, *extremely* frustrating.\r\n\r\nExamples seem to be quite scarce, distributed, specific, limited, and in need of more consistency (e.g. regarding filenames for app factories and CLI command files). I can't even remember to have seen an example or other piece of code that uses both `app.cli` and `click.argument` on the same function; at least not in the official docs, the \"Flaskr\" example app, and Flask's source code.\r\n\r\nAlso it seems to me that it's not really possible to define commands in separate modules (i.e. ones that don't have access to the readily-created app instance; this has been solved with blueprints for another use case) without wrapping their function definitions in another function that gets passed and app argument to call `app.cli.command()` on.\r\n\r\nAfter the annoying delay until improved shells like iPython could be used in `flask shell` (pointer for anyone looking for that: check out the `flask-shell-ipython` package and similar ones) and `.flaskenv` being on the horizon with v0.13, I'm really looking forward to the remaining holes in Flask's CLI system getting (discovered and) fixed.\r\n\r\n(End of long-accumulated, partially off-topic rant.)\r\n\r\nSo yeah, please let's come up with a reasonable way to provide the app context to argument (and option) callbacks."
        }
    ]
}