{
    "url": "https://api.github.com/repos/pallets/flask/issues/3187",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/3187/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/3187/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/3187/events",
    "html_url": "https://github.com/pallets/flask/issues/3187",
    "id": 441346245,
    "node_id": "MDU6SXNzdWU0NDEzNDYyNDU=",
    "number": 3187,
    "title": "Catch-all route does not work if url has another handler even if method is different",
    "user": {
        "login": "ekor15",
        "id": 5829500,
        "node_id": "MDQ6VXNlcjU4Mjk1MDA=",
        "avatar_url": "https://avatars3.githubusercontent.com/u/5829500?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ekor15",
        "html_url": "https://github.com/ekor15",
        "followers_url": "https://api.github.com/users/ekor15/followers",
        "following_url": "https://api.github.com/users/ekor15/following{/other_user}",
        "gists_url": "https://api.github.com/users/ekor15/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ekor15/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ekor15/subscriptions",
        "organizations_url": "https://api.github.com/users/ekor15/orgs",
        "repos_url": "https://api.github.com/users/ekor15/repos",
        "events_url": "https://api.github.com/users/ekor15/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ekor15/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 5,
    "created_at": "2019-05-07T17:18:50Z",
    "updated_at": "2019-05-08T11:25:54Z",
    "closed_at": "2019-05-08T09:24:31Z",
    "author_association": "NONE",
    "body": "I want to set up a handler for all URLs that will handle the OPTIONS preflight requests\r\nFollowing the \"catch-all\" example (@app.route(\"/<path:path>\", methods=['OPTIONS']))\r\n\r\nI found that if the server gets a route that has a handler with a different method neither of the handlers are called\r\n \r\n### Expected Behavior\r\nThe OPTIONS request should have been routed to the \"wildcard\" OPTIONS handler\r\n\r\n```python\r\nfrom unittest import TestCase\r\nfrom flask import Flask\r\nfrom hamcrest import assert_that, equal_to\r\nclass TestSitePreferencesService(TestCase):\r\n    def test(self):\r\n        app = Flask(__name__)\r\n\r\n        @app.route(\"/<path:path>\", methods=['OPTIONS'])\r\n        def catch_all(path):\r\n            return \"catch_all\"\r\n\r\n        @app.route(\"/specific\", methods=['GET'])\r\n        def specific():\r\n            return \"specific\"\r\n\r\n        client = app.test_client()\r\n        result = client.options('/some/url')\r\n        assert_that(result.data.decode('utf-8') , equal_to('catch_all'))\r\n\r\n        result1 = client.get('some/url')\r\n        assert_that(result1.status_code , equal_to(405)) # this identifies the global handler but the method is wrong this is expected\r\n\r\n        result2 = client.options('/specific')\r\n        # looks like this is not going to ether of the handlers\r\n        assert_that(result2.data.decode('utf-8'),equal_to('catch_all')) # fails\r\n```\r\n\r\n### Actual Behavior\r\nThe request was not routed to the correct handler OPTIONS handler\r\n\r\n### Environment\r\n\r\n* Python version:3.7\r\n* Flask version:1.0.2\r\n* Werkzeug version:0.15.2\r\n",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/490171988",
            "html_url": "https://github.com/pallets/flask/issues/3187#issuecomment-490171988",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/3187",
            "id": 490171988,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MDE3MTk4OA==",
            "user": {
                "login": "carc1n0gen",
                "id": 8248986,
                "node_id": "MDQ6VXNlcjgyNDg5ODY=",
                "avatar_url": "https://avatars0.githubusercontent.com/u/8248986?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/carc1n0gen",
                "html_url": "https://github.com/carc1n0gen",
                "followers_url": "https://api.github.com/users/carc1n0gen/followers",
                "following_url": "https://api.github.com/users/carc1n0gen/following{/other_user}",
                "gists_url": "https://api.github.com/users/carc1n0gen/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/carc1n0gen/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/carc1n0gen/subscriptions",
                "organizations_url": "https://api.github.com/users/carc1n0gen/orgs",
                "repos_url": "https://api.github.com/users/carc1n0gen/repos",
                "events_url": "https://api.github.com/users/carc1n0gen/events{/privacy}",
                "received_events_url": "https://api.github.com/users/carc1n0gen/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2019-05-07T17:22:15Z",
            "updated_at": "2019-05-07T17:22:15Z",
            "author_association": "NONE",
            "body": "I'm pretty sure routes are matched in order of creation.  So if you want to ensure the specific one is hit, you'll need to move it above the catch-all one"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/490380685",
            "html_url": "https://github.com/pallets/flask/issues/3187#issuecomment-490380685",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/3187",
            "id": 490380685,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MDM4MDY4NQ==",
            "user": {
                "login": "jab",
                "id": 64992,
                "node_id": "MDQ6VXNlcjY0OTky",
                "avatar_url": "https://avatars1.githubusercontent.com/u/64992?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/jab",
                "html_url": "https://github.com/jab",
                "followers_url": "https://api.github.com/users/jab/followers",
                "following_url": "https://api.github.com/users/jab/following{/other_user}",
                "gists_url": "https://api.github.com/users/jab/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/jab/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jab/subscriptions",
                "organizations_url": "https://api.github.com/users/jab/orgs",
                "repos_url": "https://api.github.com/users/jab/repos",
                "events_url": "https://api.github.com/users/jab/events{/privacy}",
                "received_events_url": "https://api.github.com/users/jab/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2019-05-08T07:31:35Z",
            "updated_at": "2019-05-08T07:39:28Z",
            "author_association": "MEMBER",
            "body": "I believe routes are matched in order of specificity, not creation, and by default Flask implicitly adds an OPTIONS handler for each GET handler you register, in which case this will never work. Can you use an @app.before_request func to accomplish this instead?"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/490410108",
            "html_url": "https://github.com/pallets/flask/issues/3187#issuecomment-490410108",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/3187",
            "id": 490410108,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MDQxMDEwOA==",
            "user": {
                "login": "ekor15",
                "id": 5829500,
                "node_id": "MDQ6VXNlcjU4Mjk1MDA=",
                "avatar_url": "https://avatars3.githubusercontent.com/u/5829500?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/ekor15",
                "html_url": "https://github.com/ekor15",
                "followers_url": "https://api.github.com/users/ekor15/followers",
                "following_url": "https://api.github.com/users/ekor15/following{/other_user}",
                "gists_url": "https://api.github.com/users/ekor15/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/ekor15/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ekor15/subscriptions",
                "organizations_url": "https://api.github.com/users/ekor15/orgs",
                "repos_url": "https://api.github.com/users/ekor15/repos",
                "events_url": "https://api.github.com/users/ekor15/events{/privacy}",
                "received_events_url": "https://api.github.com/users/ekor15/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2019-05-08T09:07:11Z",
            "updated_at": "2019-05-08T09:07:11Z",
            "author_association": "NONE",
            "body": "First, thank you for the quick reply\r\n@carc1n0gen - I did register the OPTIONS handler first - so it should have hit it\r\n\r\n@jab - I think you are correct, flask does create an OPTIONS handler for each registered route\r\n\r\nIs there any way to avoid this? \r\n\r\nAlso, I cannot use before_request because my real implementation adds CORS headers to the response - and the before_request happens before the response is created and has no access to it"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/490415416",
            "html_url": "https://github.com/pallets/flask/issues/3187#issuecomment-490415416",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/3187",
            "id": 490415416,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MDQxNTQxNg==",
            "user": {
                "login": "ekor15",
                "id": 5829500,
                "node_id": "MDQ6VXNlcjU4Mjk1MDA=",
                "avatar_url": "https://avatars3.githubusercontent.com/u/5829500?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/ekor15",
                "html_url": "https://github.com/ekor15",
                "followers_url": "https://api.github.com/users/ekor15/followers",
                "following_url": "https://api.github.com/users/ekor15/following{/other_user}",
                "gists_url": "https://api.github.com/users/ekor15/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/ekor15/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ekor15/subscriptions",
                "organizations_url": "https://api.github.com/users/ekor15/orgs",
                "repos_url": "https://api.github.com/users/ekor15/repos",
                "events_url": "https://api.github.com/users/ekor15/events{/privacy}",
                "received_events_url": "https://api.github.com/users/ekor15/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2019-05-08T09:24:31Z",
            "updated_at": "2019-05-08T09:24:31Z",
            "author_association": "NONE",
            "body": "Found the solution - adding \r\n @app.route(\"/specific\", methods=['GET'], provide_automatic_options=False) to the route\r\n\r\nDocumentation:\r\nhttp://flask.pocoo.org/docs/1.0/api/#flask.Flask.add_url_rule\r\n\r\nI really don't understand why this is the default behavior..."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/490447218",
            "html_url": "https://github.com/pallets/flask/issues/3187#issuecomment-490447218",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/3187",
            "id": 490447218,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MDQ0NzIxOA==",
            "user": {
                "login": "carc1n0gen",
                "id": 8248986,
                "node_id": "MDQ6VXNlcjgyNDg5ODY=",
                "avatar_url": "https://avatars0.githubusercontent.com/u/8248986?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/carc1n0gen",
                "html_url": "https://github.com/carc1n0gen",
                "followers_url": "https://api.github.com/users/carc1n0gen/followers",
                "following_url": "https://api.github.com/users/carc1n0gen/following{/other_user}",
                "gists_url": "https://api.github.com/users/carc1n0gen/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/carc1n0gen/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/carc1n0gen/subscriptions",
                "organizations_url": "https://api.github.com/users/carc1n0gen/orgs",
                "repos_url": "https://api.github.com/users/carc1n0gen/repos",
                "events_url": "https://api.github.com/users/carc1n0gen/events{/privacy}",
                "received_events_url": "https://api.github.com/users/carc1n0gen/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2019-05-08T11:17:07Z",
            "updated_at": "2019-05-08T11:25:54Z",
            "author_association": "NONE",
            "body": "~You misunderstood me. I said define the `/specific` route first.  (Well I only said \"specific\" but I thought that was clear enough.~\r\n\r\n~In your example you define the catch all first. Just switch  the order.~\r\n\r\nEdit: apparently I'm the one who misunderstood. I thought you were not getting to the /specific handler. My bad"
        }
    ]
}