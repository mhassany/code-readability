{
    "url": "https://api.github.com/repos/pallets/flask/issues/385",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/385/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/385/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/385/events",
    "html_url": "https://github.com/pallets/flask/issues/385",
    "id": 2895538,
    "node_id": "MDU6SXNzdWUyODk1NTM4",
    "number": 385,
    "title": "API change proposal : inconsistency for getting parameters in a request",
    "user": {
        "login": "jpcaruana",
        "id": 31649,
        "node_id": "MDQ6VXNlcjMxNjQ5",
        "avatar_url": "https://avatars0.githubusercontent.com/u/31649?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jpcaruana",
        "html_url": "https://github.com/jpcaruana",
        "followers_url": "https://api.github.com/users/jpcaruana/followers",
        "following_url": "https://api.github.com/users/jpcaruana/following{/other_user}",
        "gists_url": "https://api.github.com/users/jpcaruana/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jpcaruana/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jpcaruana/subscriptions",
        "organizations_url": "https://api.github.com/users/jpcaruana/orgs",
        "repos_url": "https://api.github.com/users/jpcaruana/repos",
        "events_url": "https://api.github.com/users/jpcaruana/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jpcaruana/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 10,
    "created_at": "2012-01-19T11:30:33Z",
    "updated_at": "2013-03-05T21:49:25Z",
    "closed_at": "2012-01-19T12:37:22Z",
    "author_association": "NONE",
    "body": "Hi,\nI come from a java background and I love using flask. But there is some itch with flask GET/POST API (production code and test code) I would like to discuss about.\n\nIn a java servlet, it doesn't matter what http method you're using (GET, POST, PUT), you always do this to get a parameter from input :\n\n```\nString username = request.getParameter(\"username\");\nString password = request.getParameter(\"password\");\n```\n\nIn flask, this is inconsistent :\nfor a  POST, flasks \"assumes\" data come from a form (wich is not mandatory, you can submit data without a form) :\n\n```\nusername = request.form['username']\n```\n\nTo me, in terms of API, form is wrong. But worse, if you do a GET, you can't use form, you'll have to user args :\nGET :\n\n```\nusername = request.args['username']\n```\n\nI would prefer to see, in POST/GET/PUT/whatever (I'm using parameter, as in java HttpServlet API) :\n\n```\nusername = request.parameter['username']\n```\n\nAs Im doing TDD, I observed the same inconsiancy in writing unit tests :\nto test a POST, you can submit a dict (which is great and very pythonic) :\n\n```\napp.test_client().post('/login', data=dict(\n        username=username,\n        password=))\n```\n\nto test a GET, you can't pass a dict, you have to reconstruct the URL (which I don't find very pythonic) :\n\n```\napp.test_client().get('/agent/login?username=%s&password=%s' % (username, password))\n```\n\nI would love to be able to write this for a GET too : \n\n```\napp.test_client().get('/login', data=dict(\n        username=username,\n        password=))\n```\n\nAnyway, what do you think ?\nThanks for your feedback.\n",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/3561514",
            "html_url": "https://github.com/pallets/flask/issues/385#issuecomment-3561514",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/385",
            "id": 3561514,
            "node_id": "MDEyOklzc3VlQ29tbWVudDM1NjE1MTQ=",
            "user": {
                "login": "jpcaruana",
                "id": 31649,
                "node_id": "MDQ6VXNlcjMxNjQ5",
                "avatar_url": "https://avatars0.githubusercontent.com/u/31649?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/jpcaruana",
                "html_url": "https://github.com/jpcaruana",
                "followers_url": "https://api.github.com/users/jpcaruana/followers",
                "following_url": "https://api.github.com/users/jpcaruana/following{/other_user}",
                "gists_url": "https://api.github.com/users/jpcaruana/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/jpcaruana/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jpcaruana/subscriptions",
                "organizations_url": "https://api.github.com/users/jpcaruana/orgs",
                "repos_url": "https://api.github.com/users/jpcaruana/repos",
                "events_url": "https://api.github.com/users/jpcaruana/events{/privacy}",
                "received_events_url": "https://api.github.com/users/jpcaruana/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2012-01-19T11:47:35Z",
            "updated_at": "2012-01-19T11:47:35Z",
            "author_association": "NONE",
            "body": "maybe it is a werkzeug issue ?\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/3562031",
            "html_url": "https://github.com/pallets/flask/issues/385#issuecomment-3562031",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/385",
            "id": 3562031,
            "node_id": "MDEyOklzc3VlQ29tbWVudDM1NjIwMzE=",
            "user": {
                "login": "mitsuhiko",
                "id": 7396,
                "node_id": "MDQ6VXNlcjczOTY=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/7396?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/mitsuhiko",
                "html_url": "https://github.com/mitsuhiko",
                "followers_url": "https://api.github.com/users/mitsuhiko/followers",
                "following_url": "https://api.github.com/users/mitsuhiko/following{/other_user}",
                "gists_url": "https://api.github.com/users/mitsuhiko/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/mitsuhiko/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mitsuhiko/subscriptions",
                "organizations_url": "https://api.github.com/users/mitsuhiko/orgs",
                "repos_url": "https://api.github.com/users/mitsuhiko/repos",
                "events_url": "https://api.github.com/users/mitsuhiko/events{/privacy}",
                "received_events_url": "https://api.github.com/users/mitsuhiko/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2012-01-19T12:37:22Z",
            "updated_at": "2012-01-19T12:37:22Z",
            "author_association": "MEMBER",
            "body": "That's not an issue, that's very intentional design. There is a huge conceptional difference between data submitted in the form data and data submitted on the URL.\n\nThere is already a combining multidict that mashes `request.form` and `request.args` together into (called `request.values`) if you really want do that, but I consider that a horrible idea.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/3562039",
            "html_url": "https://github.com/pallets/flask/issues/385#issuecomment-3562039",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/385",
            "id": 3562039,
            "node_id": "MDEyOklzc3VlQ29tbWVudDM1NjIwMzk=",
            "user": {
                "login": "mitsuhiko",
                "id": 7396,
                "node_id": "MDQ6VXNlcjczOTY=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/7396?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/mitsuhiko",
                "html_url": "https://github.com/mitsuhiko",
                "followers_url": "https://api.github.com/users/mitsuhiko/followers",
                "following_url": "https://api.github.com/users/mitsuhiko/following{/other_user}",
                "gists_url": "https://api.github.com/users/mitsuhiko/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/mitsuhiko/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mitsuhiko/subscriptions",
                "organizations_url": "https://api.github.com/users/mitsuhiko/orgs",
                "repos_url": "https://api.github.com/users/mitsuhiko/repos",
                "events_url": "https://api.github.com/users/mitsuhiko/events{/privacy}",
                "received_events_url": "https://api.github.com/users/mitsuhiko/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2012-01-19T12:38:50Z",
            "updated_at": "2012-01-19T12:38:50Z",
            "author_association": "MEMBER",
            "body": "> for a POST, flasks \"assumes\" data come from a form (wich is not mandatory, you can submit data without a form) :\n\nThe correct term in HTTP is entity body but `request.entity_args` is hardly a good name.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/3562065",
            "html_url": "https://github.com/pallets/flask/issues/385#issuecomment-3562065",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/385",
            "id": 3562065,
            "node_id": "MDEyOklzc3VlQ29tbWVudDM1NjIwNjU=",
            "user": {
                "login": "mitsuhiko",
                "id": 7396,
                "node_id": "MDQ6VXNlcjczOTY=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/7396?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/mitsuhiko",
                "html_url": "https://github.com/mitsuhiko",
                "followers_url": "https://api.github.com/users/mitsuhiko/followers",
                "following_url": "https://api.github.com/users/mitsuhiko/following{/other_user}",
                "gists_url": "https://api.github.com/users/mitsuhiko/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/mitsuhiko/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mitsuhiko/subscriptions",
                "organizations_url": "https://api.github.com/users/mitsuhiko/orgs",
                "repos_url": "https://api.github.com/users/mitsuhiko/repos",
                "events_url": "https://api.github.com/users/mitsuhiko/events{/privacy}",
                "received_events_url": "https://api.github.com/users/mitsuhiko/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2012-01-19T12:41:10Z",
            "updated_at": "2012-01-19T12:41:10Z",
            "author_association": "MEMBER",
            "body": "> to test a GET, you can't pass a dict, you have to reconstruct the URL (which I don't find very pythonic) :\n\nThis is wrong btw. there is a parameter for it:\n\n```\napp.test_client().get('/hello', query_string=dict(name='World'))\n```\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/3562648",
            "html_url": "https://github.com/pallets/flask/issues/385#issuecomment-3562648",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/385",
            "id": 3562648,
            "node_id": "MDEyOklzc3VlQ29tbWVudDM1NjI2NDg=",
            "user": {
                "login": "jpcaruana",
                "id": 31649,
                "node_id": "MDQ6VXNlcjMxNjQ5",
                "avatar_url": "https://avatars0.githubusercontent.com/u/31649?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/jpcaruana",
                "html_url": "https://github.com/jpcaruana",
                "followers_url": "https://api.github.com/users/jpcaruana/followers",
                "following_url": "https://api.github.com/users/jpcaruana/following{/other_user}",
                "gists_url": "https://api.github.com/users/jpcaruana/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/jpcaruana/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jpcaruana/subscriptions",
                "organizations_url": "https://api.github.com/users/jpcaruana/orgs",
                "repos_url": "https://api.github.com/users/jpcaruana/repos",
                "events_url": "https://api.github.com/users/jpcaruana/events{/privacy}",
                "received_events_url": "https://api.github.com/users/jpcaruana/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2012-01-19T13:37:08Z",
            "updated_at": "2012-01-19T13:37:08Z",
            "author_association": "NONE",
            "body": "Thanks @mitsuhiko for your answer.\n\nI really think that flask is great, but I lost a great amount of time because of this. I chose this framework for an important new project and I will stick to it. Let me further explain my point of view, if you don't mind. I just want to improve the API because I find it inconsistent, especially if you compare with other technologies (this is why I named this \"github issue\" \"proposal\" and not \"issue\") and discuss about it.\n\n> app.test_client().get('/hello', query_string=dict(name='World'))\n\nI'm glad `query_string` exists (sorry I couldn't find it in the manual), it is better to pass a dict than to construct a string as I did, but having a different name for passing arguments to a GET or a POST is the same API design flaw to me than the difference between `request.form` and `request.args`.\nI will try using `request.values` (I strongly disagree with your \"I consider that a horrible idea.\" - I'm not talking about the name `request.values` here, this would be another discussion) and will let you know.\n\n> There is a huge conceptional difference between data submitted in the form data and data submitted on the URL.\n\nI think you're messing up API and implementation details. I'm talking about API here. Conceptually, getting data from the user is not different if you use GET or POST (or PUT) :  you just want to get _data_. \nAs a user of the framework, I just see flask from its API. I don't care whether _data_ comes from a GET or a POST : I want my data to do something useful for the end user.\nWhen I design my route, I say once `methods=['POST']`. I don't want my implementation to be different if I want to change the http method later on. I also see some kind of duplication here when I have to implement in different ways depending on the http method.\n\nIn the java world, you don't care, you just get data using the `ServletRequest` API. I think this is a good API design (not all java API have a good design - hello `Calendar` API or being able to open an `InputStream` without specifying the encoding !)\n\nI wish you left this proposal open to discussion and not close it. Some people might agree with you or me.\nThanks again.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/3562762",
            "html_url": "https://github.com/pallets/flask/issues/385#issuecomment-3562762",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/385",
            "id": 3562762,
            "node_id": "MDEyOklzc3VlQ29tbWVudDM1NjI3NjI=",
            "user": {
                "login": "mitsuhiko",
                "id": 7396,
                "node_id": "MDQ6VXNlcjczOTY=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/7396?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/mitsuhiko",
                "html_url": "https://github.com/mitsuhiko",
                "followers_url": "https://api.github.com/users/mitsuhiko/followers",
                "following_url": "https://api.github.com/users/mitsuhiko/following{/other_user}",
                "gists_url": "https://api.github.com/users/mitsuhiko/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/mitsuhiko/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mitsuhiko/subscriptions",
                "organizations_url": "https://api.github.com/users/mitsuhiko/orgs",
                "repos_url": "https://api.github.com/users/mitsuhiko/repos",
                "events_url": "https://api.github.com/users/mitsuhiko/events{/privacy}",
                "received_events_url": "https://api.github.com/users/mitsuhiko/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2012-01-19T13:47:11Z",
            "updated_at": "2012-01-19T13:47:11Z",
            "author_association": "MEMBER",
            "body": "> I think you're messing up API and implementation details. I'm talking about API here. Conceptually, getting data from the user is not different if you use GET or POST (or PUT) : you just want to get data. \n\nThere is a huge conceptional difference there. A POST/PUT request can carry information in the entity body as well as the URL. Just because GET is a method that does not allow an entity body does not mean that URL parameters are an inherent property of that HTTP method.\n\n> I don't care whether data comes from a GET or a POST : I want my data to do something useful for the end user.\n\nMy point is: you should care. There are different semantics and different things to consider.\n\n> When I design my route, I say once methods=['POST']. I don't want my implementation to be different if I want to change the http method later on.\n\nThere is a huge semantic difference between a GET request and any other request. Likewise a POST request can accept parameters on the URL as well and very often does.\n\n> In the java world, you don't care, you just get data using the ServletRequest API.\n\nAnd I consider servlet's in general some of the worst API in the Java world, no offense. Partially for the parameter thing, partially because it's method based dispatching is a horror to work with when you need to support HTTP methods like PATCH. (And then irrelevant to that: the fact that it's only allowing IOExceptions to bubble up).\n\n> I wish you left this proposal open to discussion and not close it.\n\nNot sure exactly what you want to discuss here? The functionality you want already exists.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/3562859",
            "html_url": "https://github.com/pallets/flask/issues/385#issuecomment-3562859",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/385",
            "id": 3562859,
            "node_id": "MDEyOklzc3VlQ29tbWVudDM1NjI4NTk=",
            "user": {
                "login": "jpcaruana",
                "id": 31649,
                "node_id": "MDQ6VXNlcjMxNjQ5",
                "avatar_url": "https://avatars0.githubusercontent.com/u/31649?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/jpcaruana",
                "html_url": "https://github.com/jpcaruana",
                "followers_url": "https://api.github.com/users/jpcaruana/followers",
                "following_url": "https://api.github.com/users/jpcaruana/following{/other_user}",
                "gists_url": "https://api.github.com/users/jpcaruana/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/jpcaruana/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jpcaruana/subscriptions",
                "organizations_url": "https://api.github.com/users/jpcaruana/orgs",
                "repos_url": "https://api.github.com/users/jpcaruana/repos",
                "events_url": "https://api.github.com/users/jpcaruana/events{/privacy}",
                "received_events_url": "https://api.github.com/users/jpcaruana/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2012-01-19T13:54:08Z",
            "updated_at": "2012-01-19T13:59:42Z",
            "author_association": "NONE",
            "body": "Well, our points of view differ a lot and I don't see any converging here. We're still struggling between API of a framework and its implementation.\nAnyway, thanks for taking time to answer me with argumentation.\nSee you around.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/3580762",
            "html_url": "https://github.com/pallets/flask/issues/385#issuecomment-3580762",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/385",
            "id": 3580762,
            "node_id": "MDEyOklzc3VlQ29tbWVudDM1ODA3NjI=",
            "user": {
                "login": "bamthomas",
                "id": 551723,
                "node_id": "MDQ6VXNlcjU1MTcyMw==",
                "avatar_url": "https://avatars3.githubusercontent.com/u/551723?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/bamthomas",
                "html_url": "https://github.com/bamthomas",
                "followers_url": "https://api.github.com/users/bamthomas/followers",
                "following_url": "https://api.github.com/users/bamthomas/following{/other_user}",
                "gists_url": "https://api.github.com/users/bamthomas/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/bamthomas/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bamthomas/subscriptions",
                "organizations_url": "https://api.github.com/users/bamthomas/orgs",
                "repos_url": "https://api.github.com/users/bamthomas/repos",
                "events_url": "https://api.github.com/users/bamthomas/events{/privacy}",
                "received_events_url": "https://api.github.com/users/bamthomas/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2012-01-20T09:02:31Z",
            "updated_at": "2012-01-20T09:02:31Z",
            "author_association": "NONE",
            "body": "Well, I'm on the same subject (and working with jpcaruana), so I'm interested by that point. We do TDD, and when refactoring step comes, one of the first thing is \"where is duplication\".\n\nWhen I see differences between post/get in my test : \n\ndef myGetFuntion(app, param1 , param2):\n    return app.get('/my/url', query_string=dict(param1=param1, param2=param2) )\n\ndef myPostFuntion(app, param1 , param2):\n    return app.post('/my/url', data=dict(param1=param1, param2=param2) )\n\nI see duplication : why I have on one side get/post method AND data/query_string on the other side. Is not the API to tell me how much different conceptually is a GET/POST HTTP method. I know exactly what are these differences. \n\nI'd like an API to help me not wasting my time. When I make a post test, then a get test, I'd expect that I call the methods the same way just saying \"get\" or \"post\".\n\nOn a semantic point of view I think that the query is part of the url and so is GET. But it could be great to have an alternative method with a common semantic (parameter seems ok). \n\ncf http://www.w3.org/2001/tag/doc/whenToUseGet.html\n\nWhatever flask is great...\n\nSee you.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/3583434",
            "html_url": "https://github.com/pallets/flask/issues/385#issuecomment-3583434",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/385",
            "id": 3583434,
            "node_id": "MDEyOklzc3VlQ29tbWVudDM1ODM0MzQ=",
            "user": {
                "login": "mitsuhiko",
                "id": 7396,
                "node_id": "MDQ6VXNlcjczOTY=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/7396?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/mitsuhiko",
                "html_url": "https://github.com/mitsuhiko",
                "followers_url": "https://api.github.com/users/mitsuhiko/followers",
                "following_url": "https://api.github.com/users/mitsuhiko/following{/other_user}",
                "gists_url": "https://api.github.com/users/mitsuhiko/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/mitsuhiko/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mitsuhiko/subscriptions",
                "organizations_url": "https://api.github.com/users/mitsuhiko/orgs",
                "repos_url": "https://api.github.com/users/mitsuhiko/repos",
                "events_url": "https://api.github.com/users/mitsuhiko/events{/privacy}",
                "received_events_url": "https://api.github.com/users/mitsuhiko/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2012-01-20T13:27:05Z",
            "updated_at": "2012-01-20T13:27:05Z",
            "author_association": "MEMBER",
            "body": "If you want this functionality for the test client you can easily add this in a custom subclass: http://paste.pocoo.org/show/537768/\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/14467587",
            "html_url": "https://github.com/pallets/flask/issues/385#issuecomment-14467587",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/385",
            "id": 14467587,
            "node_id": "MDEyOklzc3VlQ29tbWVudDE0NDY3NTg3",
            "user": {
                "login": "christopher-ramirez",
                "id": 1440398,
                "node_id": "MDQ6VXNlcjE0NDAzOTg=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1440398?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/christopher-ramirez",
                "html_url": "https://github.com/christopher-ramirez",
                "followers_url": "https://api.github.com/users/christopher-ramirez/followers",
                "following_url": "https://api.github.com/users/christopher-ramirez/following{/other_user}",
                "gists_url": "https://api.github.com/users/christopher-ramirez/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/christopher-ramirez/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/christopher-ramirez/subscriptions",
                "organizations_url": "https://api.github.com/users/christopher-ramirez/orgs",
                "repos_url": "https://api.github.com/users/christopher-ramirez/repos",
                "events_url": "https://api.github.com/users/christopher-ramirez/events{/privacy}",
                "received_events_url": "https://api.github.com/users/christopher-ramirez/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2013-03-05T21:49:25Z",
            "updated_at": "2013-03-05T21:49:25Z",
            "author_association": "NONE",
            "body": "I share mitsuhiko idea. jpcaruana, you are not considering how HTTP methods work and/or are supposed to be used.\n"
        }
    ]
}