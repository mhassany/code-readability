{
    "url": "https://api.github.com/repos/pallets/flask/issues/1025",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/1025/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/1025/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/1025/events",
    "html_url": "https://github.com/pallets/flask/issues/1025",
    "id": 31526601,
    "node_id": "MDU6SXNzdWUzMTUyNjYwMQ==",
    "number": 1025,
    "title": "Calling post method in loop yields unexpected results",
    "user": {
        "login": "SimplicityGuy",
        "id": 449189,
        "node_id": "MDQ6VXNlcjQ0OTE4OQ==",
        "avatar_url": "https://avatars2.githubusercontent.com/u/449189?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SimplicityGuy",
        "html_url": "https://github.com/SimplicityGuy",
        "followers_url": "https://api.github.com/users/SimplicityGuy/followers",
        "following_url": "https://api.github.com/users/SimplicityGuy/following{/other_user}",
        "gists_url": "https://api.github.com/users/SimplicityGuy/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/SimplicityGuy/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/SimplicityGuy/subscriptions",
        "organizations_url": "https://api.github.com/users/SimplicityGuy/orgs",
        "repos_url": "https://api.github.com/users/SimplicityGuy/repos",
        "events_url": "https://api.github.com/users/SimplicityGuy/events{/privacy}",
        "received_events_url": "https://api.github.com/users/SimplicityGuy/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 9,
    "created_at": "2014-04-15T05:06:18Z",
    "updated_at": "2014-05-02T02:50:19Z",
    "closed_at": "2014-05-01T22:39:50Z",
    "author_association": "NONE",
    "body": "server (very basic!):\n\n``` python\nfrom flask import (Flask, request, jsonify)\nfrom werkzeug import secure_filename\n\napp = Flask(__name__)\napp.config.from_object(__name__)\napp.config['MAX_CONTENT_LENGTH'] = 1024 * 1024 * 1024\n\n@app.route('/files', methods=['POST'])\ndef post_files():\n    r = dict()\n    r['directory'] = request.form['directory']\n    # yes, there is more code here, but this is the simplest repro!\n    return jsonify(r)\n\n\nif __name__ == '__main__':\n    app.run(debug=True, host='0.0.0.0')\n```\n\nclient (with debugging output)\n\n``` python\nfrom itertools import izip_longest\nfrom requests_toolbelt import MultipartEncoder\nimport requests\nimport os\nimport sys\nimport argparse\n\nURL = \"http://localhost:5000/files\"\n\n\ndef grouper(n, iterable, fillvalue=None):\n    args = [iter(iterable)] * n\n    return izip_longest(fillvalue=fillvalue, *args)\n\n\ndef import(source_folder, url):\n    for (path, dirs, files) in os.walk(source_folder):\n        if '.DS_Store' in files:\n            files.remove('.DS_Store')\n\n        if '.git' in dirs:\n            dirs.remove('.git')\n\n        # in order to limit the number of files being uploaded at once, keep it to 3 at a time\n        for f1, f2, f3 in grouper(3, files):\n            fields = dict()\n            fields['directory'] = os.path.basename(path)\n            if f1 is not None:\n                fields['f1'] = (f1, open(os.path.join(path, f1), 'rb'))\n            if f2 is not None:\n                fields['f2'] = (f2, open(os.path.join(path, f2), 'rb'))\n            if f3 is not None:\n                fields['f3'] = (f3, open(os.path.join(path, f3), 'rb'))\n            print fields\n            print\n            m = MultipartEncoder(fields=fields)\n            r = requests.post(url,\n                              data=m,\n                              headers={'Content-Type': m.content_type})\n            print r.json()\n            print r\n            print\n            print\n\n\ndef main():\n    parser = argparse.ArgumentParser(description='importer')\n    parser.add_argument('source',\n                        help='source folder to import from')\n    parser.add_argument('--server',\n                        help='server to upload folder to',\n                        dest='url',\n                        required=False,\n                        default=URL)\n\n    args = parser.parse_args()\n    import(args.source, args.url)\n\n\nif __name__ == '__main__':\n    status = main()\n    sys.exit(status)\n```\n\nWhen I run it with an input directory that has 9 files, the first time through, I get a RESPONSE 200, second time through, I get a RESPONSE 400:\n127.0.0.1 - - [14/Apr/2014 22:02:30] \"POST /files HTTP/1.1\" 200 -\n127.0.0.1 - - [14/Apr/2014 22:02:30] \"POST /files HTTP/1.1\" 400 -\n\nAny idea why this is happening?\n",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/41450883",
            "html_url": "https://github.com/pallets/flask/issues/1025#issuecomment-41450883",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1025",
            "id": 41450883,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDUwODgz",
            "user": {
                "login": "DasIch",
                "id": 182316,
                "node_id": "MDQ6VXNlcjE4MjMxNg==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/182316?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/DasIch",
                "html_url": "https://github.com/DasIch",
                "followers_url": "https://api.github.com/users/DasIch/followers",
                "following_url": "https://api.github.com/users/DasIch/following{/other_user}",
                "gists_url": "https://api.github.com/users/DasIch/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/DasIch/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/DasIch/subscriptions",
                "organizations_url": "https://api.github.com/users/DasIch/orgs",
                "repos_url": "https://api.github.com/users/DasIch/repos",
                "events_url": "https://api.github.com/users/DasIch/events{/privacy}",
                "received_events_url": "https://api.github.com/users/DasIch/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-04-26T00:18:05Z",
            "updated_at": "2014-04-26T00:18:05Z",
            "author_association": "CONTRIBUTOR",
            "body": "Can you paste the request that produces the 400?\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/41454049",
            "html_url": "https://github.com/pallets/flask/issues/1025#issuecomment-41454049",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1025",
            "id": 41454049,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDU0MDQ5",
            "user": {
                "login": "SimplicityGuy",
                "id": 449189,
                "node_id": "MDQ6VXNlcjQ0OTE4OQ==",
                "avatar_url": "https://avatars2.githubusercontent.com/u/449189?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/SimplicityGuy",
                "html_url": "https://github.com/SimplicityGuy",
                "followers_url": "https://api.github.com/users/SimplicityGuy/followers",
                "following_url": "https://api.github.com/users/SimplicityGuy/following{/other_user}",
                "gists_url": "https://api.github.com/users/SimplicityGuy/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/SimplicityGuy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/SimplicityGuy/subscriptions",
                "organizations_url": "https://api.github.com/users/SimplicityGuy/orgs",
                "repos_url": "https://api.github.com/users/SimplicityGuy/repos",
                "events_url": "https://api.github.com/users/SimplicityGuy/events{/privacy}",
                "received_events_url": "https://api.github.com/users/SimplicityGuy/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-04-26T01:47:38Z",
            "updated_at": "2014-04-26T01:47:38Z",
            "author_association": "NONE",
            "body": "The loop that's there iterating over the files first produces a 400.\n\nSent from my iPhone\n\n> On Apr 25, 2014, at 5:18 PM, Daniel Neuh\u00e4user notifications@github.com wrote:\n> \n> Can you paste the request that produces the 400?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/41729815",
            "html_url": "https://github.com/pallets/flask/issues/1025#issuecomment-41729815",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1025",
            "id": 41729815,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQxNzI5ODE1",
            "user": {
                "login": "koddsson",
                "id": 318208,
                "node_id": "MDQ6VXNlcjMxODIwOA==",
                "avatar_url": "https://avatars2.githubusercontent.com/u/318208?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/koddsson",
                "html_url": "https://github.com/koddsson",
                "followers_url": "https://api.github.com/users/koddsson/followers",
                "following_url": "https://api.github.com/users/koddsson/following{/other_user}",
                "gists_url": "https://api.github.com/users/koddsson/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/koddsson/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/koddsson/subscriptions",
                "organizations_url": "https://api.github.com/users/koddsson/orgs",
                "repos_url": "https://api.github.com/users/koddsson/repos",
                "events_url": "https://api.github.com/users/koddsson/events{/privacy}",
                "received_events_url": "https://api.github.com/users/koddsson/received_events",
                "type": "User",
                "site_admin": true
            },
            "created_at": "2014-04-29T20:46:05Z",
            "updated_at": "2014-04-29T20:46:05Z",
            "author_association": "NONE",
            "body": "I can't reproduce this on my machine. [This is the code I ran](https://gist.github.com/koddsson/11411478). And this is the output I got:\n\n`client.py`\n\n```\n\u03bb bubblegum test \u2192 bin/python client.py --server http://localhost:5000 derp\n{'directory': 'derp', 'f1': ('2', <open file 'derp/2', mode 'rb' at 0x7f3f83d4e1e0>), 'f2': ('1', <open file 'derp/1', mode 'rb' at 0x7f3f83d4e270>), 'f3': ('3', <open file 'derp/3', mode 'rb' at 0x7f3f83d4e300>)}\n\nTraceback (most recent call last):\n  File \"client.py\", line 62, in <module>\n    status = main()\n  File \"client.py\", line 58, in main\n    _import(args.source, args.url)\n  File \"client.py\", line 41, in _import\n    print r.json()\n  File \"/home/koddsson/test/local/lib/python2.7/site-packages/requests/models.py\", line 741, in json\n    return json.loads(self.text, **kwargs)\n  File \"/usr/lib/python2.7/json/__init__.py\", line 338, in loads\n    return _default_decoder.decode(s)\n  File \"/usr/lib/python2.7/json/decoder.py\", line 366, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/usr/lib/python2.7/json/decoder.py\", line 384, in raw_decode\n    raise ValueError(\"No JSON object could be decoded\")\nValueError: No JSON object could be decoded\n```\n\n`app.py`\n\n```\n\u03bb bubblegum test \u2192 bin/python app.py\n * Running on http://0.0.0.0:5000/\n * Restarting with reloader\n127.0.0.1 - - [29/Apr/2014 20:41:36] \"POST / HTTP/1.1\" 404 -\n```\n\nThe `derp` directory has three files if that matters.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/41758631",
            "html_url": "https://github.com/pallets/flask/issues/1025#issuecomment-41758631",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1025",
            "id": 41758631,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQxNzU4NjMx",
            "user": {
                "login": "SimplicityGuy",
                "id": 449189,
                "node_id": "MDQ6VXNlcjQ0OTE4OQ==",
                "avatar_url": "https://avatars2.githubusercontent.com/u/449189?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/SimplicityGuy",
                "html_url": "https://github.com/SimplicityGuy",
                "followers_url": "https://api.github.com/users/SimplicityGuy/followers",
                "following_url": "https://api.github.com/users/SimplicityGuy/following{/other_user}",
                "gists_url": "https://api.github.com/users/SimplicityGuy/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/SimplicityGuy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/SimplicityGuy/subscriptions",
                "organizations_url": "https://api.github.com/users/SimplicityGuy/orgs",
                "repos_url": "https://api.github.com/users/SimplicityGuy/repos",
                "events_url": "https://api.github.com/users/SimplicityGuy/events{/privacy}",
                "received_events_url": "https://api.github.com/users/SimplicityGuy/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-04-30T04:03:00Z",
            "updated_at": "2014-04-30T04:46:01Z",
            "author_association": "NONE",
            "body": "Unfortunately I'm still seeing this. Try providing an input with more files in it. I tried giving it an input of a git repo (for instance with the flask repo):\n\n```\n{'directory': u'flask', 'f1': u'.gitignore', 'f2': u'.gitmodules', 'f3': u'.travis-devel-requirements.txt'}\n127.0.0.1 - - [29/Apr/2014 20:57:34] \"POST /files HTTP/1.1\" 200 -\n{'directory': u'flask', 'f1': u'.travis-lowest-requirements.txt', 'f2': u'.travis-release-requirements.txt', 'f3': u'.travis.yml'}\n127.0.0.1 - - [29/Apr/2014 20:57:35] \"POST /files HTTP/1.1\" 200 -\n{'directory': u'flask', 'f1': u'AUTHORS', 'f2': u'CHANGES', 'f3': u'LICENSE'}\n127.0.0.1 - - [29/Apr/2014 20:57:35] \"POST /files HTTP/1.1\" 200 -\n127.0.0.1 - - [29/Apr/2014 20:57:35] \"POST /files HTTP/1.1\" 400 -\n{'directory': u'flask', 'f1': u'run-tests.py', 'f2': u'setup.cfg', 'f3': u'setup.py'}\n127.0.0.1 - - [29/Apr/2014 20:57:35] \"POST /files HTTP/1.1\" 200 -\n{'directory': u'flask', 'f1': u'tox.ini'}\n...\n```\n\nWhat's worse too is if you just let the client run with an input folder of the flask repo, at some point you just get a hang where the server no longer sends data back.\n\nI also have a pcap of this issue if it's needed.\n\nFWIW, I'm trying this on a Mac with Mavericks, using Python 2.7.5 (the default version). I've now tried this on three different Macs and all hit the same problems... 400s returned and the hang.\n\nHere is my modified s.py:\n\n```\nfrom flask import (Flask, request, jsonify)\nfrom werkzeug import secure_filename\n\napp = Flask(__name__)\napp.config.from_object(__name__)\napp.config['MAX_CONTENT_LENGTH'] = 1024 * 1024 * 1024\n\n@app.route('/files', methods=['POST'])\ndef post_files():\n    r = dict()\n    r['directory'] = request.form['directory']\n\n    for k, v in request.files.items():\n        file = request.files[k]\n        filename = secure_filename(file.filename)\n        r[k] = file.filename\n\n    print r\n    # yes, there is more code here, but this is the simplest repro!\n    return jsonify(r)\n\n\nif __name__ == '__main__':\n    app.run(debug=True, host='0.0.0.0')\n\n```\n\nand modified c.py:\n\n```\nfrom itertools import izip_longest\nfrom requests_toolbelt import MultipartEncoder\nimport requests\nimport os\nimport sys\nimport argparse\n\nURL = \"http://localhost:5000/files\"\n\n\ndef grouper(n, iterable, fillvalue=None):\n    args = [iter(iterable)] * n\n    return izip_longest(fillvalue=fillvalue, *args)\n\n\ndef ximport(source_folder, url):\n    for (path, dirs, files) in os.walk(source_folder):\n        if '.DS_Store' in files:\n            files.remove('.DS_Store')\n\n        if '.git' in dirs:\n            dirs.remove('.git')\n\n        print\n        print\n        print files\n        print\n\n        # in order to limit the number of files being uploaded at once, keep it to 3 at a time\n        for f1, f2, f3 in grouper(3, files):\n            print f1, f2, f3\n            print\n            fields = dict()\n            fields['directory'] = os.path.basename(path)\n            if f1 is not None:\n                fields['f1'] = (f1, open(os.path.join(path, f1), 'rb'))\n            if f2 is not None:\n                fields['f2'] = (f2, open(os.path.join(path, f2), 'rb'))\n            if f3 is not None:\n                fields['f3'] = (f3, open(os.path.join(path, f3), 'rb'))\n            print fields\n            print\n            m = MultipartEncoder(fields=fields)\n            r = requests.post(url,\n                              data=m,\n                              headers={'Content-Type': m.content_type})\n            print r.text\n            print\n\n\n\ndef main():\n    parser = argparse.ArgumentParser(description='importer')\n    parser.add_argument('source',\n                        help='source folder to import from')\n    parser.add_argument('--server',\n                        help='server to upload folder to',\n                        dest='url',\n                        required=False,\n                        default=URL)\n\n    args = parser.parse_args()\n    ximport(args.source, args.url)\n\n\nif __name__ == '__main__':\n    status = main()\n    sys.exit(status)\n\n\n```\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/41930152",
            "html_url": "https://github.com/pallets/flask/issues/1025#issuecomment-41930152",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1025",
            "id": 41930152,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTMwMTUy",
            "user": {
                "login": "danielchatfield",
                "id": 1058676,
                "node_id": "MDQ6VXNlcjEwNTg2NzY=",
                "avatar_url": "https://avatars3.githubusercontent.com/u/1058676?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/danielchatfield",
                "html_url": "https://github.com/danielchatfield",
                "followers_url": "https://api.github.com/users/danielchatfield/followers",
                "following_url": "https://api.github.com/users/danielchatfield/following{/other_user}",
                "gists_url": "https://api.github.com/users/danielchatfield/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/danielchatfield/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/danielchatfield/subscriptions",
                "organizations_url": "https://api.github.com/users/danielchatfield/orgs",
                "repos_url": "https://api.github.com/users/danielchatfield/repos",
                "events_url": "https://api.github.com/users/danielchatfield/events{/privacy}",
                "received_events_url": "https://api.github.com/users/danielchatfield/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-05-01T17:00:23Z",
            "updated_at": "2014-05-01T17:00:23Z",
            "author_association": "NONE",
            "body": "I'm debugging this, I'm 90% sure the bug is with `requests_toolbelt` or `requests` though, I'll let you know what I find out.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/41952933",
            "html_url": "https://github.com/pallets/flask/issues/1025#issuecomment-41952933",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1025",
            "id": 41952933,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTUyOTMz",
            "user": {
                "login": "danielchatfield",
                "id": 1058676,
                "node_id": "MDQ6VXNlcjEwNTg2NzY=",
                "avatar_url": "https://avatars3.githubusercontent.com/u/1058676?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/danielchatfield",
                "html_url": "https://github.com/danielchatfield",
                "followers_url": "https://api.github.com/users/danielchatfield/followers",
                "following_url": "https://api.github.com/users/danielchatfield/following{/other_user}",
                "gists_url": "https://api.github.com/users/danielchatfield/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/danielchatfield/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/danielchatfield/subscriptions",
                "organizations_url": "https://api.github.com/users/danielchatfield/orgs",
                "repos_url": "https://api.github.com/users/danielchatfield/repos",
                "events_url": "https://api.github.com/users/danielchatfield/events{/privacy}",
                "received_events_url": "https://api.github.com/users/danielchatfield/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-05-01T20:28:14Z",
            "updated_at": "2014-05-01T20:28:14Z",
            "author_association": "NONE",
            "body": "The problem is with `requests_toolbelt`, just writing up a bug report now - feel free to close this issue.\n\nThe short of it is:\n\nThe multipart encoder has a bug where if it the length is greater than the blocksize used to read it (and this it must be read in two chunks) the length returned by len(m) does not match the sum of the chunks which makes the request invalid and Flask rightly rejects this.\n\nI'm not sure why you aren't using the `files` argument for requests directly - it does the seem thing but without any bugs.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/41953757",
            "html_url": "https://github.com/pallets/flask/issues/1025#issuecomment-41953757",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1025",
            "id": 41953757,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTUzNzU3",
            "user": {
                "login": "danielchatfield",
                "id": 1058676,
                "node_id": "MDQ6VXNlcjEwNTg2NzY=",
                "avatar_url": "https://avatars3.githubusercontent.com/u/1058676?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/danielchatfield",
                "html_url": "https://github.com/danielchatfield",
                "followers_url": "https://api.github.com/users/danielchatfield/followers",
                "following_url": "https://api.github.com/users/danielchatfield/following{/other_user}",
                "gists_url": "https://api.github.com/users/danielchatfield/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/danielchatfield/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/danielchatfield/subscriptions",
                "organizations_url": "https://api.github.com/users/danielchatfield/orgs",
                "repos_url": "https://api.github.com/users/danielchatfield/repos",
                "events_url": "https://api.github.com/users/danielchatfield/events{/privacy}",
                "received_events_url": "https://api.github.com/users/danielchatfield/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-05-01T20:36:09Z",
            "updated_at": "2014-05-01T20:36:09Z",
            "author_association": "NONE",
            "body": "Scratch that, `MultipartEncoder.read()` is completely broken - `read(8192)` (default blocksize) returns less than 8192 bytes even though there is more left.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/41965238",
            "html_url": "https://github.com/pallets/flask/issues/1025#issuecomment-41965238",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1025",
            "id": 41965238,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTY1MjM4",
            "user": {
                "login": "SimplicityGuy",
                "id": 449189,
                "node_id": "MDQ6VXNlcjQ0OTE4OQ==",
                "avatar_url": "https://avatars2.githubusercontent.com/u/449189?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/SimplicityGuy",
                "html_url": "https://github.com/SimplicityGuy",
                "followers_url": "https://api.github.com/users/SimplicityGuy/followers",
                "following_url": "https://api.github.com/users/SimplicityGuy/following{/other_user}",
                "gists_url": "https://api.github.com/users/SimplicityGuy/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/SimplicityGuy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/SimplicityGuy/subscriptions",
                "organizations_url": "https://api.github.com/users/SimplicityGuy/orgs",
                "repos_url": "https://api.github.com/users/SimplicityGuy/repos",
                "events_url": "https://api.github.com/users/SimplicityGuy/events{/privacy}",
                "received_events_url": "https://api.github.com/users/SimplicityGuy/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-05-01T22:39:50Z",
            "updated_at": "2014-05-01T22:40:21Z",
            "author_association": "NONE",
            "body": "Thanks Daniel for the investigation! Closing this issue since it's not a flask issue. Linked requests-toolbelt issue.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/41979870",
            "html_url": "https://github.com/pallets/flask/issues/1025#issuecomment-41979870",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1025",
            "id": 41979870,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTc5ODcw",
            "user": {
                "login": "SimplicityGuy",
                "id": 449189,
                "node_id": "MDQ6VXNlcjQ0OTE4OQ==",
                "avatar_url": "https://avatars2.githubusercontent.com/u/449189?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/SimplicityGuy",
                "html_url": "https://github.com/SimplicityGuy",
                "followers_url": "https://api.github.com/users/SimplicityGuy/followers",
                "following_url": "https://api.github.com/users/SimplicityGuy/following{/other_user}",
                "gists_url": "https://api.github.com/users/SimplicityGuy/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/SimplicityGuy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/SimplicityGuy/subscriptions",
                "organizations_url": "https://api.github.com/users/SimplicityGuy/orgs",
                "repos_url": "https://api.github.com/users/SimplicityGuy/repos",
                "events_url": "https://api.github.com/users/SimplicityGuy/events{/privacy}",
                "received_events_url": "https://api.github.com/users/SimplicityGuy/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-05-02T02:50:19Z",
            "updated_at": "2014-05-02T02:50:19Z",
            "author_association": "NONE",
            "body": "> I'm not sure why you aren't using the files argument for requests directly - it does the seem thing but without any bugs.\n\nThe reason I don't want to use requests.post(url, files=..., ...) is because this reads the file upfront rather than streaming the file like MultipartEncoder does. From http://docs.python-requests.org/en/latest/user/quickstart/#post-a-multipart-encoded-file, see:\n\n> In the event you are posting a very large file as a multipart/form-data request, you may want to stream the request. By default, requests does not support this, but there is a separate package which does - requests-toolbelt. You should read the toolbelt\u2019s documentation for more details about how to use it.\n\nMy usage will likely result in very large files, not like using the flask git repo.\n"
        }
    ]
}