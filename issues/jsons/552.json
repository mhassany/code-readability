{
    "url": "https://api.github.com/repos/pallets/flask/issues/552",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/552/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/552/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/552/events",
    "html_url": "https://github.com/pallets/flask/issues/552",
    "id": 5656690,
    "node_id": "MDU6SXNzdWU1NjU2Njkw",
    "number": 552,
    "title": "Reraising an HTTP exception from an error handler isn't the same as not trapping.",
    "user": {
        "login": "adrianratnapala",
        "id": 1096130,
        "node_id": "MDQ6VXNlcjEwOTYxMzA=",
        "avatar_url": "https://avatars1.githubusercontent.com/u/1096130?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/adrianratnapala",
        "html_url": "https://github.com/adrianratnapala",
        "followers_url": "https://api.github.com/users/adrianratnapala/followers",
        "following_url": "https://api.github.com/users/adrianratnapala/following{/other_user}",
        "gists_url": "https://api.github.com/users/adrianratnapala/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/adrianratnapala/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/adrianratnapala/subscriptions",
        "organizations_url": "https://api.github.com/users/adrianratnapala/orgs",
        "repos_url": "https://api.github.com/users/adrianratnapala/repos",
        "events_url": "https://api.github.com/users/adrianratnapala/events{/privacy}",
        "received_events_url": "https://api.github.com/users/adrianratnapala/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 5,
    "created_at": "2012-07-17T05:55:04Z",
    "updated_at": "2017-05-02T21:23:11Z",
    "closed_at": "2012-10-07T14:55:59Z",
    "author_association": "NONE",
    "body": "I am not sure if this is a bug, because I don't know what the expected behaviour is.  I am reporting it just in case (there should also be a mailing list message from 2012-07-15 about this topic).\n##### behaviour (that might be) expected:\n\nIf any exception is trapped and passed to a Flask error handler, but that handler decides to re-raise the exception, the effect should be the same as if no handler had been registered.  For example,  if an HTTP error handler is registered by their numerical code but then re-raises the exception, it should result in Flask's default HTTP error page for that code, even if `TESTING=True`.\n##### behaviour observed:\n\nIf an HTTP error handler is registered via its numerical code re-raises an exception, the exception is then handled is if it were a non-HTTP exception.  If `TESTING=True`, this results in a stack trace.  If `TESTING=False`, the client gets a \"500 Internal Server Error\" regardless of what the original exception was.\n",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/7717781",
            "html_url": "https://github.com/pallets/flask/issues/552#issuecomment-7717781",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/552",
            "id": 7717781,
            "node_id": "MDEyOklzc3VlQ29tbWVudDc3MTc3ODE=",
            "user": {
                "login": "SimonSapin",
                "id": 291359,
                "node_id": "MDQ6VXNlcjI5MTM1OQ==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/291359?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/SimonSapin",
                "html_url": "https://github.com/SimonSapin",
                "followers_url": "https://api.github.com/users/SimonSapin/followers",
                "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}",
                "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions",
                "organizations_url": "https://api.github.com/users/SimonSapin/orgs",
                "repos_url": "https://api.github.com/users/SimonSapin/repos",
                "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}",
                "received_events_url": "https://api.github.com/users/SimonSapin/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2012-08-14T06:55:17Z",
            "updated_at": "2012-08-14T06:55:17Z",
            "author_association": "CONTRIBUTOR",
            "body": "In other words, if an error handler raises an exceeption, Flask should call another error handler? If so, we should be careful not to get stuck in a loop.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/7852544",
            "html_url": "https://github.com/pallets/flask/issues/552#issuecomment-7852544",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/552",
            "id": 7852544,
            "node_id": "MDEyOklzc3VlQ29tbWVudDc4NTI1NDQ=",
            "user": {
                "login": "adrianratnapala",
                "id": 1096130,
                "node_id": "MDQ6VXNlcjEwOTYxMzA=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1096130?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/adrianratnapala",
                "html_url": "https://github.com/adrianratnapala",
                "followers_url": "https://api.github.com/users/adrianratnapala/followers",
                "following_url": "https://api.github.com/users/adrianratnapala/following{/other_user}",
                "gists_url": "https://api.github.com/users/adrianratnapala/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/adrianratnapala/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/adrianratnapala/subscriptions",
                "organizations_url": "https://api.github.com/users/adrianratnapala/orgs",
                "repos_url": "https://api.github.com/users/adrianratnapala/repos",
                "events_url": "https://api.github.com/users/adrianratnapala/events{/privacy}",
                "received_events_url": "https://api.github.com/users/adrianratnapala/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2012-08-19T11:41:59Z",
            "updated_at": "2012-08-19T11:43:04Z",
            "author_association": "NONE",
            "body": "There should be no risk as long as the implementation doesn't call the original user-installed handler.  In fact I don't even know if what I am calling for \"calls another error handler\", I am saying the result of re-raising an exception within the handler, should be the same as not having an exception handler at all.\n\nWhatever gets called will be the default Flask/Werkzeug behaviour, which should not alow HTTPException  (or any thing else) to bubble out.   I can't remember exactly now, but  I think the patch to `Flask.trap_http_exception` I sent to the mailing list did this right.\n\n<pre><code>\ndiff --git a/flask/app.py b/flask/app.py\nindex d30d380..c480814 100644\n--- a/flask/app.py\n+++ b/flask/app.py\n@@ -1210,7 +1210,11 @@ class Flask(_PackageBoundObject):\n             handler = self.error_handler_spec[None].get(e.code)\n         if handler is None:\n             return e\n-        return handler(e)\n+        try: handler(e)\n+        except HTTPException, x:\n+                if self.config.get('TRAP_HTTP_EXCEPTIONS') :\n+                        raise\n+                return x\n\n     def trap_http_exception(self, e):\n         \"\"\"Checks if an HTTP exception should be trapped or not.  By default\n</code></pre>\n\n(I can put this patch up as a proper pull request, if people actually think issue might be bug).\n\nBoth the patch and the context look odd, because they can return exceptions as normal values.  I assumed that the caller just turns any return value into a string and returns that string to the client and the way it turns exceptions into strings is by formatting a nice error page.  This is what already happens `if handler is None`, I am just extending it to the case where the handler raises an HTTPException.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/9208717",
            "html_url": "https://github.com/pallets/flask/issues/552#issuecomment-9208717",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/552",
            "id": 9208717,
            "node_id": "MDEyOklzc3VlQ29tbWVudDkyMDg3MTc=",
            "user": {
                "login": "mitsuhiko",
                "id": 7396,
                "node_id": "MDQ6VXNlcjczOTY=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/7396?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/mitsuhiko",
                "html_url": "https://github.com/mitsuhiko",
                "followers_url": "https://api.github.com/users/mitsuhiko/followers",
                "following_url": "https://api.github.com/users/mitsuhiko/following{/other_user}",
                "gists_url": "https://api.github.com/users/mitsuhiko/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/mitsuhiko/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mitsuhiko/subscriptions",
                "organizations_url": "https://api.github.com/users/mitsuhiko/orgs",
                "repos_url": "https://api.github.com/users/mitsuhiko/repos",
                "events_url": "https://api.github.com/users/mitsuhiko/events{/privacy}",
                "received_events_url": "https://api.github.com/users/mitsuhiko/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2012-10-07T14:55:57Z",
            "updated_at": "2012-10-07T14:55:57Z",
            "author_association": "MEMBER",
            "body": "The terminology might be weird but the current behavior is expected.  What's the usecase you have?\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/84575474",
            "html_url": "https://github.com/pallets/flask/issues/552#issuecomment-84575474",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/552",
            "id": 84575474,
            "node_id": "MDEyOklzc3VlQ29tbWVudDg0NTc1NDc0",
            "user": {
                "login": "adrianratnapala",
                "id": 1096130,
                "node_id": "MDQ6VXNlcjEwOTYxMzA=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1096130?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/adrianratnapala",
                "html_url": "https://github.com/adrianratnapala",
                "followers_url": "https://api.github.com/users/adrianratnapala/followers",
                "following_url": "https://api.github.com/users/adrianratnapala/following{/other_user}",
                "gists_url": "https://api.github.com/users/adrianratnapala/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/adrianratnapala/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/adrianratnapala/subscriptions",
                "organizations_url": "https://api.github.com/users/adrianratnapala/orgs",
                "repos_url": "https://api.github.com/users/adrianratnapala/repos",
                "events_url": "https://api.github.com/users/adrianratnapala/events{/privacy}",
                "received_events_url": "https://api.github.com/users/adrianratnapala/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-03-22T09:40:45Z",
            "updated_at": "2015-03-22T09:40:45Z",
            "author_association": "NONE",
            "body": "Well I can't remember what I was doing when I original wrote the original report, but one obvious use case is a filter:  an exception occurs, the handler tries to recover and send some non-error response over HTTP, but in cases where the exception is unrecoverable, the handler wants to behave as if it didn't exist.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/298765539",
            "html_url": "https://github.com/pallets/flask/issues/552#issuecomment-298765539",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/552",
            "id": 298765539,
            "node_id": "MDEyOklzc3VlQ29tbWVudDI5ODc2NTUzOQ==",
            "user": {
                "login": "ngaya-ll",
                "id": 11203134,
                "node_id": "MDQ6VXNlcjExMjAzMTM0",
                "avatar_url": "https://avatars3.githubusercontent.com/u/11203134?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/ngaya-ll",
                "html_url": "https://github.com/ngaya-ll",
                "followers_url": "https://api.github.com/users/ngaya-ll/followers",
                "following_url": "https://api.github.com/users/ngaya-ll/following{/other_user}",
                "gists_url": "https://api.github.com/users/ngaya-ll/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/ngaya-ll/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ngaya-ll/subscriptions",
                "organizations_url": "https://api.github.com/users/ngaya-ll/orgs",
                "repos_url": "https://api.github.com/users/ngaya-ll/repos",
                "events_url": "https://api.github.com/users/ngaya-ll/events{/privacy}",
                "received_events_url": "https://api.github.com/users/ngaya-ll/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2017-05-02T21:23:11Z",
            "updated_at": "2017-05-02T21:23:11Z",
            "author_association": "NONE",
            "body": "For `HTTPException`s the handler can return (not raise) the original exception as a response."
        }
    ]
}