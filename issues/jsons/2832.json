{
    "url": "https://api.github.com/repos/pallets/flask/issues/2832",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/2832/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/2832/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/2832/events",
    "html_url": "https://github.com/pallets/flask/pull/2832",
    "id": 332963167,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MTk1MzE4Nzk1",
    "number": 2832,
    "title": "Add `JSON_STRICT` config option",
    "user": {
        "login": "abought",
        "id": 2957073,
        "node_id": "MDQ6VXNlcjI5NTcwNzM=",
        "avatar_url": "https://avatars2.githubusercontent.com/u/2957073?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/abought",
        "html_url": "https://github.com/abought",
        "followers_url": "https://api.github.com/users/abought/followers",
        "following_url": "https://api.github.com/users/abought/following{/other_user}",
        "gists_url": "https://api.github.com/users/abought/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/abought/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/abought/subscriptions",
        "organizations_url": "https://api.github.com/users/abought/orgs",
        "repos_url": "https://api.github.com/users/abought/repos",
        "events_url": "https://api.github.com/users/abought/events{/privacy}",
        "received_events_url": "https://api.github.com/users/abought/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 4,
    "created_at": "2018-06-16T05:49:22Z",
    "updated_at": "2019-01-07T00:06:03Z",
    "closed_at": "2019-01-06T23:59:15Z",
    "author_association": "NONE",
    "pull_request": {
        "url": "https://api.github.com/repos/pallets/flask/pulls/2832",
        "html_url": "https://github.com/pallets/flask/pull/2832",
        "diff_url": "https://github.com/pallets/flask/pull/2832.diff",
        "patch_url": "https://github.com/pallets/flask/pull/2832.patch"
    },
    "body": "## Summary\r\nProvide a new config option to control how JSON is serialized. This would prevent situations where Flask returns a response that is not actually JSON specification compliant.\r\n\r\nThis proposal is an opt-in mechanism. For backwards compatibility, it is disabled by default.\r\n\r\n## Purpose\r\nThe default Python JSON serializer is not strictly [RFC-compliant](https://docs.python.org/3/library/json.html#standard-compliance-and-interoperability). In particular, it [outputs](https://docs.python.org/3/library/json.html#infinite-and-nan-number-values)\r\n `Infinity` and `NaN` values.\r\n\r\nThis means that by default, JSON APIs written in Flask may produce output that cannot be parsed by the browser, especially when dealing with numerical data.\r\n\r\nEnabling the newly provided `JSON_STRICT` option would treat this scenario as an application error server-side and raise an exception. It would be up to the application developer to identify their preferred handling of such values.\r\n\r\n## Changes and scope\r\nThis adds a new `JSON_STRICT` config option, adding to the [existing config flags](http://flask.pocoo.org/docs/1.0/config/#JSON_AS_ASCII) that also control serialization. \r\n\r\nThe default value is chosen to leave existing applications unaffected. If `JSON_STRICT` is `True`, the application will raise an error in situations where it previously would have produced invalid JSON. \r\n\r\n## Previous discussion\r\nThis pitfall has been noted previously elsewhere. Others have expressed an interest in a simple, explicit configurable error option, but I am not aware of any previous pull requests that implemented the idea.\r\n\r\n- https://coderwall.com/p/amb0va/python-s-json-module-does-not-always-produce-valid-json\r\n- https://github.com/miguelgrinberg/Flask-SocketIO/issues/208\r\n\r\nParticularly due to backwards compatibility concerns, the Python standard library has rejected previous suggestions to change the default `json` module behavior:\r\nhttps://bugs.python.org/issue26105\r\n\r\n## Evaluation of alternatives\r\nLibraries such as `simplejson` [provide](https://simplejson.readthedocs.io/en/latest/#simplejson.dumps) an [ECMA-262 compliant](https://www.ecma-international.org/ecma-262/8.0/index.html#sec-serializejsonproperty) `ignore_nan` option, in which out-of-range values are serialized as `null`.\r\n\r\nHowever, this option is not supported by the Python standard library, and in practice the best choice of replacement value may be somewhat application specific.\r\n",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/397795781",
            "html_url": "https://github.com/pallets/flask/pull/2832#issuecomment-397795781",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2832",
            "id": 397795781,
            "node_id": "MDEyOklzc3VlQ29tbWVudDM5Nzc5NTc4MQ==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2018-06-16T08:02:53Z",
            "updated_at": "2018-06-16T08:02:53Z",
            "author_association": "MEMBER",
            "body": "We already support simplejson if it's installed. This seems like a good case for a custom serializer rather than a configuration option."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/397821828",
            "html_url": "https://github.com/pallets/flask/pull/2832#issuecomment-397821828",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2832",
            "id": 397821828,
            "node_id": "MDEyOklzc3VlQ29tbWVudDM5NzgyMTgyOA==",
            "user": {
                "login": "abought",
                "id": 2957073,
                "node_id": "MDQ6VXNlcjI5NTcwNzM=",
                "avatar_url": "https://avatars2.githubusercontent.com/u/2957073?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/abought",
                "html_url": "https://github.com/abought",
                "followers_url": "https://api.github.com/users/abought/followers",
                "following_url": "https://api.github.com/users/abought/following{/other_user}",
                "gists_url": "https://api.github.com/users/abought/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/abought/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/abought/subscriptions",
                "organizations_url": "https://api.github.com/users/abought/orgs",
                "repos_url": "https://api.github.com/users/abought/repos",
                "events_url": "https://api.github.com/users/abought/events{/privacy}",
                "received_events_url": "https://api.github.com/users/abought/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2018-06-16T15:59:38Z",
            "updated_at": "2018-06-20T16:08:35Z",
            "author_association": "NONE",
            "body": "Thanks for your comment. If you prefer a refined or alternate approach, I would be happy to iterate on this and follow up...?\r\n\r\nThe key idea is that by default, a web application framework is producing JSON output that cannot be parsed by web browsers. I think there is a niche within flask core for a simple, obvious, and configurable way to warn about this.\r\n\r\nThe current mechanisms in flask are powerful, but only after the fact. Before a developer can write a custom serializer, first they must know the issue is occurring. The current default behavior is hard to track down, because it involves special values like `infinity` and the application claims to be acting normally.\r\n\r\nPer your other note: although  flask uses simplejson **if installed**, it does not expose or enable the relevant underlying options. (Mainly because functions such as [jsonify](http://flask.pocoo.org/docs/1.0/api/#flask.json.jsonify) treat kwargs as data, rather than options)"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/451787712",
            "html_url": "https://github.com/pallets/flask/pull/2832#issuecomment-451787712",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2832",
            "id": 451787712,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTc4NzcxMg==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2019-01-06T23:59:15Z",
            "updated_at": "2019-01-07T00:05:54Z",
            "author_association": "MEMBER",
            "body": "I'd prefer not to add another config option. You can accomplish the same thing with:\r\n\r\n```python\r\nfrom flask.json import JSONEncoder\r\n\r\nclass StrictEncoder(JSONEncoder):\r\n    def __init__(self, *args, allow_nan=False, **kwargs):\r\n        kwargs[\"allow_nan\"] = allow_nan\r\n        super().__init__(*args, **kwargs)\r\n\r\napp.json_encoder = StrictEncoder\r\n```"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/451788086",
            "html_url": "https://github.com/pallets/flask/pull/2832#issuecomment-451788086",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2832",
            "id": 451788086,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTc4ODA4Ng==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2019-01-07T00:03:21Z",
            "updated_at": "2019-01-07T00:06:02Z",
            "author_association": "MEMBER",
            "body": "Basically, if your app happens to produce these, and you don't want it to, then you should be sanitizing your data before serialization anyway. Either you do `allow_nan=False` and present a mysterious 500 error to your user, or you ensure your data is correct before sending it."
        }
    ]
}