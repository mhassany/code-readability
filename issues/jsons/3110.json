{
    "url": "https://api.github.com/repos/pallets/flask/issues/3110",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/3110/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/3110/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/3110/events",
    "html_url": "https://github.com/pallets/flask/issues/3110",
    "id": 416439063,
    "node_id": "MDU6SXNzdWU0MTY0MzkwNjM=",
    "number": 3110,
    "title": "Testing with TestClient and a custom response_class calls constructor twice",
    "user": {
        "login": "ekor15",
        "id": 5829500,
        "node_id": "MDQ6VXNlcjU4Mjk1MDA=",
        "avatar_url": "https://avatars3.githubusercontent.com/u/5829500?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ekor15",
        "html_url": "https://github.com/ekor15",
        "followers_url": "https://api.github.com/users/ekor15/followers",
        "following_url": "https://api.github.com/users/ekor15/following{/other_user}",
        "gists_url": "https://api.github.com/users/ekor15/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ekor15/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ekor15/subscriptions",
        "organizations_url": "https://api.github.com/users/ekor15/orgs",
        "repos_url": "https://api.github.com/users/ekor15/repos",
        "events_url": "https://api.github.com/users/ekor15/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ekor15/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 4,
    "created_at": "2019-03-02T20:33:58Z",
    "updated_at": "2019-03-06T19:53:57Z",
    "closed_at": "2019-03-02T21:18:33Z",
    "author_association": "NONE",
    "body": "When working with a custom response class the test_client calls the response class constructor, after the make_response already called the response class constructor\r\n\r\nThis causes a CustomResponse object to be passed to the constructor of the CustomResponse class.\r\nA basic example of the problem\r\n```python\r\nimport json\r\nfrom unittest import TestCase\r\n\r\nfrom flask import Response, Flask\r\nfrom hamcrest import has_entry\r\nfrom hamcrest.core import assert_that\r\nfrom hamcrest.core.core import is_\r\n\r\n\r\nclass TestMediaAppRestResponse(TestCase):\r\n\r\n    def setUp(self):\r\n        self.media_app = MyApp(__name__)\r\n        self.client = self.media_app.test_client()\r\n\r\n    def _test_client(self):\r\n        return self.media_app.test_client()\r\n\r\n    def test_rest_response__dict_register_response_class_before_test_client(self):\r\n        return_value = {'dict_prop': 'dict_value'}\r\n        self.media_app.route('/')(_make_handler_with_response(return_value))\r\n        self.media_app.register_response_class()\r\n\r\n        test_client = self._test_client()\r\n\r\n        response = test_client.get('/')\r\n        print ('will never get here')\r\n\r\n    def test_rest_response__dict_register_response_class_after_test_client(self):\r\n        return_value = {'dict_prop': 'dict_value'}\r\n\r\n        test_client = self._test_client()\r\n\r\n        self.media_app.register_response_class()\r\n        self.media_app.route('/')(_make_handler_with_response(return_value))\r\n\r\n        response = test_client.get('/')\r\n        assert_that(response.get_json(), has_entry('payload', is_(return_value)))\r\n\r\n\r\ndef _make_handler_with_response(response):\r\n    def wrapped_handler():\r\n        return response\r\n    return wrapped_handler\r\n\r\n\r\nclass MyApp(Flask):\r\n\r\n    def __init__(self, *args, **kwargs):\r\n        super().__init__(*args, **kwargs)\r\n\r\n    def register_response_class(self):\r\n        self.response_class = MyResponse\r\n\r\n    def make_response(self, response_value):\r\n        if isinstance(response_value, self.response_class):\r\n            return response_value\r\n        return self.response_class(response_value, http_status=200, code=0, message='ok')\r\n\r\n\r\nclass MyResponse(Response):\r\n    def __init__(self, payload=None, http_status: int = 200,\r\n                 code: int = None,\r\n                 message: str = '', *args, **kwargs):\r\n        message = message\r\n        code = code if code is not None else http_status\r\n        payload = payload\r\n        body_str = json.dumps({'code': code, 'message': message, 'payload': payload}, separators=(',', ':'))\r\n\r\n        super().__init__(body_str, status=http_status, mimetype='application/json', *args, **kwargs)\r\n\r\n\r\n\r\n```\r\n\r\n### Expected Behavior\r\n\r\nThe custom response class constructor should only be called by the make_response method\r\n\r\n\r\n### Actual Behavior\r\n\r\nThe constructor was called by the make_response method then by the test_client becuase the custom response class is passed to the client when it is created by the app. \r\n```pytb\r\nTraceback (most recent call last):\r\n  File \"/usr/local/Cellar/python/3.7.1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/unittest/case.py\", line 59, in testPartExecutor\r\n    yield\r\n  File \"/usr/local/Cellar/python/3.7.1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/unittest/case.py\", line 615, in run\r\n    testMethod()\r\n  File \"/Users/elirans/projects/media-framework/tests/media_framework_test/http/flask/test_media_app_rest_response_multiple_calls.py\", line 26, in test_rest_response__dict_register_response_class_before_test_client\r\n    response = test_client.get('/')\r\n  File \"/Users/elirans/projects/media-framework/run/lib/python3.7/site-packages/werkzeug/test.py\", line 830, in get\r\n    return self.open(*args, **kw)\r\n  File \"/Users/elirans/projects/media-framework/run/lib/python3.7/site-packages/flask/testing.py\", line 200, in open\r\n    follow_redirects=follow_redirects\r\n  File \"/Users/elirans/projects/media-framework/run/lib/python3.7/site-packages/werkzeug/test.py\", line 822, in open\r\n    response = self.response_wrapper(*response)\r\n  File \"/Users/elirans/projects/media-framework/tests/media_framework_test/http/flask/test_media_app_rest_response_multiple_calls.py\", line 72, in __init__\r\n    body_str = json.dumps({'code': code, 'message': message, 'payload': payload}, separators=(',', ':'))\r\n  File \"/usr/local/Cellar/python/3.7.1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/__init__.py\", line 238, in dumps\r\n    **kw).encode(obj)\r\n  File \"/usr/local/Cellar/python/3.7.1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/encoder.py\", line 199, in encode\r\n    chunks = self.iterencode(o, _one_shot=True)\r\n  File \"/usr/local/Cellar/python/3.7.1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/encoder.py\", line 257, in iterencode\r\n    return _iterencode(o, 0)\r\n  File \"/usr/local/Cellar/python/3.7.1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/encoder.py\", line 179, in default\r\n    raise TypeError(f'Object of type {o.__class__.__name__} '\r\nTypeError: Object of type Headers is not JSON serializable\r\n```\r\n\r\n### Environment\r\n\r\n* Python version: 3.7.1\r\n* Flask version: 1.0.2\r\n* Werkzeug version: 0.14.1\r\n",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/468959911",
            "html_url": "https://github.com/pallets/flask/issues/3110#issuecomment-468959911",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/3110",
            "id": 468959911,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ2ODk1OTkxMQ==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2019-03-02T21:02:58Z",
            "updated_at": "2019-03-02T21:02:58Z",
            "author_association": "MEMBER",
            "body": "Here's a minimal example:\r\n\r\n```python\r\nfrom flask import Flask, Response\r\n\r\n\r\napp = Flask(__name__)\r\n\r\n\r\n@app.route(\"/\")\r\ndef index():\r\n    return \"Hello, World!\"\r\n\r\n\r\nclass CustomResponse(Response):\r\n    def __init__(self, *args, **kwargs):\r\n        print(\"CustomResponse\")\r\n        super().__init__(*args, **kwargs)\r\n\r\n\r\napp.response_class = CustomResponse\r\nclient = app.test_client()\r\nrv = client.get(\"/\")\r\nprint(rv.get_data(as_text=True))\r\n```\r\n\r\nOutput:\r\n\r\n```\r\nCustomResponse\r\nCustomResponse\r\nHello, World!\r\n```"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/468961248",
            "html_url": "https://github.com/pallets/flask/issues/3110#issuecomment-468961248",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/3110",
            "id": 468961248,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ2ODk2MTI0OA==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2019-03-02T21:18:33Z",
            "updated_at": "2019-03-02T21:18:33Z",
            "author_association": "MEMBER",
            "body": "The arguments passed to `Response.__init__` must still work the same as Werkzeug expects (duck typing), but you've changed that to pass arbitrary values then process them without checking what was passed first. The processing you're doing in `CustomResponse.__init__` should be moved to `MyApp.make_response`. `make_response` should still construct the `Response` by passing it a string or iterable.\r\n\r\nThe reason why is that internal code besided your own expects `response_class` to have the same interface as the default. Flask will use `response_class` to generate the response from the value returned by the view. Werkzeug's `Client` runs the Flask app as if it were a WSGI server, the response it gets is the WSGI response that the `response_class` produces, a tuple of . Flask tells the client to wrap that raw response in its response class so that the return value is easier to work with."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/469236372",
            "html_url": "https://github.com/pallets/flask/issues/3110#issuecomment-469236372",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/3110",
            "id": 469236372,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ2OTIzNjM3Mg==",
            "user": {
                "login": "ekor15",
                "id": 5829500,
                "node_id": "MDQ6VXNlcjU4Mjk1MDA=",
                "avatar_url": "https://avatars3.githubusercontent.com/u/5829500?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/ekor15",
                "html_url": "https://github.com/ekor15",
                "followers_url": "https://api.github.com/users/ekor15/followers",
                "following_url": "https://api.github.com/users/ekor15/following{/other_user}",
                "gists_url": "https://api.github.com/users/ekor15/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/ekor15/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ekor15/subscriptions",
                "organizations_url": "https://api.github.com/users/ekor15/orgs",
                "repos_url": "https://api.github.com/users/ekor15/repos",
                "events_url": "https://api.github.com/users/ekor15/events{/privacy}",
                "received_events_url": "https://api.github.com/users/ekor15/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2019-03-04T12:32:51Z",
            "updated_at": "2019-03-04T12:32:51Z",
            "author_association": "NONE",
            "body": "First, thank you very much for the quick response. I want to make sure that I explained myself correctly\r\n\r\nThe problem is only in testing because of the behavior of the test client.\r\nI will give this example: I want to return MyResponse object from the handler for some reason (headers for example)\r\n\r\n```python\r\nimport json\r\nfrom flask import Flask, Response\r\napp = Flask(__name__)\r\n\r\n@app.route(\"/\")\r\ndef index():\r\n    return MyResponse(\"Hello, World!\", headers={'x-some-header': 'header value'})\r\n\r\nclass MyResponse(Response):\r\n    def __init__(self,response, *args, **kwargs):\r\n        print(\"CustomResponse\")\r\n        response = '{\"code\":0,\"payload\":\"' + json.dumps(response) + '\"}'\r\n        super().__init__(response,*args, **kwargs)\r\n\r\nif __name__ == '__main__':\r\n    # creating a client before registering the custom response - this works like an external client calling the server\r\n    client = app.test_client()\r\n    app.response_class = MyResponse\r\n    rv = client.get(\"/\")\r\n    print('works like it would in production: ' + rv.get_data(as_text=True))\r\n\r\n    # this client has the response wrapper.\r\n    client = app.test_client()\r\n    rv = client.get(\"/\")\r\n    print('will not get here' + rv.get_data(as_text=True))\r\n```\r\n\r\n\r\n* This handler will work in production. This is just a test_client problem\r\n* This will happen regardless if I return a MyResponse object from the handler\r\n    As you mentioned - override the make_response to return an instance of MyResponse will still cause this bug.\r\n3. I do not want to wrap my return value in the handlers. If I reuse this code in a project that has a different wrapper or does not have a wrapper for the response\r\n\r\nDo you still think this is not a bug?\r\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/470088132",
            "html_url": "https://github.com/pallets/flask/issues/3110#issuecomment-470088132",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/3110",
            "id": 470088132,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MDA4ODEzMg==",
            "user": {
                "login": "ekor15",
                "id": 5829500,
                "node_id": "MDQ6VXNlcjU4Mjk1MDA=",
                "avatar_url": "https://avatars3.githubusercontent.com/u/5829500?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/ekor15",
                "html_url": "https://github.com/ekor15",
                "followers_url": "https://api.github.com/users/ekor15/followers",
                "following_url": "https://api.github.com/users/ekor15/following{/other_user}",
                "gists_url": "https://api.github.com/users/ekor15/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/ekor15/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ekor15/subscriptions",
                "organizations_url": "https://api.github.com/users/ekor15/orgs",
                "repos_url": "https://api.github.com/users/ekor15/repos",
                "events_url": "https://api.github.com/users/ekor15/events{/privacy}",
                "received_events_url": "https://api.github.com/users/ekor15/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2019-03-06T12:24:10Z",
            "updated_at": "2019-03-06T12:24:10Z",
            "author_association": "NONE",
            "body": "Hi @davidism \r\nCan you please respond to my new comment? "
        }
    ]
}