{
    "url": "https://api.github.com/repos/pallets/flask/issues/582",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/582/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/582/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/582/events",
    "html_url": "https://github.com/pallets/flask/pull/582",
    "id": 6485198,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MjE3Mzc2Ng==",
    "number": 582,
    "title": "Implement support for X-HTTP-Method-Override in flask.views.MethodView.",
    "user": {
        "login": "jperras",
        "id": 20675,
        "node_id": "MDQ6VXNlcjIwNjc1",
        "avatar_url": "https://avatars2.githubusercontent.com/u/20675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jperras",
        "html_url": "https://github.com/jperras",
        "followers_url": "https://api.github.com/users/jperras/followers",
        "following_url": "https://api.github.com/users/jperras/following{/other_user}",
        "gists_url": "https://api.github.com/users/jperras/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jperras/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jperras/subscriptions",
        "organizations_url": "https://api.github.com/users/jperras/orgs",
        "repos_url": "https://api.github.com/users/jperras/repos",
        "events_url": "https://api.github.com/users/jperras/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jperras/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 9,
    "created_at": "2012-08-27T21:29:05Z",
    "updated_at": "2014-06-13T10:20:26Z",
    "closed_at": "2012-10-07T10:57:29Z",
    "author_association": "CONTRIBUTOR",
    "pull_request": {
        "url": "https://api.github.com/repos/pallets/flask/pulls/582",
        "html_url": "https://github.com/pallets/flask/pull/582",
        "diff_url": "https://github.com/pallets/flask/pull/582.diff",
        "patch_url": "https://github.com/pallets/flask/pull/582.patch"
    },
    "body": "When an incoming request contains the X-HTTP-Method-Override header, the\nvalue of that header is used as the view method to be executed instead\nof the original incoming HTTP verb.\n\nThis helps support dumb(er) webservers and proxies that don't understand newer HTTP verbs (e.g. PATCH), of which Amazon's Elastic Load Balancer service is a member.\n\nI only added the functionality to `flask.views.MethodView`, because I was unsure about what would be a good way to do it with the standard `dispatch_request`; developers often introspect the HTTP method inside of decorator-based routes when supporting more than one verb in a route, so should the `request.method` value be overridden completely, or should devs be required to check for the X-HTTP-Method-Override header themselves? Neither option seems very appealing to me.\n",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/8071520",
            "html_url": "https://github.com/pallets/flask/pull/582#issuecomment-8071520",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/582",
            "id": 8071520,
            "node_id": "MDEyOklzc3VlQ29tbWVudDgwNzE1MjA=",
            "user": {
                "login": "travisbot",
                "id": 1516820,
                "node_id": "MDQ6VXNlcjE1MTY4MjA=",
                "avatar_url": "https://avatars3.githubusercontent.com/u/1516820?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/travisbot",
                "html_url": "https://github.com/travisbot",
                "followers_url": "https://api.github.com/users/travisbot/followers",
                "following_url": "https://api.github.com/users/travisbot/following{/other_user}",
                "gists_url": "https://api.github.com/users/travisbot/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/travisbot/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/travisbot/subscriptions",
                "organizations_url": "https://api.github.com/users/travisbot/orgs",
                "repos_url": "https://api.github.com/users/travisbot/repos",
                "events_url": "https://api.github.com/users/travisbot/events{/privacy}",
                "received_events_url": "https://api.github.com/users/travisbot/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2012-08-27T21:31:13Z",
            "updated_at": "2012-08-27T21:31:13Z",
            "author_association": "NONE",
            "body": "This pull request [passes](http://travis-ci.org/mitsuhiko/flask/builds/2255119) (merged 708a2abc into 80b26893).\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/8080001",
            "html_url": "https://github.com/pallets/flask/pull/582#issuecomment-8080001",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/582",
            "id": 8080001,
            "node_id": "MDEyOklzc3VlQ29tbWVudDgwODAwMDE=",
            "user": {
                "login": "kennethreitz",
                "id": 119893,
                "node_id": "MDQ6VXNlcjExOTg5Mw==",
                "avatar_url": "https://avatars2.githubusercontent.com/u/119893?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/kennethreitz",
                "html_url": "https://github.com/kennethreitz",
                "followers_url": "https://api.github.com/users/kennethreitz/followers",
                "following_url": "https://api.github.com/users/kennethreitz/following{/other_user}",
                "gists_url": "https://api.github.com/users/kennethreitz/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/kennethreitz/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/kennethreitz/subscriptions",
                "organizations_url": "https://api.github.com/users/kennethreitz/orgs",
                "repos_url": "https://api.github.com/users/kennethreitz/repos",
                "events_url": "https://api.github.com/users/kennethreitz/events{/privacy}",
                "received_events_url": "https://api.github.com/users/kennethreitz/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2012-08-28T05:40:55Z",
            "updated_at": "2012-08-28T05:40:55Z",
            "author_association": "CONTRIBUTOR",
            "body": "+100, I'd love to see this enabled in Flask by default. However, I believe there's a built-in way to do this with werkzeug. @mitsuhiko ?\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/8094066",
            "html_url": "https://github.com/pallets/flask/pull/582#issuecomment-8094066",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/582",
            "id": 8094066,
            "node_id": "MDEyOklzc3VlQ29tbWVudDgwOTQwNjY=",
            "user": {
                "login": "mattupstate",
                "id": 166176,
                "node_id": "MDQ6VXNlcjE2NjE3Ng==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/166176?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/mattupstate",
                "html_url": "https://github.com/mattupstate",
                "followers_url": "https://api.github.com/users/mattupstate/followers",
                "following_url": "https://api.github.com/users/mattupstate/following{/other_user}",
                "gists_url": "https://api.github.com/users/mattupstate/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/mattupstate/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mattupstate/subscriptions",
                "organizations_url": "https://api.github.com/users/mattupstate/orgs",
                "repos_url": "https://api.github.com/users/mattupstate/repos",
                "events_url": "https://api.github.com/users/mattupstate/events{/privacy}",
                "received_events_url": "https://api.github.com/users/mattupstate/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2012-08-28T14:46:01Z",
            "updated_at": "2012-08-28T14:50:54Z",
            "author_association": "CONTRIBUTOR",
            "body": "I'm wary of HTTP headers that start with `X-`. I use a WSGI middleware paired with a query string to care of this for me. \n\n``` python\nclass HTTPMethodOverrideMiddleware(object):\n    \"\"\"The HTTPMethodOverrideMiddleware middleware implements the hidden HTTP\n    method technique. Not all web browsers support every HTTP method, such as\n    DELETE and PUT. Using a querystring parameter is the easiest implementation\n    given Werkzeug and how middleware is implemented. The following is an\n    example of how to create a form with a PUT method:\n\n        <form action=\"/stuff/id?__METHOD_OVERRIDE__=PUT\" method=\"POST\">\n            ...\n        </form>\n    \"\"\"\n    def __init__(self, app):\n        self.app = app\n\n    def __call__(self, environ, start_response):\n        if '__METHOD_OVERRIDE__' in environ.get('QUERY_STRING', ''):\n            args = url_decode(environ['QUERY_STRING'])\n            method = args.get('__METHOD_OVERRIDE__').upper()\n            if method in ['GET', 'POST', 'PUT', 'DELETE']:\n                method = method.encode('ascii', 'replace')\n                environ['REQUEST_METHOD'] = method\n        return self.app(environ, start_response)\n```\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/8094345",
            "html_url": "https://github.com/pallets/flask/pull/582#issuecomment-8094345",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/582",
            "id": 8094345,
            "node_id": "MDEyOklzc3VlQ29tbWVudDgwOTQzNDU=",
            "user": {
                "login": "jperras",
                "id": 20675,
                "node_id": "MDQ6VXNlcjIwNjc1",
                "avatar_url": "https://avatars2.githubusercontent.com/u/20675?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/jperras",
                "html_url": "https://github.com/jperras",
                "followers_url": "https://api.github.com/users/jperras/followers",
                "following_url": "https://api.github.com/users/jperras/following{/other_user}",
                "gists_url": "https://api.github.com/users/jperras/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/jperras/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jperras/subscriptions",
                "organizations_url": "https://api.github.com/users/jperras/orgs",
                "repos_url": "https://api.github.com/users/jperras/repos",
                "events_url": "https://api.github.com/users/jperras/events{/privacy}",
                "received_events_url": "https://api.github.com/users/jperras/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2012-08-28T14:54:08Z",
            "updated_at": "2012-08-28T14:54:08Z",
            "author_association": "CONTRIBUTOR",
            "body": "@mattupstate Agreed, but there are some situations where `X-` headers are acceptable; the most notable example being the pseudo-standard `X-Requested-With` used by `werkzeug` to determine if the originating request originated from an `XMLHttpRequest` from the browser.\n\nI _do_ like your middleware solution idea, but I'd rather not pollute my query strings with metadata that is better represented in a header.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/8094585",
            "html_url": "https://github.com/pallets/flask/pull/582#issuecomment-8094585",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/582",
            "id": 8094585,
            "node_id": "MDEyOklzc3VlQ29tbWVudDgwOTQ1ODU=",
            "user": {
                "login": "mattupstate",
                "id": 166176,
                "node_id": "MDQ6VXNlcjE2NjE3Ng==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/166176?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/mattupstate",
                "html_url": "https://github.com/mattupstate",
                "followers_url": "https://api.github.com/users/mattupstate/followers",
                "following_url": "https://api.github.com/users/mattupstate/following{/other_user}",
                "gists_url": "https://api.github.com/users/mattupstate/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/mattupstate/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mattupstate/subscriptions",
                "organizations_url": "https://api.github.com/users/mattupstate/orgs",
                "repos_url": "https://api.github.com/users/mattupstate/repos",
                "events_url": "https://api.github.com/users/mattupstate/events{/privacy}",
                "received_events_url": "https://api.github.com/users/mattupstate/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2012-08-28T15:00:31Z",
            "updated_at": "2012-08-28T17:13:39Z",
            "author_association": "CONTRIBUTOR",
            "body": "In some cases it is quite convenient to use a query string, especially in plain old HTML views that POST forms. Headers are nice with clients that are more full featured. I once looked into seeing if a header value could be retrieved in the middleware but I think it would have proved difficult since the environ wasn't \"parsed\" yet but I'm also not very well versed in WSGI yet. I think it would be ideal if it's possible to check for either a query string or header in the middleware.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/8457997",
            "html_url": "https://github.com/pallets/flask/pull/582#issuecomment-8457997",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/582",
            "id": 8457997,
            "node_id": "MDEyOklzc3VlQ29tbWVudDg0NTc5OTc=",
            "user": {
                "login": "jperras",
                "id": 20675,
                "node_id": "MDQ6VXNlcjIwNjc1",
                "avatar_url": "https://avatars2.githubusercontent.com/u/20675?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/jperras",
                "html_url": "https://github.com/jperras",
                "followers_url": "https://api.github.com/users/jperras/followers",
                "following_url": "https://api.github.com/users/jperras/following{/other_user}",
                "gists_url": "https://api.github.com/users/jperras/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/jperras/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jperras/subscriptions",
                "organizations_url": "https://api.github.com/users/jperras/orgs",
                "repos_url": "https://api.github.com/users/jperras/repos",
                "events_url": "https://api.github.com/users/jperras/events{/privacy}",
                "received_events_url": "https://api.github.com/users/jperras/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2012-09-11T12:34:54Z",
            "updated_at": "2012-09-11T12:34:54Z",
            "author_association": "CONTRIBUTOR",
            "body": "Any thoughts, @mitsuhiko?\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/8471520",
            "html_url": "https://github.com/pallets/flask/pull/582#issuecomment-8471520",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/582",
            "id": 8471520,
            "node_id": "MDEyOklzc3VlQ29tbWVudDg0NzE1MjA=",
            "user": {
                "login": "boris317",
                "id": 339231,
                "node_id": "MDQ6VXNlcjMzOTIzMQ==",
                "avatar_url": "https://avatars1.githubusercontent.com/u/339231?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/boris317",
                "html_url": "https://github.com/boris317",
                "followers_url": "https://api.github.com/users/boris317/followers",
                "following_url": "https://api.github.com/users/boris317/following{/other_user}",
                "gists_url": "https://api.github.com/users/boris317/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/boris317/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/boris317/subscriptions",
                "organizations_url": "https://api.github.com/users/boris317/orgs",
                "repos_url": "https://api.github.com/users/boris317/repos",
                "events_url": "https://api.github.com/users/boris317/events{/privacy}",
                "received_events_url": "https://api.github.com/users/boris317/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2012-09-11T20:29:06Z",
            "updated_at": "2012-09-11T20:29:06Z",
            "author_association": "NONE",
            "body": "Building on what @mattupstate posted here is an example that looks for an `X-HTTP-Method-Override` header\n\n``` python\nclass HTTPMethodOverrideMiddleware(object):\n    def __init__(self, app):\n        self.app = app\n\n    def __call__(self, environ, start_response):\n        method = environ.get('HTTP_X_HTTP_METHOD_OVERRIDE', '').upper()\n        if method in ['GET', 'POST', 'PUT', 'DELETE']:\n            method = method.encode('ascii', 'replace')\n            environ['REQUEST_METHOD'] = method\n        return self.app(environ, start_response)\n```\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/9206986",
            "html_url": "https://github.com/pallets/flask/pull/582#issuecomment-9206986",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/582",
            "id": 9206986,
            "node_id": "MDEyOklzc3VlQ29tbWVudDkyMDY5ODY=",
            "user": {
                "login": "mitsuhiko",
                "id": 7396,
                "node_id": "MDQ6VXNlcjczOTY=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/7396?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/mitsuhiko",
                "html_url": "https://github.com/mitsuhiko",
                "followers_url": "https://api.github.com/users/mitsuhiko/followers",
                "following_url": "https://api.github.com/users/mitsuhiko/following{/other_user}",
                "gists_url": "https://api.github.com/users/mitsuhiko/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/mitsuhiko/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mitsuhiko/subscriptions",
                "organizations_url": "https://api.github.com/users/mitsuhiko/orgs",
                "repos_url": "https://api.github.com/users/mitsuhiko/repos",
                "events_url": "https://api.github.com/users/mitsuhiko/events{/privacy}",
                "received_events_url": "https://api.github.com/users/mitsuhiko/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2012-10-07T10:57:29Z",
            "updated_at": "2012-10-07T10:57:29Z",
            "author_association": "MEMBER",
            "body": "This should indeed be fixed on the WSGI layer for consistency.  It's easy enough to make a middleware, maybe we should put it into the docs.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/14767816",
            "html_url": "https://github.com/pallets/flask/pull/582#issuecomment-14767816",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/582",
            "id": 14767816,
            "node_id": "MDEyOklzc3VlQ29tbWVudDE0NzY3ODE2",
            "user": {
                "login": "tomchristie",
                "id": 647359,
                "node_id": "MDQ6VXNlcjY0NzM1OQ==",
                "avatar_url": "https://avatars2.githubusercontent.com/u/647359?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/tomchristie",
                "html_url": "https://github.com/tomchristie",
                "followers_url": "https://api.github.com/users/tomchristie/followers",
                "following_url": "https://api.github.com/users/tomchristie/following{/other_user}",
                "gists_url": "https://api.github.com/users/tomchristie/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/tomchristie/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tomchristie/subscriptions",
                "organizations_url": "https://api.github.com/users/tomchristie/orgs",
                "repos_url": "https://api.github.com/users/tomchristie/repos",
                "events_url": "https://api.github.com/users/tomchristie/events{/privacy}",
                "received_events_url": "https://api.github.com/users/tomchristie/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2013-03-12T10:24:07Z",
            "updated_at": "2013-03-12T10:24:07Z",
            "author_association": "NONE",
            "body": "The `HTTP_X_HTTP_METHOD_OVERRIDE` should probably only be respected if the method is `POST`.\nEg. As per Google API style.  https://developers.google.com/gdata/docs/2.0/basics\n\nUsing `HTTP_X_HTTP_METHOD_OVERRIDE` with GET requests could result unexpected behavior due to caching, and I'd also be wary that it might represent a CSRF attack vector in some circumstances.\n\nFor further reference, also see @jacobian's note against this similar pull request: https://github.com/toastdriven/django-tastypie/pull/351\n"
        }
    ]
}