{
    "url": "https://api.github.com/repos/pallets/flask/issues/662",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/662/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/662/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/662/events",
    "html_url": "https://github.com/pallets/flask/issues/662",
    "id": 9711315,
    "node_id": "MDU6SXNzdWU5NzExMzE1",
    "number": 662,
    "title": "AppEngine environments: Flask ExtensionImporter class (flask.ext) is getting in the way when flask extensions import external modules ",
    "user": {
        "login": "irvingpop",
        "id": 1616328,
        "node_id": "MDQ6VXNlcjE2MTYzMjg=",
        "avatar_url": "https://avatars3.githubusercontent.com/u/1616328?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/irvingpop",
        "html_url": "https://github.com/irvingpop",
        "followers_url": "https://api.github.com/users/irvingpop/followers",
        "following_url": "https://api.github.com/users/irvingpop/following{/other_user}",
        "gists_url": "https://api.github.com/users/irvingpop/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/irvingpop/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/irvingpop/subscriptions",
        "organizations_url": "https://api.github.com/users/irvingpop/orgs",
        "repos_url": "https://api.github.com/users/irvingpop/repos",
        "events_url": "https://api.github.com/users/irvingpop/events{/privacy}",
        "received_events_url": "https://api.github.com/users/irvingpop/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 6,
    "created_at": "2013-01-06T00:14:45Z",
    "updated_at": "2013-01-29T19:14:09Z",
    "closed_at": "2013-01-27T00:51:57Z",
    "author_association": "NONE",
    "body": "Several people have noted issues when installing/updating Flask extensions that use the new style flask.ext path, specifically in Google AppEngine environments.\n\nRelevant discussion and troubleshooting here:  https://github.com/thadeusb/flask-cache/issues/38\n\nWhat is happening (my understanding):\n1. flask extension (ex: Flask-Cache) imports a module (ex: \"from jinja2 import nodes\")\n2. in the extension's context, ExtensionImporter class has added its own path (flask.ext) to sys.meta_path\n3. When ExtensionImporter load_module() is run, it fails to load the external module (with an ImportError?) and thus bombs\n\nTroubleshooting notes:\n- this may be caused by AppEngine's dev_appserver_import_hook.py, line 1577, in LoadModuleRestricted\n- The application will run normally if you comment out line 86 in flask/exthook.py \"raise ImportError('No module named %s' % fullname)\" or by reverting to the the old flaskext path\n\nAny assistance is highly appreciated.\n",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/11922906",
            "html_url": "https://github.com/pallets/flask/issues/662#issuecomment-11922906",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/662",
            "id": 11922906,
            "node_id": "MDEyOklzc3VlQ29tbWVudDExOTIyOTA2",
            "user": {
                "login": "thadeusb",
                "id": 254841,
                "node_id": "MDQ6VXNlcjI1NDg0MQ==",
                "avatar_url": "https://avatars2.githubusercontent.com/u/254841?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/thadeusb",
                "html_url": "https://github.com/thadeusb",
                "followers_url": "https://api.github.com/users/thadeusb/followers",
                "following_url": "https://api.github.com/users/thadeusb/following{/other_user}",
                "gists_url": "https://api.github.com/users/thadeusb/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/thadeusb/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/thadeusb/subscriptions",
                "organizations_url": "https://api.github.com/users/thadeusb/orgs",
                "repos_url": "https://api.github.com/users/thadeusb/repos",
                "events_url": "https://api.github.com/users/thadeusb/events{/privacy}",
                "received_events_url": "https://api.github.com/users/thadeusb/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2013-01-06T01:38:25Z",
            "updated_at": "2013-01-06T01:38:25Z",
            "author_association": "NONE",
            "body": "To cause the problem, the extension must be a package, and attempt to import another file from within that package.\n\nGiven\n\n```\nflask_mything/__init__.py\nflask_mything/util.py\n```\n\nIf an import statement in the **init**.py file is defined as\n\n```\nfrom flask.ext.mything.util import some_useful_function\n```\n\nimports within util will fail.\n\nThis \"can\" be fixed from the extension by using relative imports instead of absolute. Such as: \n\n```\nfrom .util import some_useful_function \n```\n\nwill cause the extension to load properly.\n\nHowever, the proper thing for Flask to do is to not raise an exception, it should return None as is required in the python documentation -> http://docs.python.org/2/library/sys.html#sys.meta_path (The method returns None if the module cannot be found, else returns a loader.)\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/11950760",
            "html_url": "https://github.com/pallets/flask/issues/662#issuecomment-11950760",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/662",
            "id": 11950760,
            "node_id": "MDEyOklzc3VlQ29tbWVudDExOTUwNzYw",
            "user": {
                "login": "techniq",
                "id": 177476,
                "node_id": "MDQ6VXNlcjE3NzQ3Ng==",
                "avatar_url": "https://avatars2.githubusercontent.com/u/177476?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/techniq",
                "html_url": "https://github.com/techniq",
                "followers_url": "https://api.github.com/users/techniq/followers",
                "following_url": "https://api.github.com/users/techniq/following{/other_user}",
                "gists_url": "https://api.github.com/users/techniq/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/techniq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/techniq/subscriptions",
                "organizations_url": "https://api.github.com/users/techniq/orgs",
                "repos_url": "https://api.github.com/users/techniq/repos",
                "events_url": "https://api.github.com/users/techniq/events{/privacy}",
                "received_events_url": "https://api.github.com/users/techniq/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2013-01-07T13:04:05Z",
            "updated_at": "2013-01-07T13:04:05Z",
            "author_association": "NONE",
            "body": "Has anyone tried using the experimental devappserver2 (http://code.google.com/p/appengine-devappserver2-experiment/) and see if it still has the same issues?\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/12745490",
            "html_url": "https://github.com/pallets/flask/issues/662#issuecomment-12745490",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/662",
            "id": 12745490,
            "node_id": "MDEyOklzc3VlQ29tbWVudDEyNzQ1NDkw",
            "user": {
                "login": "mitsuhiko",
                "id": 7396,
                "node_id": "MDQ6VXNlcjczOTY=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/7396?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/mitsuhiko",
                "html_url": "https://github.com/mitsuhiko",
                "followers_url": "https://api.github.com/users/mitsuhiko/followers",
                "following_url": "https://api.github.com/users/mitsuhiko/following{/other_user}",
                "gists_url": "https://api.github.com/users/mitsuhiko/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/mitsuhiko/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mitsuhiko/subscriptions",
                "organizations_url": "https://api.github.com/users/mitsuhiko/orgs",
                "repos_url": "https://api.github.com/users/mitsuhiko/repos",
                "events_url": "https://api.github.com/users/mitsuhiko/events{/privacy}",
                "received_events_url": "https://api.github.com/users/mitsuhiko/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2013-01-27T00:51:57Z",
            "updated_at": "2013-01-27T00:51:57Z",
            "author_association": "MEMBER",
            "body": "I think that is a GAE issue.  If someone can reproduce that without GAE please reopen that ticket.  The fix for GAE would be to not use the rename imports for the actual module names.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/12746892",
            "html_url": "https://github.com/pallets/flask/issues/662#issuecomment-12746892",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/662",
            "id": 12746892,
            "node_id": "MDEyOklzc3VlQ29tbWVudDEyNzQ2ODky",
            "user": {
                "login": "techniq",
                "id": 177476,
                "node_id": "MDQ6VXNlcjE3NzQ3Ng==",
                "avatar_url": "https://avatars2.githubusercontent.com/u/177476?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/techniq",
                "html_url": "https://github.com/techniq",
                "followers_url": "https://api.github.com/users/techniq/followers",
                "following_url": "https://api.github.com/users/techniq/following{/other_user}",
                "gists_url": "https://api.github.com/users/techniq/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/techniq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/techniq/subscriptions",
                "organizations_url": "https://api.github.com/users/techniq/orgs",
                "repos_url": "https://api.github.com/users/techniq/repos",
                "events_url": "https://api.github.com/users/techniq/events{/privacy}",
                "received_events_url": "https://api.github.com/users/techniq/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2013-01-27T03:11:33Z",
            "updated_at": "2013-01-27T03:11:33Z",
            "author_association": "NONE",
            "body": "There is a GAE issue open for this here - http://goo.gl/rrCGh\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/12847560",
            "html_url": "https://github.com/pallets/flask/issues/662#issuecomment-12847560",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/662",
            "id": 12847560,
            "node_id": "MDEyOklzc3VlQ29tbWVudDEyODQ3NTYw",
            "user": {
                "login": "thadeusb",
                "id": 254841,
                "node_id": "MDQ6VXNlcjI1NDg0MQ==",
                "avatar_url": "https://avatars2.githubusercontent.com/u/254841?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/thadeusb",
                "html_url": "https://github.com/thadeusb",
                "followers_url": "https://api.github.com/users/thadeusb/followers",
                "following_url": "https://api.github.com/users/thadeusb/following{/other_user}",
                "gists_url": "https://api.github.com/users/thadeusb/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/thadeusb/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/thadeusb/subscriptions",
                "organizations_url": "https://api.github.com/users/thadeusb/orgs",
                "repos_url": "https://api.github.com/users/thadeusb/repos",
                "events_url": "https://api.github.com/users/thadeusb/events{/privacy}",
                "received_events_url": "https://api.github.com/users/thadeusb/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2013-01-29T17:45:57Z",
            "updated_at": "2013-01-29T17:45:57Z",
            "author_association": "NONE",
            "body": "I fail to see how this is a GAE issue when Flask's meta path importer is doing the wrong thing. Flask would fail in other systems that added their own importers to sys.meta_path.\n\nsys.meta_path\nA list of finder objects that have their find_module() methods called to see if one of the objects can find the module to be imported. The find_module() method is called at least with the absolute name of the module being imported. If the module to be imported is contained in package then the parent package\u2019s **path** attribute is passed in as a second argument. **The method returns None if the module cannot be found, else returns a loader.**\n\nsys.meta_path is searched before any implicit default finders or sys.path.\n\nSee PEP 302 for the original specification.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/12852068",
            "html_url": "https://github.com/pallets/flask/issues/662#issuecomment-12852068",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/662",
            "id": 12852068,
            "node_id": "MDEyOklzc3VlQ29tbWVudDEyODUyMDY4",
            "user": {
                "login": "apiguy",
                "id": 163848,
                "node_id": "MDQ6VXNlcjE2Mzg0OA==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/163848?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/apiguy",
                "html_url": "https://github.com/apiguy",
                "followers_url": "https://api.github.com/users/apiguy/followers",
                "following_url": "https://api.github.com/users/apiguy/following{/other_user}",
                "gists_url": "https://api.github.com/users/apiguy/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/apiguy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/apiguy/subscriptions",
                "organizations_url": "https://api.github.com/users/apiguy/orgs",
                "repos_url": "https://api.github.com/users/apiguy/repos",
                "events_url": "https://api.github.com/users/apiguy/events{/privacy}",
                "received_events_url": "https://api.github.com/users/apiguy/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2013-01-29T19:14:09Z",
            "updated_at": "2013-01-29T19:14:09Z",
            "author_association": "NONE",
            "body": "Flask's `find_module()` method from the `ExtensionImporter` behaves as it should. Here it is:\n\n``` python\ndef find_module(self, fullname, path=None):\n    if fullname.startswith(self.prefix):\n        return self\n```\n\nSeems like it's returning a loader (or None, if the prefix doesn't match) as the documentation says it should. By the way, the documentation references the PEP because there is more information in there. Here is a more complete version of what should happen:\n\nhttp://www.python.org/dev/peps/pep-0302/#specification-part-1-the-importer-protocol\n\nAs far as I can see, the only place where Flask doesn't meet PEP 302 is in `load_module()` setting the attributes like `__file__` and such explicitly which is probably OK since it uses `__import__()` to perform the actual import.\n"
        }
    ]
}