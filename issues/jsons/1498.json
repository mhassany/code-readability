{
    "url": "https://api.github.com/repos/pallets/flask/issues/1498",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/1498/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/1498/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/1498/events",
    "html_url": "https://github.com/pallets/flask/issues/1498",
    "id": 87978972,
    "node_id": "MDU6SXNzdWU4Nzk3ODk3Mg==",
    "number": 1498,
    "title": "blueprint 404 error handler not honored with url_prefix",
    "user": {
        "login": "ael-code",
        "id": 4229536,
        "node_id": "MDQ6VXNlcjQyMjk1MzY=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/4229536?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ael-code",
        "html_url": "https://github.com/ael-code",
        "followers_url": "https://api.github.com/users/ael-code/followers",
        "following_url": "https://api.github.com/users/ael-code/following{/other_user}",
        "gists_url": "https://api.github.com/users/ael-code/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ael-code/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ael-code/subscriptions",
        "organizations_url": "https://api.github.com/users/ael-code/orgs",
        "repos_url": "https://api.github.com/users/ael-code/repos",
        "events_url": "https://api.github.com/users/ael-code/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ael-code/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 357932495,
            "node_id": "MDU6TGFiZWwzNTc5MzI0OTU=",
            "url": "https://api.github.com/repos/pallets/flask/labels/blueprints",
            "name": "blueprints",
            "color": "1d76db",
            "default": false,
            "description": null
        }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 10,
    "created_at": "2015-06-13T10:24:35Z",
    "updated_at": "2017-06-01T04:41:14Z",
    "closed_at": "2017-06-01T04:41:14Z",
    "author_association": "NONE",
    "body": "Reproduce the bug:\n- make a blueprint with an errorhandler for 404\n- register the blueprint on the main app under `url_prefix=\"/blue\"`\n\nNow, if you visit some not existent page under blueprint url prefix, like `/blue/notExist` you will recive response from the main app 404 error handler.\n\nThe only way to trigger the blueprint 404 error handler is by calling `abort(404)` from within the blueprint.\n\nThe correct behaviour would be to choose which error handler to activate also on the basis of the `url_prefix` parameter.\n\n``` Python\nimport unittest\nfrom flask import Flask, Blueprint, abort, request\n\n\napp = Flask(__name__)\nmyblueprint = Blueprint('myblueprint', __name__)\n\n@myblueprint.route('/hello', methods=['GET'])\ndef hello():\n    return 'hello world!'\n\n@myblueprint.route('/forced_404', methods=['GET'])\ndef forced_404():\n    abort(404)\n\nmyblueprint.errorhandler(404)(lambda e: ('myblueprint 404', 404))\n\napp.register_blueprint(myblueprint, url_prefix=\"/blue\")\n\napp.errorhandler(404)(lambda e: ('app 404', 404))\n\n\nclass BlueprintOrAppTestCase(unittest.TestCase):\n\n    def setUp(self):\n        self.client = app.test_client()\n\n    def test_200(self):\n        resp = self.client.get('/blue/hello')\n        self.assertEqual(resp.status_code, 200)\n        self.assertEqual(resp.get_data(True), 'hello world!')\n\n    def test_404_main(self):\n        with app.test_client() as client:\n            resp = client.get('/notExist')\n            self.assertEqual(resp.status_code, 404)\n            self.assertEqual(resp.get_data(True), 'app 404')\n\n    def test_404_blueprint(self):\n        with app.test_client() as client:\n            resp = client.get('/blue/notExist')\n            self.assertEqual(resp.status_code, 404)\n            self.assertEqual(resp.get_data(True), 'myblueprint 404')\n            self.assertEqual(request.blueprint, 'myblueprint')\n\n    def test_404_forced_blueprint(self):\n        with app.test_client() as client:\n            resp = client.get('/blue/forced_404')\n            self.assertEqual(resp.status_code, 404)\n            self.assertEqual(resp.get_data(True), 'myblueprint 404')\n            self.assertEqual(request.blueprint, 'myblueprint')\n\nif __name__ == '__main__':\n    # app.run(host=\"0.0.0.0\", use_reloader=True)\n    unittest.main()\n```\n\nResponse:\n\n``` Python\n.F..\n======================================================================\nFAIL: test_404_blueprint (__main__.BlueprintOrAppTestCase)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"asd.py\", line 43, in test_404_blueprint\n    self.assertEqual(resp.get_data(True), 'myblueprint 404')\nAssertionError: u'app 404' != 'myblueprint 404'\n\n----------------------------------------------------------------------\nRan 4 tests in 0.013s\n\nFAILED (failures=1)\n```\n",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/111709325",
            "html_url": "https://github.com/pallets/flask/issues/1498#issuecomment-111709325",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1498",
            "id": 111709325,
            "node_id": "MDEyOklzc3VlQ29tbWVudDExMTcwOTMyNQ==",
            "user": {
                "login": "jmagnusson",
                "id": 190835,
                "node_id": "MDQ6VXNlcjE5MDgzNQ==",
                "avatar_url": "https://avatars3.githubusercontent.com/u/190835?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/jmagnusson",
                "html_url": "https://github.com/jmagnusson",
                "followers_url": "https://api.github.com/users/jmagnusson/followers",
                "following_url": "https://api.github.com/users/jmagnusson/following{/other_user}",
                "gists_url": "https://api.github.com/users/jmagnusson/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/jmagnusson/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jmagnusson/subscriptions",
                "organizations_url": "https://api.github.com/users/jmagnusson/orgs",
                "repos_url": "https://api.github.com/users/jmagnusson/repos",
                "events_url": "https://api.github.com/users/jmagnusson/events{/privacy}",
                "received_events_url": "https://api.github.com/users/jmagnusson/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-06-13T13:07:01Z",
            "updated_at": "2015-06-13T13:12:01Z",
            "author_association": "NONE",
            "body": "I've stumbled upon this problem as well and it made me\u00a0scratch my head for hours. Until I found [this solution](http://stackoverflow.com/a/19672128/109897) by @svieira. So the solution for your problems would be to do something like this:\n\n``` python\n@blueprint.route(\"/<path:invalid_path>\")\ndef handle_unmatchable(*args, **kwargs):\n    raise NotFound()\n```\n\nIt kind of makes sense that it doesn't match your Blueprint when the path it's looking for doesnt exist in the URL mapping. Having said that I see no reason why not to allow the Blueprint to catch the 404 when it's a sub-path of its own `url_prefix`.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/111800447",
            "html_url": "https://github.com/pallets/flask/issues/1498#issuecomment-111800447",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1498",
            "id": 111800447,
            "node_id": "MDEyOklzc3VlQ29tbWVudDExMTgwMDQ0Nw==",
            "user": {
                "login": "ThiefMaster",
                "id": 179599,
                "node_id": "MDQ6VXNlcjE3OTU5OQ==",
                "avatar_url": "https://avatars1.githubusercontent.com/u/179599?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/ThiefMaster",
                "html_url": "https://github.com/ThiefMaster",
                "followers_url": "https://api.github.com/users/ThiefMaster/followers",
                "following_url": "https://api.github.com/users/ThiefMaster/following{/other_user}",
                "gists_url": "https://api.github.com/users/ThiefMaster/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/ThiefMaster/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ThiefMaster/subscriptions",
                "organizations_url": "https://api.github.com/users/ThiefMaster/orgs",
                "repos_url": "https://api.github.com/users/ThiefMaster/repos",
                "events_url": "https://api.github.com/users/ThiefMaster/events{/privacy}",
                "received_events_url": "https://api.github.com/users/ThiefMaster/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-06-14T08:39:55Z",
            "updated_at": "2015-06-14T08:39:55Z",
            "author_association": "MEMBER",
            "body": "Besides the workaround with the wildcard-ish rule I don't think there's any easy way to have blueprint-local 404 handlers. All `url_prefix` really does is prepending the prefix to each rule added to the blueprint...\n\nFlask should probably show a warning when registering 404/405 handlers for a blueprint  though.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/111809496",
            "html_url": "https://github.com/pallets/flask/issues/1498#issuecomment-111809496",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1498",
            "id": 111809496,
            "node_id": "MDEyOklzc3VlQ29tbWVudDExMTgwOTQ5Ng==",
            "user": {
                "login": "ael-code",
                "id": 4229536,
                "node_id": "MDQ6VXNlcjQyMjk1MzY=",
                "avatar_url": "https://avatars0.githubusercontent.com/u/4229536?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/ael-code",
                "html_url": "https://github.com/ael-code",
                "followers_url": "https://api.github.com/users/ael-code/followers",
                "following_url": "https://api.github.com/users/ael-code/following{/other_user}",
                "gists_url": "https://api.github.com/users/ael-code/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/ael-code/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ael-code/subscriptions",
                "organizations_url": "https://api.github.com/users/ael-code/orgs",
                "repos_url": "https://api.github.com/users/ael-code/repos",
                "events_url": "https://api.github.com/users/ael-code/events{/privacy}",
                "received_events_url": "https://api.github.com/users/ael-code/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-06-14T10:12:55Z",
            "updated_at": "2015-06-14T10:12:55Z",
            "author_association": "NONE",
            "body": "On 06/14/2015 10:40 AM, Adrian wrote:\n\n> Besides the workaround with the wildcard-ish rule I don't think there's\n> any easy way to have blueprint-local 404 handlers. All |url_prefix|\n> really does is prepending the prefix to each rule added to the blueprint...\n> \n> Flask should probably show a warning when registering 404/405 handlers\n> for a blueprint though.\n\nIf you use that workaround you're actually telling to flask that will be\nalways a valid function to trigger for whatever URI will be received.\n\nUsing this solution breaks many things, for example:\n- Automatic `OPTIONS` response generation\n- automatic 405 response generation\n\nI think that a solution could be found.\nWe only need a way to understand at which blueprint belongs a given URI.\nIn case of exception for a given route, you'll grep the right blueprint\nand try the registered errorhandler for that blueprint.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/111809556",
            "html_url": "https://github.com/pallets/flask/issues/1498#issuecomment-111809556",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1498",
            "id": 111809556,
            "node_id": "MDEyOklzc3VlQ29tbWVudDExMTgwOTU1Ng==",
            "user": {
                "login": "ThiefMaster",
                "id": 179599,
                "node_id": "MDQ6VXNlcjE3OTU5OQ==",
                "avatar_url": "https://avatars1.githubusercontent.com/u/179599?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/ThiefMaster",
                "html_url": "https://github.com/ThiefMaster",
                "followers_url": "https://api.github.com/users/ThiefMaster/followers",
                "following_url": "https://api.github.com/users/ThiefMaster/following{/other_user}",
                "gists_url": "https://api.github.com/users/ThiefMaster/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/ThiefMaster/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ThiefMaster/subscriptions",
                "organizations_url": "https://api.github.com/users/ThiefMaster/orgs",
                "repos_url": "https://api.github.com/users/ThiefMaster/repos",
                "events_url": "https://api.github.com/users/ThiefMaster/events{/privacy}",
                "received_events_url": "https://api.github.com/users/ThiefMaster/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-06-14T10:14:41Z",
            "updated_at": "2015-06-14T10:14:41Z",
            "author_association": "MEMBER",
            "body": "But there might not always be a dedicated path/prefix for a blueprint....\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/111810261",
            "html_url": "https://github.com/pallets/flask/issues/1498#issuecomment-111810261",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1498",
            "id": 111810261,
            "node_id": "MDEyOklzc3VlQ29tbWVudDExMTgxMDI2MQ==",
            "user": {
                "login": "ael-code",
                "id": 4229536,
                "node_id": "MDQ6VXNlcjQyMjk1MzY=",
                "avatar_url": "https://avatars0.githubusercontent.com/u/4229536?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/ael-code",
                "html_url": "https://github.com/ael-code",
                "followers_url": "https://api.github.com/users/ael-code/followers",
                "following_url": "https://api.github.com/users/ael-code/following{/other_user}",
                "gists_url": "https://api.github.com/users/ael-code/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/ael-code/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ael-code/subscriptions",
                "organizations_url": "https://api.github.com/users/ael-code/orgs",
                "repos_url": "https://api.github.com/users/ael-code/repos",
                "events_url": "https://api.github.com/users/ael-code/events{/privacy}",
                "received_events_url": "https://api.github.com/users/ael-code/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-06-14T10:22:35Z",
            "updated_at": "2015-06-14T10:22:35Z",
            "author_association": "NONE",
            "body": "On 06/14/2015 12:15 PM, Adrian wrote:\n\n> But there might not always be a dedicated path/prefix for a blueprint....\n\nThe prefix do not necessary needs. When you register routes you know for\nwhich blueprint you are registering.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/111810684",
            "html_url": "https://github.com/pallets/flask/issues/1498#issuecomment-111810684",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1498",
            "id": 111810684,
            "node_id": "MDEyOklzc3VlQ29tbWVudDExMTgxMDY4NA==",
            "user": {
                "login": "ThiefMaster",
                "id": 179599,
                "node_id": "MDQ6VXNlcjE3OTU5OQ==",
                "avatar_url": "https://avatars1.githubusercontent.com/u/179599?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/ThiefMaster",
                "html_url": "https://github.com/ThiefMaster",
                "followers_url": "https://api.github.com/users/ThiefMaster/followers",
                "following_url": "https://api.github.com/users/ThiefMaster/following{/other_user}",
                "gists_url": "https://api.github.com/users/ThiefMaster/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/ThiefMaster/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ThiefMaster/subscriptions",
                "organizations_url": "https://api.github.com/users/ThiefMaster/orgs",
                "repos_url": "https://api.github.com/users/ThiefMaster/repos",
                "events_url": "https://api.github.com/users/ThiefMaster/events{/privacy}",
                "received_events_url": "https://api.github.com/users/ThiefMaster/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-06-14T10:24:12Z",
            "updated_at": "2015-06-14T10:24:12Z",
            "author_association": "MEMBER",
            "body": "Yes, when registering routes. But how do you know it for a 404 candidate? It does **not** match anything within a Blueprint.\n\nYou might very well have to blueprints with the same url prefix.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/111811626",
            "html_url": "https://github.com/pallets/flask/issues/1498#issuecomment-111811626",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1498",
            "id": 111811626,
            "node_id": "MDEyOklzc3VlQ29tbWVudDExMTgxMTYyNg==",
            "user": {
                "login": "ael-code",
                "id": 4229536,
                "node_id": "MDQ6VXNlcjQyMjk1MzY=",
                "avatar_url": "https://avatars0.githubusercontent.com/u/4229536?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/ael-code",
                "html_url": "https://github.com/ael-code",
                "followers_url": "https://api.github.com/users/ael-code/followers",
                "following_url": "https://api.github.com/users/ael-code/following{/other_user}",
                "gists_url": "https://api.github.com/users/ael-code/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/ael-code/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ael-code/subscriptions",
                "organizations_url": "https://api.github.com/users/ael-code/orgs",
                "repos_url": "https://api.github.com/users/ael-code/repos",
                "events_url": "https://api.github.com/users/ael-code/events{/privacy}",
                "received_events_url": "https://api.github.com/users/ael-code/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-06-14T10:41:21Z",
            "updated_at": "2015-06-14T10:41:46Z",
            "author_association": "NONE",
            "body": "> Yes, when registering routes. But how do you know it for a 404 candidate? It does not match anything within a Blueprint.\n> \n> You might very well have to blueprints with the same url prefix.\n\nIf does not match anything and you don't have a prefix you will use the top level handler for 404.\n\nTwo blueprints with the same url_prefix it is a very insane configuration. In this case you can:\n- use the top level folder (bug again but only in rare case, warning should be fine in this case)\n- use the first/last registered 404 errorhandler associated with blueprint with the matching prefix.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/111852893",
            "html_url": "https://github.com/pallets/flask/issues/1498#issuecomment-111852893",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1498",
            "id": 111852893,
            "node_id": "MDEyOklzc3VlQ29tbWVudDExMTg1Mjg5Mw==",
            "user": {
                "login": "svieira",
                "id": 143435,
                "node_id": "MDQ6VXNlcjE0MzQzNQ==",
                "avatar_url": "https://avatars3.githubusercontent.com/u/143435?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/svieira",
                "html_url": "https://github.com/svieira",
                "followers_url": "https://api.github.com/users/svieira/followers",
                "following_url": "https://api.github.com/users/svieira/following{/other_user}",
                "gists_url": "https://api.github.com/users/svieira/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/svieira/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/svieira/subscriptions",
                "organizations_url": "https://api.github.com/users/svieira/orgs",
                "repos_url": "https://api.github.com/users/svieira/repos",
                "events_url": "https://api.github.com/users/svieira/events{/privacy}",
                "received_events_url": "https://api.github.com/users/svieira/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-06-14T17:27:29Z",
            "updated_at": "2015-06-14T17:27:29Z",
            "author_association": "CONTRIBUTOR",
            "body": "@ael-code - using two blueprints with the same URL-prefix can have a sane rational. For example, switching over to a different Flask-Rest\\* extension and for an API - _new_ endpoints use the new extension and old endpoints get migrated over one at a time - but they are all under the same `/api/` endpoint (imagine you are moving for more flexibility, not breaking any existing client-facing functionality).\n\nThe wildcard `404` handler is making _explicit_ that this blueprint owns every URL below it.  Otherwise, there is no way for Flask / Werkzeug to know that this is what is going on as @ThiefMaster points out.\n\nHere are a couple of solutions that come to mind:\n- Use [sub-apps instead of blueprints](http://flask.pocoo.org/docs/0.10/patterns/appdispatch/#app-dispatch) (add documentation to Flask's docs to make this use-case clearer).\n- Add a new API to support registering a blueprint that is supposed to own the entire sub-namespace (so 404 / 405 errors will always use the Blueprint handler).  This may mean new APIs in Werkzeug as well as Flask.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/111860234",
            "html_url": "https://github.com/pallets/flask/issues/1498#issuecomment-111860234",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1498",
            "id": 111860234,
            "node_id": "MDEyOklzc3VlQ29tbWVudDExMTg2MDIzNA==",
            "user": {
                "login": "jmagnusson",
                "id": 190835,
                "node_id": "MDQ6VXNlcjE5MDgzNQ==",
                "avatar_url": "https://avatars3.githubusercontent.com/u/190835?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/jmagnusson",
                "html_url": "https://github.com/jmagnusson",
                "followers_url": "https://api.github.com/users/jmagnusson/followers",
                "following_url": "https://api.github.com/users/jmagnusson/following{/other_user}",
                "gists_url": "https://api.github.com/users/jmagnusson/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/jmagnusson/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jmagnusson/subscriptions",
                "organizations_url": "https://api.github.com/users/jmagnusson/orgs",
                "repos_url": "https://api.github.com/users/jmagnusson/repos",
                "events_url": "https://api.github.com/users/jmagnusson/events{/privacy}",
                "received_events_url": "https://api.github.com/users/jmagnusson/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-06-14T18:18:46Z",
            "updated_at": "2015-06-14T18:18:46Z",
            "author_association": "NONE",
            "body": "@ael-code What do you mean it breaks 405 response generation?\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/111860281",
            "html_url": "https://github.com/pallets/flask/issues/1498#issuecomment-111860281",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1498",
            "id": 111860281,
            "node_id": "MDEyOklzc3VlQ29tbWVudDExMTg2MDI4MQ==",
            "user": {
                "login": "jmagnusson",
                "id": 190835,
                "node_id": "MDQ6VXNlcjE5MDgzNQ==",
                "avatar_url": "https://avatars3.githubusercontent.com/u/190835?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/jmagnusson",
                "html_url": "https://github.com/jmagnusson",
                "followers_url": "https://api.github.com/users/jmagnusson/followers",
                "following_url": "https://api.github.com/users/jmagnusson/following{/other_user}",
                "gists_url": "https://api.github.com/users/jmagnusson/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/jmagnusson/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jmagnusson/subscriptions",
                "organizations_url": "https://api.github.com/users/jmagnusson/orgs",
                "repos_url": "https://api.github.com/users/jmagnusson/repos",
                "events_url": "https://api.github.com/users/jmagnusson/events{/privacy}",
                "received_events_url": "https://api.github.com/users/jmagnusson/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-06-14T18:19:53Z",
            "updated_at": "2015-06-14T18:20:10Z",
            "author_association": "NONE",
            "body": "@ael-code @svieira you seem to have some experience with 405s in Flask. Would you mind having a look at issue #1494? \n"
        }
    ]
}