{
    "url": "https://api.github.com/repos/pallets/flask/issues/1043",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/1043/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/1043/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/1043/events",
    "html_url": "https://github.com/pallets/flask/issues/1043",
    "id": 32734479,
    "node_id": "MDU6SXNzdWUzMjczNDQ3OQ==",
    "number": 1043,
    "title": "Why isn't there `Blueprint.after_last_app_request`?",
    "user": {
        "login": "shoooe",
        "id": 733227,
        "node_id": "MDQ6VXNlcjczMzIyNw==",
        "avatar_url": "https://avatars2.githubusercontent.com/u/733227?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/shoooe",
        "html_url": "https://github.com/shoooe",
        "followers_url": "https://api.github.com/users/shoooe/followers",
        "following_url": "https://api.github.com/users/shoooe/following{/other_user}",
        "gists_url": "https://api.github.com/users/shoooe/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/shoooe/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/shoooe/subscriptions",
        "organizations_url": "https://api.github.com/users/shoooe/orgs",
        "repos_url": "https://api.github.com/users/shoooe/repos",
        "events_url": "https://api.github.com/users/shoooe/events{/privacy}",
        "received_events_url": "https://api.github.com/users/shoooe/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 21,
    "created_at": "2014-05-02T23:46:19Z",
    "updated_at": "2014-05-03T00:52:32Z",
    "closed_at": "2014-05-03T00:51:59Z",
    "author_association": "NONE",
    "body": "I was expecting to be able to run a function right before the application object is destroyed (right after the last request). Just like there's a [`Blueprint.before_app_first_request`](http://flask.pocoo.org/docs/api/#flask.Blueprint.before_app_first_request), why isn't there the equivalent for the last request, along the lines of `after_app_last_request`?\n",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/42089754",
            "html_url": "https://github.com/pallets/flask/issues/1043#issuecomment-42089754",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1043",
            "id": 42089754,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDg5NzU0",
            "user": {
                "login": "anas-aldrees",
                "id": 1971213,
                "node_id": "MDQ6VXNlcjE5NzEyMTM=",
                "avatar_url": "https://avatars2.githubusercontent.com/u/1971213?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/anas-aldrees",
                "html_url": "https://github.com/anas-aldrees",
                "followers_url": "https://api.github.com/users/anas-aldrees/followers",
                "following_url": "https://api.github.com/users/anas-aldrees/following{/other_user}",
                "gists_url": "https://api.github.com/users/anas-aldrees/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/anas-aldrees/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/anas-aldrees/subscriptions",
                "organizations_url": "https://api.github.com/users/anas-aldrees/orgs",
                "repos_url": "https://api.github.com/users/anas-aldrees/repos",
                "events_url": "https://api.github.com/users/anas-aldrees/events{/privacy}",
                "received_events_url": "https://api.github.com/users/anas-aldrees/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-05-02T23:49:53Z",
            "updated_at": "2014-05-02T23:49:53Z",
            "author_association": "NONE",
            "body": "There is @app.after_request\nIs that what you mean?\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/42089797",
            "html_url": "https://github.com/pallets/flask/issues/1043#issuecomment-42089797",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1043",
            "id": 42089797,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDg5Nzk3",
            "user": {
                "login": "shoooe",
                "id": 733227,
                "node_id": "MDQ6VXNlcjczMzIyNw==",
                "avatar_url": "https://avatars2.githubusercontent.com/u/733227?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/shoooe",
                "html_url": "https://github.com/shoooe",
                "followers_url": "https://api.github.com/users/shoooe/followers",
                "following_url": "https://api.github.com/users/shoooe/following{/other_user}",
                "gists_url": "https://api.github.com/users/shoooe/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/shoooe/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/shoooe/subscriptions",
                "organizations_url": "https://api.github.com/users/shoooe/orgs",
                "repos_url": "https://api.github.com/users/shoooe/repos",
                "events_url": "https://api.github.com/users/shoooe/events{/privacy}",
                "received_events_url": "https://api.github.com/users/shoooe/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-05-02T23:50:50Z",
            "updated_at": "2014-05-02T23:51:20Z",
            "author_association": "NONE",
            "body": "Nope. That one is run after each request. What I would need is a function that runs after the last request (for example a database disconnect or schema teardown in testing mode).\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/42090193",
            "html_url": "https://github.com/pallets/flask/issues/1043#issuecomment-42090193",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1043",
            "id": 42090193,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDkwMTkz",
            "user": {
                "login": "anas-aldrees",
                "id": 1971213,
                "node_id": "MDQ6VXNlcjE5NzEyMTM=",
                "avatar_url": "https://avatars2.githubusercontent.com/u/1971213?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/anas-aldrees",
                "html_url": "https://github.com/anas-aldrees",
                "followers_url": "https://api.github.com/users/anas-aldrees/followers",
                "following_url": "https://api.github.com/users/anas-aldrees/following{/other_user}",
                "gists_url": "https://api.github.com/users/anas-aldrees/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/anas-aldrees/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/anas-aldrees/subscriptions",
                "organizations_url": "https://api.github.com/users/anas-aldrees/orgs",
                "repos_url": "https://api.github.com/users/anas-aldrees/repos",
                "events_url": "https://api.github.com/users/anas-aldrees/events{/privacy}",
                "received_events_url": "https://api.github.com/users/anas-aldrees/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-05-03T00:01:24Z",
            "updated_at": "2014-05-03T00:01:24Z",
            "author_association": "NONE",
            "body": "How can the \"app\" knows if it's the last request or not?\nDid you mean by shutting down the server?\nI don't know, but I think it's impossible.\nMaybe i didn't understand you, but I'm sure someone else can explain that to you.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/42090218",
            "html_url": "https://github.com/pallets/flask/issues/1043#issuecomment-42090218",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1043",
            "id": 42090218,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDkwMjE4",
            "user": {
                "login": "shoooe",
                "id": 733227,
                "node_id": "MDQ6VXNlcjczMzIyNw==",
                "avatar_url": "https://avatars2.githubusercontent.com/u/733227?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/shoooe",
                "html_url": "https://github.com/shoooe",
                "followers_url": "https://api.github.com/users/shoooe/followers",
                "following_url": "https://api.github.com/users/shoooe/following{/other_user}",
                "gists_url": "https://api.github.com/users/shoooe/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/shoooe/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/shoooe/subscriptions",
                "organizations_url": "https://api.github.com/users/shoooe/orgs",
                "repos_url": "https://api.github.com/users/shoooe/repos",
                "events_url": "https://api.github.com/users/shoooe/events{/privacy}",
                "received_events_url": "https://api.github.com/users/shoooe/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-05-03T00:02:17Z",
            "updated_at": "2014-05-03T00:02:17Z",
            "author_association": "NONE",
            "body": "> How can the \"app\" knows if it's the last request or not?\n\nWhen the `Flask` application destructor gets called.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/42090532",
            "html_url": "https://github.com/pallets/flask/issues/1043#issuecomment-42090532",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1043",
            "id": 42090532,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDkwNTMy",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-05-03T00:10:04Z",
            "updated_at": "2014-05-03T00:10:25Z",
            "author_association": "MEMBER",
            "body": "Which might not actually happen, and has limited functionality.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/42090541",
            "html_url": "https://github.com/pallets/flask/issues/1043#issuecomment-42090541",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1043",
            "id": 42090541,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDkwNTQx",
            "user": {
                "login": "shoooe",
                "id": 733227,
                "node_id": "MDQ6VXNlcjczMzIyNw==",
                "avatar_url": "https://avatars2.githubusercontent.com/u/733227?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/shoooe",
                "html_url": "https://github.com/shoooe",
                "followers_url": "https://api.github.com/users/shoooe/followers",
                "following_url": "https://api.github.com/users/shoooe/following{/other_user}",
                "gists_url": "https://api.github.com/users/shoooe/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/shoooe/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/shoooe/subscriptions",
                "organizations_url": "https://api.github.com/users/shoooe/orgs",
                "repos_url": "https://api.github.com/users/shoooe/repos",
                "events_url": "https://api.github.com/users/shoooe/events{/privacy}",
                "received_events_url": "https://api.github.com/users/shoooe/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-05-03T00:10:13Z",
            "updated_at": "2014-05-03T00:10:13Z",
            "author_association": "NONE",
            "body": "As an overall picture I need to register two functions: 1) Creates a dummy database if in testing mode (from configurations) and connects to the database (either prebuilt or testing database). 2) Disconnects from the database and, if in testing mode, tears down the dummy database.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/42090572",
            "html_url": "https://github.com/pallets/flask/issues/1043#issuecomment-42090572",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1043",
            "id": 42090572,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDkwNTcy",
            "user": {
                "login": "shoooe",
                "id": 733227,
                "node_id": "MDQ6VXNlcjczMzIyNw==",
                "avatar_url": "https://avatars2.githubusercontent.com/u/733227?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/shoooe",
                "html_url": "https://github.com/shoooe",
                "followers_url": "https://api.github.com/users/shoooe/followers",
                "following_url": "https://api.github.com/users/shoooe/following{/other_user}",
                "gists_url": "https://api.github.com/users/shoooe/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/shoooe/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/shoooe/subscriptions",
                "organizations_url": "https://api.github.com/users/shoooe/orgs",
                "repos_url": "https://api.github.com/users/shoooe/repos",
                "events_url": "https://api.github.com/users/shoooe/events{/privacy}",
                "received_events_url": "https://api.github.com/users/shoooe/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-05-03T00:11:01Z",
            "updated_at": "2014-05-03T00:11:13Z",
            "author_association": "NONE",
            "body": "> Which might not actually happen.\n\nDoesn't matter. I'll cover the case in which an exception or error is thrown/triggered by my own.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/42090939",
            "html_url": "https://github.com/pallets/flask/issues/1043#issuecomment-42090939",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1043",
            "id": 42090939,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDkwOTM5",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-05-03T00:19:53Z",
            "updated_at": "2014-05-03T00:19:53Z",
            "author_association": "MEMBER",
            "body": "How about using Python's [atexit](https://docs.python.org/2/library/atexit.html) module?\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/42090987",
            "html_url": "https://github.com/pallets/flask/issues/1043#issuecomment-42090987",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1043",
            "id": 42090987,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDkwOTg3",
            "user": {
                "login": "shoooe",
                "id": 733227,
                "node_id": "MDQ6VXNlcjczMzIyNw==",
                "avatar_url": "https://avatars2.githubusercontent.com/u/733227?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/shoooe",
                "html_url": "https://github.com/shoooe",
                "followers_url": "https://api.github.com/users/shoooe/followers",
                "following_url": "https://api.github.com/users/shoooe/following{/other_user}",
                "gists_url": "https://api.github.com/users/shoooe/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/shoooe/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/shoooe/subscriptions",
                "organizations_url": "https://api.github.com/users/shoooe/orgs",
                "repos_url": "https://api.github.com/users/shoooe/repos",
                "events_url": "https://api.github.com/users/shoooe/events{/privacy}",
                "received_events_url": "https://api.github.com/users/shoooe/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-05-03T00:21:20Z",
            "updated_at": "2014-05-03T00:22:29Z",
            "author_association": "NONE",
            "body": "> How about using Python's atexit module?\n\nThe main problem is that \"end of the script\" != \"end of the application's lifetime\".\n\nBy the way, if you have cleaner alternatives I'm all ear. :)\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/42091058",
            "html_url": "https://github.com/pallets/flask/issues/1043#issuecomment-42091058",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1043",
            "id": 42091058,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDkxMDU4",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-05-03T00:23:44Z",
            "updated_at": "2014-05-03T00:23:44Z",
            "author_association": "MEMBER",
            "body": "I don't think anybody actually needs that functionality. Disconnection from the database should \"just happen\" without data corruption if you are using good bindings.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/42091084",
            "html_url": "https://github.com/pallets/flask/issues/1043#issuecomment-42091084",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1043",
            "id": 42091084,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDkxMDg0",
            "user": {
                "login": "shoooe",
                "id": 733227,
                "node_id": "MDQ6VXNlcjczMzIyNw==",
                "avatar_url": "https://avatars2.githubusercontent.com/u/733227?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/shoooe",
                "html_url": "https://github.com/shoooe",
                "followers_url": "https://api.github.com/users/shoooe/followers",
                "following_url": "https://api.github.com/users/shoooe/following{/other_user}",
                "gists_url": "https://api.github.com/users/shoooe/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/shoooe/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/shoooe/subscriptions",
                "organizations_url": "https://api.github.com/users/shoooe/orgs",
                "repos_url": "https://api.github.com/users/shoooe/repos",
                "events_url": "https://api.github.com/users/shoooe/events{/privacy}",
                "received_events_url": "https://api.github.com/users/shoooe/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-05-03T00:24:37Z",
            "updated_at": "2014-05-03T00:24:37Z",
            "author_association": "NONE",
            "body": "What about the testing database? How do you handle it?\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/42091129",
            "html_url": "https://github.com/pallets/flask/issues/1043#issuecomment-42091129",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1043",
            "id": 42091129,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDkxMTI5",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-05-03T00:26:00Z",
            "updated_at": "2014-05-03T00:26:00Z",
            "author_association": "MEMBER",
            "body": "If you're using SQLAlchemy for example, you shouldn't have to worry about this at all... could you describe your situation in detail?\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/42091448",
            "html_url": "https://github.com/pallets/flask/issues/1043#issuecomment-42091448",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1043",
            "id": 42091448,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDkxNDQ4",
            "user": {
                "login": "shoooe",
                "id": 733227,
                "node_id": "MDQ6VXNlcjczMzIyNw==",
                "avatar_url": "https://avatars2.githubusercontent.com/u/733227?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/shoooe",
                "html_url": "https://github.com/shoooe",
                "followers_url": "https://api.github.com/users/shoooe/followers",
                "following_url": "https://api.github.com/users/shoooe/following{/other_user}",
                "gists_url": "https://api.github.com/users/shoooe/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/shoooe/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/shoooe/subscriptions",
                "organizations_url": "https://api.github.com/users/shoooe/orgs",
                "repos_url": "https://api.github.com/users/shoooe/repos",
                "events_url": "https://api.github.com/users/shoooe/events{/privacy}",
                "received_events_url": "https://api.github.com/users/shoooe/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-05-03T00:34:32Z",
            "updated_at": "2014-05-03T00:35:56Z",
            "author_association": "NONE",
            "body": "Assuming that we have an application that needs a database. To test the application we need a dummy/testing database. \n\nI thought to solve this problem by checking `flask.config['TESTING']` before any request. If it's `True` I create a dummy database using the `flask.config['DB_URI']` configuration argument and then connect (in any case) to the database at `flask.config['DB_URI']`. On the other hand, we need to dismantle the testing database at the end of the last request (a testing session, of course, performs multiple requests). Therefore you need an equivalent function that is run at the end of any request.\n\nUsing this idea you can do:\n\n```\napp = Flask(__name__)\napp.config = ...\n```\n\nand just by setting  `TESTING` to `True` you have a perfectly working application with a testing database that will be removed after the testing session (for example using pytest).\n\nHow would you approach the problem?\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/42091481",
            "html_url": "https://github.com/pallets/flask/issues/1043#issuecomment-42091481",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1043",
            "id": 42091481,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDkxNDgx",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-05-03T00:35:38Z",
            "updated_at": "2014-05-03T00:35:38Z",
            "author_association": "MEMBER",
            "body": "> You have an application. The application needs a database. In normal conditions it doesn't matter who or what builds the database schema, because we just assume the tables are there. In testing conditions we want to be able use the same application object, set the `flask.config['TESTING']` flag and be able to say: \"If we are in testing mode, create a new test database using the `flask.config['DB_URI']`, run few tests (with py.test on it) and then dismantle the testing database.\n> \n> To solve this, I thought of adding two functions (one for the database building and one for the dismantle) and register them as \"run the first before any request\" and \"run the second after any request\" (multiple requests are performed during testing).\n\nCreate database if it doesn't exist at start of app, don't ever destroy it.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/42091526",
            "html_url": "https://github.com/pallets/flask/issues/1043#issuecomment-42091526",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1043",
            "id": 42091526,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDkxNTI2",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-05-03T00:36:57Z",
            "updated_at": "2014-05-03T00:36:57Z",
            "author_association": "MEMBER",
            "body": "Or if you must, create your db in `/tmp/`.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/42091581",
            "html_url": "https://github.com/pallets/flask/issues/1043#issuecomment-42091581",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1043",
            "id": 42091581,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDkxNTgx",
            "user": {
                "login": "shoooe",
                "id": 733227,
                "node_id": "MDQ6VXNlcjczMzIyNw==",
                "avatar_url": "https://avatars2.githubusercontent.com/u/733227?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/shoooe",
                "html_url": "https://github.com/shoooe",
                "followers_url": "https://api.github.com/users/shoooe/followers",
                "following_url": "https://api.github.com/users/shoooe/following{/other_user}",
                "gists_url": "https://api.github.com/users/shoooe/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/shoooe/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/shoooe/subscriptions",
                "organizations_url": "https://api.github.com/users/shoooe/orgs",
                "repos_url": "https://api.github.com/users/shoooe/repos",
                "events_url": "https://api.github.com/users/shoooe/events{/privacy}",
                "received_events_url": "https://api.github.com/users/shoooe/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-05-03T00:38:54Z",
            "updated_at": "2014-05-03T00:38:54Z",
            "author_association": "NONE",
            "body": "Erm. Not cleaning up after each testing session is a big no no. No matter what.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/42091598",
            "html_url": "https://github.com/pallets/flask/issues/1043#issuecomment-42091598",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1043",
            "id": 42091598,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDkxNTk4",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-05-03T00:39:42Z",
            "updated_at": "2014-05-03T00:39:42Z",
            "author_association": "MEMBER",
            "body": "Outside of unit tests it is what everybody does.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/42091670",
            "html_url": "https://github.com/pallets/flask/issues/1043#issuecomment-42091670",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1043",
            "id": 42091670,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDkxNjcw",
            "user": {
                "login": "shoooe",
                "id": 733227,
                "node_id": "MDQ6VXNlcjczMzIyNw==",
                "avatar_url": "https://avatars2.githubusercontent.com/u/733227?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/shoooe",
                "html_url": "https://github.com/shoooe",
                "followers_url": "https://api.github.com/users/shoooe/followers",
                "following_url": "https://api.github.com/users/shoooe/following{/other_user}",
                "gists_url": "https://api.github.com/users/shoooe/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/shoooe/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/shoooe/subscriptions",
                "organizations_url": "https://api.github.com/users/shoooe/orgs",
                "repos_url": "https://api.github.com/users/shoooe/repos",
                "events_url": "https://api.github.com/users/shoooe/events{/privacy}",
                "received_events_url": "https://api.github.com/users/shoooe/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-05-03T00:42:13Z",
            "updated_at": "2014-05-03T00:42:22Z",
            "author_association": "NONE",
            "body": "Yeah, but, I need to unit test the application?\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/42091697",
            "html_url": "https://github.com/pallets/flask/issues/1043#issuecomment-42091697",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1043",
            "id": 42091697,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDkxNjk3",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-05-03T00:43:13Z",
            "updated_at": "2014-05-03T00:43:13Z",
            "author_association": "MEMBER",
            "body": "In that case you shouldn't have to rely on the application to clean up after itself. Do that in your unittests, where you have the ability to do that without using `__del__`.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/42091907",
            "html_url": "https://github.com/pallets/flask/issues/1043#issuecomment-42091907",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1043",
            "id": 42091907,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDkxOTA3",
            "user": {
                "login": "shoooe",
                "id": 733227,
                "node_id": "MDQ6VXNlcjczMzIyNw==",
                "avatar_url": "https://avatars2.githubusercontent.com/u/733227?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/shoooe",
                "html_url": "https://github.com/shoooe",
                "followers_url": "https://api.github.com/users/shoooe/followers",
                "following_url": "https://api.github.com/users/shoooe/following{/other_user}",
                "gists_url": "https://api.github.com/users/shoooe/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/shoooe/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/shoooe/subscriptions",
                "organizations_url": "https://api.github.com/users/shoooe/orgs",
                "repos_url": "https://api.github.com/users/shoooe/repos",
                "events_url": "https://api.github.com/users/shoooe/events{/privacy}",
                "received_events_url": "https://api.github.com/users/shoooe/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-05-03T00:51:59Z",
            "updated_at": "2014-05-03T00:51:59Z",
            "author_association": "NONE",
            "body": "Yeah, I used to do that but there were other problems with that approach. Anyway, I'll try again, thanks.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/42091923",
            "html_url": "https://github.com/pallets/flask/issues/1043#issuecomment-42091923",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1043",
            "id": 42091923,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDkxOTIz",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-05-03T00:52:32Z",
            "updated_at": "2014-05-03T00:52:32Z",
            "author_association": "MEMBER",
            "body": "Also, you can create in-memory dbs with sqlite...\n"
        }
    ]
}