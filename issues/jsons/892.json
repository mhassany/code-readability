{
    "url": "https://api.github.com/repos/pallets/flask/issues/892",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/892/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/892/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/892/events",
    "html_url": "https://github.com/pallets/flask/issues/892",
    "id": 21080934,
    "node_id": "MDU6SXNzdWUyMTA4MDkzNA==",
    "number": 892,
    "title": "Too many files open when instantiating the app thousands times",
    "user": {
        "login": "olegpidsadnyi",
        "id": 2608181,
        "node_id": "MDQ6VXNlcjI2MDgxODE=",
        "avatar_url": "https://avatars1.githubusercontent.com/u/2608181?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/olegpidsadnyi",
        "html_url": "https://github.com/olegpidsadnyi",
        "followers_url": "https://api.github.com/users/olegpidsadnyi/followers",
        "following_url": "https://api.github.com/users/olegpidsadnyi/following{/other_user}",
        "gists_url": "https://api.github.com/users/olegpidsadnyi/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/olegpidsadnyi/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/olegpidsadnyi/subscriptions",
        "organizations_url": "https://api.github.com/users/olegpidsadnyi/orgs",
        "repos_url": "https://api.github.com/users/olegpidsadnyi/repos",
        "events_url": "https://api.github.com/users/olegpidsadnyi/events{/privacy}",
        "received_events_url": "https://api.github.com/users/olegpidsadnyi/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2013-10-16T13:46:44Z",
    "updated_at": "2013-10-16T17:21:33Z",
    "closed_at": "2013-10-16T17:21:33Z",
    "author_association": "NONE",
    "body": "Could it be the case that instantiating the flask application opens some file and doesn't close it?\nI have tests with py.test and I didn't specify the scope of the flask application fixture to be 'sesson' so the flask application was instantiated basically for every test that needs it (we are using url map actively).\n\nAt some point I get the traceback related to the limit of the files open etc.\nI understand that probably you don't have to instantiate more than one app per process,  but it might be also interesting to clean up the resources. At least if you test the app creation with different configurations. Maybe I could call something in the fixture finalizer to release the resources?\n\nself = <Application 'httpapi.server'>\n\n```\ndef auto_find_instance_path(self):\n    \"\"\"Tries to locate the instance path if it was not provided to the\n        constructor of the application class.  It will basically calculate\n        the path to a folder named ``instance`` next to your main file or\n        the package.\n\n        .. versionadded:: 0.8\n        \"\"\"\n```\n\n> ```\n>   prefix, package_path = find_package(self.import_name)\n> ```\n\n../.virtualenvs/my/lib/python2.6/site-packages/Flask-0.10.1-py2.6.egg/flask/app.py:622: \n\n---\n\nimport_name = 'httpapi.server'\n\n```\ndef find_package(import_name):\n    \"\"\"Finds a package and returns the prefix (or None if the package is\n    not installed) as well as the folder that contains the package or\n    module as a tuple.  The package path returned is the module that would\n    have to be added to the pythonpath in order to make it possible to\n    import the module.  The prefix is the path below which a UNIX like\n    folder structure exists (lib, share etc.).\n    \"\"\"\n    root_mod_name = import_name.split('.')[0]\n    loader = pkgutil.get_loader(root_mod_name)\n    if loader is None or import_name == '__main__':\n        # import name is not found, or interactive/main module\n        package_path = os.getcwd()\n    else:\n        # For .egg, zipimporter does not have get_filename until Python 2.7.\n        if hasattr(loader, 'get_filename'):\n```\n\n> ```\n>           filename = loader.get_filename(root_mod_name)\n> ```\n\n../.virtualenvs/my/lib/python2.6/site-packages/Flask-0.10.1-py2.6.egg/flask/helpers.py:668: \n\n---\n\nself = <pkgutil.ImpLoader instance at 0x10db70290>, fullname = 'httpapi'\n\n```\ndef get_filename(self, fullname=None):\n    fullname = self._fix_name(fullname)\n    mod_type = self.etc[2]\n    if self.etc[2]==imp.PKG_DIRECTORY:\n```\n\n> ```\n>       return self._get_delegate().get_filename()\n> ```\n> \n> E           AttributeError: 'NoneType' object has no attribute 'get_filename'\n\n/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/pkgutil.py:313: AttributeError\n",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/26439021",
            "html_url": "https://github.com/pallets/flask/issues/892#issuecomment-26439021",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/892",
            "id": 26439021,
            "node_id": "MDEyOklzc3VlQ29tbWVudDI2NDM5MDIx",
            "user": {
                "login": "DasIch",
                "id": 182316,
                "node_id": "MDQ6VXNlcjE4MjMxNg==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/182316?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/DasIch",
                "html_url": "https://github.com/DasIch",
                "followers_url": "https://api.github.com/users/DasIch/followers",
                "following_url": "https://api.github.com/users/DasIch/following{/other_user}",
                "gists_url": "https://api.github.com/users/DasIch/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/DasIch/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/DasIch/subscriptions",
                "organizations_url": "https://api.github.com/users/DasIch/orgs",
                "repos_url": "https://api.github.com/users/DasIch/repos",
                "events_url": "https://api.github.com/users/DasIch/events{/privacy}",
                "received_events_url": "https://api.github.com/users/DasIch/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2013-10-16T17:21:33Z",
            "updated_at": "2013-10-16T17:21:33Z",
            "author_association": "CONTRIBUTOR",
            "body": "This is not an issue with flask but with the loader used to import the module.\n"
        }
    ]
}