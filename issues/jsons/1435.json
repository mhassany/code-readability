{
    "url": "https://api.github.com/repos/pallets/flask/issues/1435",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/1435/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/1435/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/1435/events",
    "html_url": "https://github.com/pallets/flask/issues/1435",
    "id": 68044699,
    "node_id": "MDU6SXNzdWU2ODA0NDY5OQ==",
    "number": 1435,
    "title": "htmlsafe_dumps doesn't handle lazy strings",
    "user": {
        "login": "manuelbua",
        "id": 819314,
        "node_id": "MDQ6VXNlcjgxOTMxNA==",
        "avatar_url": "https://avatars3.githubusercontent.com/u/819314?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/manuelbua",
        "html_url": "https://github.com/manuelbua",
        "followers_url": "https://api.github.com/users/manuelbua/followers",
        "following_url": "https://api.github.com/users/manuelbua/following{/other_user}",
        "gists_url": "https://api.github.com/users/manuelbua/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/manuelbua/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/manuelbua/subscriptions",
        "organizations_url": "https://api.github.com/users/manuelbua/orgs",
        "repos_url": "https://api.github.com/users/manuelbua/repos",
        "events_url": "https://api.github.com/users/manuelbua/events{/privacy}",
        "received_events_url": "https://api.github.com/users/manuelbua/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 3,
    "created_at": "2015-04-13T08:51:04Z",
    "updated_at": "2017-05-23T19:02:37Z",
    "closed_at": "2017-05-23T19:02:37Z",
    "author_association": "NONE",
    "body": "I need to be able to handle lazy strings in the Jinja2 `|tojson` filter and was thinking about some way to do it: as of now, the `_iterencode_dict` raises a TypeError exception, as expected:\n\n```\nTraceback (most recent call last):\n  File \"/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/flask/app.py\", line 1836, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/flask/app.py\", line 1820, in wsgi_app\n    response = self.make_response(self.handle_exception(e))\n  File \"/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/flask/app.py\", line 1403, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/flask/app.py\", line 1817, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/flask/app.py\", line 1477, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/flask/app.py\", line 1381, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/flask/app.py\", line 1475, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/flask/app.py\", line 1461, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/flask_admin/base.py\", line 68, in inner\n    return self._run_view(f, *args, **kwargs)\n  File \"/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/flask_admin/base.py\", line 354, in _run_view\n    return fn(self, *args, **kwargs)\n  File \"/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/flask_admin/model/base.py\", line 1466, in index_view\n    return_url=self._get_list_url(view_args),\n  File \"/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/flask_admin/base.py\", line 294, in render\n    return render_template(template, **kwargs)\n  File \"/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/flask/templating.py\", line 128, in render_template\n    context, ctx.app)\n  File \"/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/flask/templating.py\", line 110, in _render\n    rv = template.render(context)\n  File \"/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/jinja2/environment.py\", line 969, in render\n    return self.environment.handle_exception(exc_info, True)\n  File \"/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/jinja2/environment.py\", line 742, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/flask_admin/templates/bootstrap3/admin/model/list.html\", line 5, in top-level template code\n    {% import 'admin/actions.html' as actionlib with context %}\n  File \"/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/flask_admin/templates/bootstrap3/admin/master.html\", line 1, in top-level template code\n    {% extends admin_base_template %}\n  File \"/home/manuel/dev/www/python/watest/webfu-app/webfu/modules/backend/templates/admin/custom-layout.html\", line 3, in top-level template code\n    {% import 'admin/static.html' as admin_static with context %}\n  File \"/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/flask_admin/templates/bootstrap3/admin/base.html\", line 80, in top-level template code\n    {% block tail %}\n  File \"/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/flask_admin/templates/bootstrap3/admin/model/list.html\", line 171, in block \"tail\"\n    {{ filter_groups|tojson|safe }},\n  File \"/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/flask/json.py\", line 243, in tojson_filter\n    return Markup(htmlsafe_dumps(obj, **kwargs))\n  File \"/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/flask/json.py\", line 186, in htmlsafe_dumps\n    rv = dumps(obj, **kwargs) \\\n  File \"/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/flask/json.py\", line 126, in dumps\n    rv = _json.dumps(obj, **kwargs)\n  File \"/usr/lib/python2.7/json/__init__.py\", line 250, in dumps\n    sort_keys=sort_keys, **kw).encode(obj)\n  File \"/usr/lib/python2.7/json/encoder.py\", line 209, in encode\n    chunks = list(chunks)\n  File \"/usr/lib/python2.7/json/encoder.py\", line 434, in _iterencode\n    for chunk in _iterencode_dict(o, _current_indent_level):\n  File \"/usr/lib/python2.7/json/encoder.py\", line 382, in _iterencode_dict\n    raise TypeError(\"key \" + repr(key) + \" is not a string\")\nTypeError: key lu'Nome categoria' is not a string\n```\n\nI can't really use the `gettext` since i need the `lazy_gettext` version, and was asking for advice and ideas on how to tackle this problem: i tried subclassing the `flask.json.JSONEncoder` class [as per this example](https://gist.github.com/pvanliefland/6009424) and i'm handling lazy strings in the `default` method there, but it looks like it doesn't get called at all.\n\nThere is the `iterencode` method i could try to subclass, but it probably won't be a clean way to do it?\nThanks for any input you can give.\n",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/92306198",
            "html_url": "https://github.com/pallets/flask/issues/1435#issuecomment-92306198",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1435",
            "id": 92306198,
            "node_id": "MDEyOklzc3VlQ29tbWVudDkyMzA2MTk4",
            "user": {
                "login": "manuelbua",
                "id": 819314,
                "node_id": "MDQ6VXNlcjgxOTMxNA==",
                "avatar_url": "https://avatars3.githubusercontent.com/u/819314?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/manuelbua",
                "html_url": "https://github.com/manuelbua",
                "followers_url": "https://api.github.com/users/manuelbua/followers",
                "following_url": "https://api.github.com/users/manuelbua/following{/other_user}",
                "gists_url": "https://api.github.com/users/manuelbua/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/manuelbua/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/manuelbua/subscriptions",
                "organizations_url": "https://api.github.com/users/manuelbua/orgs",
                "repos_url": "https://api.github.com/users/manuelbua/repos",
                "events_url": "https://api.github.com/users/manuelbua/events{/privacy}",
                "received_events_url": "https://api.github.com/users/manuelbua/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-04-13T10:51:08Z",
            "updated_at": "2015-04-13T10:51:08Z",
            "author_association": "NONE",
            "body": "Ok, for now i reimplemented the original `iterencode` and i'm handling the `is_lazy_string` condition in the `_iterencode_list`, `_iterencode_dict` and `_iterencode` methods of the iterencode builder.\n\nWhile this works fine, i really would like to know if a better solution exists.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/303252120",
            "html_url": "https://github.com/pallets/flask/issues/1435#issuecomment-303252120",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1435",
            "id": 303252120,
            "node_id": "MDEyOklzc3VlQ29tbWVudDMwMzI1MjEyMA==",
            "user": {
                "login": "brianrusso",
                "id": 6276108,
                "node_id": "MDQ6VXNlcjYyNzYxMDg=",
                "avatar_url": "https://avatars2.githubusercontent.com/u/6276108?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/brianrusso",
                "html_url": "https://github.com/brianrusso",
                "followers_url": "https://api.github.com/users/brianrusso/followers",
                "following_url": "https://api.github.com/users/brianrusso/following{/other_user}",
                "gists_url": "https://api.github.com/users/brianrusso/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/brianrusso/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/brianrusso/subscriptions",
                "organizations_url": "https://api.github.com/users/brianrusso/orgs",
                "repos_url": "https://api.github.com/users/brianrusso/repos",
                "events_url": "https://api.github.com/users/brianrusso/events{/privacy}",
                "received_events_url": "https://api.github.com/users/brianrusso/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2017-05-23T00:00:12Z",
            "updated_at": "2017-05-23T00:00:12Z",
            "author_association": "NONE",
            "body": "@manuelbua Do you have sample code that can replicate the error so we can understand your use case? Thanks."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/303336558",
            "html_url": "https://github.com/pallets/flask/issues/1435#issuecomment-303336558",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1435",
            "id": 303336558,
            "node_id": "MDEyOklzc3VlQ29tbWVudDMwMzMzNjU1OA==",
            "user": {
                "login": "manuelbua",
                "id": 819314,
                "node_id": "MDQ6VXNlcjgxOTMxNA==",
                "avatar_url": "https://avatars3.githubusercontent.com/u/819314?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/manuelbua",
                "html_url": "https://github.com/manuelbua",
                "followers_url": "https://api.github.com/users/manuelbua/followers",
                "following_url": "https://api.github.com/users/manuelbua/following{/other_user}",
                "gists_url": "https://api.github.com/users/manuelbua/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/manuelbua/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/manuelbua/subscriptions",
                "organizations_url": "https://api.github.com/users/manuelbua/orgs",
                "repos_url": "https://api.github.com/users/manuelbua/repos",
                "events_url": "https://api.github.com/users/manuelbua/events{/privacy}",
                "received_events_url": "https://api.github.com/users/manuelbua/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2017-05-23T09:02:20Z",
            "updated_at": "2017-05-23T09:02:20Z",
            "author_association": "NONE",
            "body": "I think this can be safely closed: i probably managed to get around it in some ways i can't remember..\r\nFeel free to close this issue, thanks!"
        }
    ]
}