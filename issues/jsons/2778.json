{
    "url": "https://api.github.com/repos/pallets/flask/issues/2778",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/2778/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/2778/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/2778/events",
    "html_url": "https://github.com/pallets/flask/issues/2778",
    "id": 322566693,
    "node_id": "MDU6SXNzdWUzMjI1NjY2OTM=",
    "number": 2778,
    "title": "Registered error handler (using register_error_handler) processes inappropriate exceptions",
    "user": {
        "login": "woxcab",
        "id": 16160665,
        "node_id": "MDQ6VXNlcjE2MTYwNjY1",
        "avatar_url": "https://avatars3.githubusercontent.com/u/16160665?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/woxcab",
        "html_url": "https://github.com/woxcab",
        "followers_url": "https://api.github.com/users/woxcab/followers",
        "following_url": "https://api.github.com/users/woxcab/following{/other_user}",
        "gists_url": "https://api.github.com/users/woxcab/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/woxcab/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/woxcab/subscriptions",
        "organizations_url": "https://api.github.com/users/woxcab/orgs",
        "repos_url": "https://api.github.com/users/woxcab/repos",
        "events_url": "https://api.github.com/users/woxcab/events{/privacy}",
        "received_events_url": "https://api.github.com/users/woxcab/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": {
        "url": "https://api.github.com/repos/pallets/flask/milestones/3",
        "html_url": "https://github.com/pallets/flask/milestone/3",
        "labels_url": "https://api.github.com/repos/pallets/flask/milestones/3/labels",
        "id": 3093266,
        "node_id": "MDk6TWlsZXN0b25lMzA5MzI2Ng==",
        "number": 3,
        "title": "1.1.0",
        "description": "",
        "creator": {
            "login": "davidism",
            "id": 1242887,
            "node_id": "MDQ6VXNlcjEyNDI4ODc=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/davidism",
            "html_url": "https://github.com/davidism",
            "followers_url": "https://api.github.com/users/davidism/followers",
            "following_url": "https://api.github.com/users/davidism/following{/other_user}",
            "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
            "organizations_url": "https://api.github.com/users/davidism/orgs",
            "repos_url": "https://api.github.com/users/davidism/repos",
            "events_url": "https://api.github.com/users/davidism/events{/privacy}",
            "received_events_url": "https://api.github.com/users/davidism/received_events",
            "type": "User",
            "site_admin": false
        },
        "open_issues": 0,
        "closed_issues": 48,
        "state": "closed",
        "created_at": "2018-02-06T16:14:43Z",
        "updated_at": "2019-07-06T22:03:23Z",
        "due_on": null,
        "closed_at": "2019-07-06T22:03:23Z"
    },
    "comments": 21,
    "created_at": "2018-05-13T05:45:26Z",
    "updated_at": "2019-06-21T15:34:00Z",
    "closed_at": "2019-06-21T15:34:00Z",
    "author_association": "NONE",
    "body": "If register an error handler for exception class `A` then this error handler will be called for any exception `B` that isn't `A` or subclass of `A`.\r\n\r\n## Expected Behavior\r\nGiven error handler must be called only for exceptions that's instance of `A` or instance of subclass of `A`.\r\n\r\n## Actual Behavior\r\nError handler processes any exception.\r\n\r\n## How to reproduce\r\nMinimal code:\r\n\r\n```python3\r\nimport flask\r\nfrom werkzeug.exceptions import HTTPException\r\n\r\napp = flask.Flask(__name__)\r\napp.register_error_handler(HTTPException, lambda e: (str(e), e.code))\r\n\r\n@app.route('/')\r\ndef index():\r\n    raise ValueError()\r\n\r\napp.run()\r\n```\r\n\r\n1. Run script\r\n2. Go to  http://127.0.0.1:5000/ \r\n\r\nServer logs exception `AttributeError: 'ValueError' object has no attribute 'code'`, i.e. registered error handler is called for `ValueError` exception, but the error handler is registered only for `HTTPException` and its subclasses.\r\n\r\n\r\n## Environment\r\n\r\n* Python version: 3.5.2\r\n* Flask version: 1.0.2\r\n* Werkzeug version: 0.14.1\r\n",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/388865543",
            "html_url": "https://github.com/pallets/flask/issues/2778#issuecomment-388865543",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2778",
            "id": 388865543,
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4ODg2NTU0Mw==",
            "user": {
                "login": "sgunturu5",
                "id": 39142141,
                "node_id": "MDQ6VXNlcjM5MTQyMTQx",
                "avatar_url": "https://avatars0.githubusercontent.com/u/39142141?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/sgunturu5",
                "html_url": "https://github.com/sgunturu5",
                "followers_url": "https://api.github.com/users/sgunturu5/followers",
                "following_url": "https://api.github.com/users/sgunturu5/following{/other_user}",
                "gists_url": "https://api.github.com/users/sgunturu5/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/sgunturu5/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/sgunturu5/subscriptions",
                "organizations_url": "https://api.github.com/users/sgunturu5/orgs",
                "repos_url": "https://api.github.com/users/sgunturu5/repos",
                "events_url": "https://api.github.com/users/sgunturu5/events{/privacy}",
                "received_events_url": "https://api.github.com/users/sgunturu5/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2018-05-14T15:47:32Z",
            "updated_at": "2018-05-14T15:47:58Z",
            "author_association": "NONE",
            "body": "Discussed with @davidism \r\nHTTPException Handler and InternalServerError is the default exception handle for unhandled exceptions.  Hence it need to be generic. Planning to update the documentation."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/388894147",
            "html_url": "https://github.com/pallets/flask/issues/2778#issuecomment-388894147",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2778",
            "id": 388894147,
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4ODg5NDE0Nw==",
            "user": {
                "login": "ThiefMaster",
                "id": 179599,
                "node_id": "MDQ6VXNlcjE3OTU5OQ==",
                "avatar_url": "https://avatars1.githubusercontent.com/u/179599?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/ThiefMaster",
                "html_url": "https://github.com/ThiefMaster",
                "followers_url": "https://api.github.com/users/ThiefMaster/followers",
                "following_url": "https://api.github.com/users/ThiefMaster/following{/other_user}",
                "gists_url": "https://api.github.com/users/ThiefMaster/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/ThiefMaster/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ThiefMaster/subscriptions",
                "organizations_url": "https://api.github.com/users/ThiefMaster/orgs",
                "repos_url": "https://api.github.com/users/ThiefMaster/repos",
                "events_url": "https://api.github.com/users/ThiefMaster/events{/privacy}",
                "received_events_url": "https://api.github.com/users/ThiefMaster/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2018-05-14T17:15:57Z",
            "updated_at": "2018-05-14T17:15:57Z",
            "author_association": "MEMBER",
            "body": "Is this really the behavior we want? I think an error handle for `Exception` should be catchall - but in any `HTTPException` error handler getting an exception that is not a subclass of `HTTPException` seems wrong/confusing."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/388956297",
            "html_url": "https://github.com/pallets/flask/issues/2778#issuecomment-388956297",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2778",
            "id": 388956297,
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4ODk1NjI5Nw==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2018-05-14T20:43:40Z",
            "updated_at": "2018-05-14T20:43:40Z",
            "author_association": "MEMBER",
            "body": "Flask wants to raise a 500 error when there is an unhandled exception. But it tries to use the `InternalServerError` (500) error handler to handle that 500 error (which falls back to the `HTTPException`). That seems correct, but means that they need to not make assumptions about the incoming error."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/388956734",
            "html_url": "https://github.com/pallets/flask/issues/2778#issuecomment-388956734",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2778",
            "id": 388956734,
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4ODk1NjczNA==",
            "user": {
                "login": "ThiefMaster",
                "id": 179599,
                "node_id": "MDQ6VXNlcjE3OTU5OQ==",
                "avatar_url": "https://avatars1.githubusercontent.com/u/179599?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/ThiefMaster",
                "html_url": "https://github.com/ThiefMaster",
                "followers_url": "https://api.github.com/users/ThiefMaster/followers",
                "following_url": "https://api.github.com/users/ThiefMaster/following{/other_user}",
                "gists_url": "https://api.github.com/users/ThiefMaster/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/ThiefMaster/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ThiefMaster/subscriptions",
                "organizations_url": "https://api.github.com/users/ThiefMaster/orgs",
                "repos_url": "https://api.github.com/users/ThiefMaster/repos",
                "events_url": "https://api.github.com/users/ThiefMaster/events{/privacy}",
                "received_events_url": "https://api.github.com/users/ThiefMaster/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2018-05-14T20:45:09Z",
            "updated_at": "2018-05-14T20:45:09Z",
            "author_association": "MEMBER",
            "body": "What I mean is that the error handler should receive the 500 error, but with an InternalServerError exception -- not the original exception that caused it. IMO people should register an error handler for Exception, ValueError, etc. if they want these exceptions."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/435130792",
            "html_url": "https://github.com/pallets/flask/issues/2778#issuecomment-435130792",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2778",
            "id": 435130792,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTEzMDc5Mg==",
            "user": {
                "login": "taion",
                "id": 3112159,
                "node_id": "MDQ6VXNlcjMxMTIxNTk=",
                "avatar_url": "https://avatars0.githubusercontent.com/u/3112159?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/taion",
                "html_url": "https://github.com/taion",
                "followers_url": "https://api.github.com/users/taion/followers",
                "following_url": "https://api.github.com/users/taion/following{/other_user}",
                "gists_url": "https://api.github.com/users/taion/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/taion/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/taion/subscriptions",
                "organizations_url": "https://api.github.com/users/taion/orgs",
                "repos_url": "https://api.github.com/users/taion/repos",
                "events_url": "https://api.github.com/users/taion/events{/privacy}",
                "received_events_url": "https://api.github.com/users/taion/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2018-11-01T18:03:39Z",
            "updated_at": "2018-11-01T18:03:39Z",
            "author_association": "CONTRIBUTOR",
            "body": "@ThiefMaster \r\n\r\nI spent a few minutes poking around at your recommended solution, because it was the one that seemed to make sense, and it's straightforward to implement.\r\n\r\nHowever, the test suite gives an example for when the current behavior might be desired: https://github.com/pallets/flask/blob/7e714bd28b6e96d82b2848b48cf8ff48b517b09b/tests/test_user_error_handler.py#L29-L31\r\n\r\nIn other words, while receiving a `KeyError` is very strange if I registered a handler for `InternalServerError`, it's not at all strange if I registered a handler for `500`. However, the current handler map implementation represents error handlers registered for `500` identically with those registered for `InternalServerError` (as error handlers registered for a code are treated as those registered for the default exception type for that code).\r\n\r\nSo, assuming the behavior above is desired (i.e. the handler for `500` gets the \"real\" exception, while the handler for `InternalServerError` gets the `InternalServerError`), the obvious implementation would be to track error handlers for status codes entirely separately from those for exception classes.\r\n\r\n_However_, this would require changing the shape of `error_handler_spec`, and even though this isn't something users should have any good reasons to use, it's actually part of the documented API: http://flask.pocoo.org/docs/1.0/api/?highlight=error_handler_spec#flask.Flask.error_handler_spec. It's worth noting that this documentation is actually incorrect in the case where the status is `None`, though.\r\n\r\nThere's an interim not-really-breaking solution where we treat the exception class as `None` when registering errors on a status code. Perhaps I'll demonstrate this on a PR.\r\n\r\nBut otherwise let me know what we think about the possibility of a larger refactor here, and whether `error_handler_spec` is actually part of the public API."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/435148762",
            "html_url": "https://github.com/pallets/flask/issues/2778#issuecomment-435148762",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2778",
            "id": 435148762,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTE0ODc2Mg==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2018-11-01T18:58:30Z",
            "updated_at": "2018-11-01T19:08:09Z",
            "author_association": "MEMBER",
            "body": "Why do you think we should be treating exception classes differently than codes? They are the same.\r\n\r\n> However, the current handler map implementation represents error handlers registered for 500 identically with those registered for InternalServerError (as error handlers registered for a code are treated as those registered for the default exception type for that code).\r\n\r\nThis is correct."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/435152015",
            "html_url": "https://github.com/pallets/flask/issues/2778#issuecomment-435152015",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2778",
            "id": 435152015,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTE1MjAxNQ==",
            "user": {
                "login": "taion",
                "id": 3112159,
                "node_id": "MDQ6VXNlcjMxMTIxNTk=",
                "avatar_url": "https://avatars0.githubusercontent.com/u/3112159?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/taion",
                "html_url": "https://github.com/taion",
                "followers_url": "https://api.github.com/users/taion/followers",
                "following_url": "https://api.github.com/users/taion/following{/other_user}",
                "gists_url": "https://api.github.com/users/taion/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/taion/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/taion/subscriptions",
                "organizations_url": "https://api.github.com/users/taion/orgs",
                "repos_url": "https://api.github.com/users/taion/repos",
                "events_url": "https://api.github.com/users/taion/events{/privacy}",
                "received_events_url": "https://api.github.com/users/taion/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2018-11-01T19:09:06Z",
            "updated_at": "2018-11-01T19:09:26Z",
            "author_association": "CONTRIBUTOR",
            "body": "If I install an error handler on `HTTPException`, I don't expect to receive errors that are not instances of `HTTPException`. Likewise even with `InternalServerError`, I would argue.\r\n\r\nHowever, if I install an error handler on `500`, then it's less clear. And in fact the test suite currently explicitly asserts that error handlers on `500` receive the \"real\" exception, rather than an `InternalServerError`: https://github.com/pallets/flask/blob/7e714bd28b6e96d82b2848b48cf8ff48b517b09b/tests/test_user_error_handler.py#L43."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/435152154",
            "html_url": "https://github.com/pallets/flask/issues/2778#issuecomment-435152154",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2778",
            "id": 435152154,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTE1MjE1NA==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2018-11-01T19:09:37Z",
            "updated_at": "2018-11-01T19:09:37Z",
            "author_association": "MEMBER",
            "body": "\"500\" is just a shortcut for \"InternalServerError\""
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/435152560",
            "html_url": "https://github.com/pallets/flask/issues/2778#issuecomment-435152560",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2778",
            "id": 435152560,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTE1MjU2MA==",
            "user": {
                "login": "taion",
                "id": 3112159,
                "node_id": "MDQ6VXNlcjMxMTIxNTk=",
                "avatar_url": "https://avatars0.githubusercontent.com/u/3112159?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/taion",
                "html_url": "https://github.com/taion",
                "followers_url": "https://api.github.com/users/taion/followers",
                "following_url": "https://api.github.com/users/taion/following{/other_user}",
                "gists_url": "https://api.github.com/users/taion/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/taion/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/taion/subscriptions",
                "organizations_url": "https://api.github.com/users/taion/orgs",
                "repos_url": "https://api.github.com/users/taion/repos",
                "events_url": "https://api.github.com/users/taion/events{/privacy}",
                "received_events_url": "https://api.github.com/users/taion/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2018-11-01T19:10:56Z",
            "updated_at": "2018-11-01T19:10:56Z",
            "author_association": "CONTRIBUTOR",
            "body": "Is your view that the linked test case above is wrong, or is it that error handlers on `HTTPException` need to handle non-`HTTPException` instances?"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/435154836",
            "html_url": "https://github.com/pallets/flask/issues/2778#issuecomment-435154836",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2778",
            "id": 435154836,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTE1NDgzNg==",
            "user": {
                "login": "taion",
                "id": 3112159,
                "node_id": "MDQ6VXNlcjMxMTIxNTk=",
                "avatar_url": "https://avatars0.githubusercontent.com/u/3112159?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/taion",
                "html_url": "https://github.com/taion",
                "followers_url": "https://api.github.com/users/taion/followers",
                "following_url": "https://api.github.com/users/taion/following{/other_user}",
                "gists_url": "https://api.github.com/users/taion/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/taion/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/taion/subscriptions",
                "organizations_url": "https://api.github.com/users/taion/orgs",
                "repos_url": "https://api.github.com/users/taion/repos",
                "events_url": "https://api.github.com/users/taion/events{/privacy}",
                "received_events_url": "https://api.github.com/users/taion/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2018-11-01T19:18:48Z",
            "updated_at": "2018-11-01T19:18:48Z",
            "author_association": "CONTRIBUTOR",
            "body": "It's also unintuitive that an error handler attached for e.g. the status code `422` will not catch exceptions that are instances of classes that extend `HTTPException` but not `UnprocessableEntity`.\r\n\r\nFrom the docs http://flask.pocoo.org/docs/1.0/patterns/errorpages/#error-handlers:\r\n> A handler can be registered for a status code, like 404, or for an exception class.\r\n\r\nBut it seems like if I wrote a:\r\n\r\n```python\r\nclass MyUnprocessableEntity(HTTPException):\r\n    code = 422\r\n    description = \"Some other description of an unprocessable entity error.\"\r\n```\r\n\r\nThen an error handler on 422 should catch this, which suggests that (in addition to the case above with handling internal errors) there's reason to not treat status codes as identical to the default exception classes in all cases."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/435154868",
            "html_url": "https://github.com/pallets/flask/issues/2778#issuecomment-435154868",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2778",
            "id": 435154868,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTE1NDg2OA==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2018-11-01T19:18:55Z",
            "updated_at": "2018-11-01T19:18:55Z",
            "author_association": "MEMBER",
            "body": "That test still passes if you change `@app.errorhandler(500)` to `@app.errorhandler(InteralServerError)`."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/435155215",
            "html_url": "https://github.com/pallets/flask/issues/2778#issuecomment-435155215",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2778",
            "id": 435155215,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTE1NTIxNQ==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2018-11-01T19:20:10Z",
            "updated_at": "2018-11-01T19:20:10Z",
            "author_association": "MEMBER",
            "body": "If you registered that custom exception with Werkzeug's exception map, it would work."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/435155352",
            "html_url": "https://github.com/pallets/flask/issues/2778#issuecomment-435155352",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2778",
            "id": 435155352,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTE1NTM1Mg==",
            "user": {
                "login": "taion",
                "id": 3112159,
                "node_id": "MDQ6VXNlcjMxMTIxNTk=",
                "avatar_url": "https://avatars0.githubusercontent.com/u/3112159?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/taion",
                "html_url": "https://github.com/taion",
                "followers_url": "https://api.github.com/users/taion/followers",
                "following_url": "https://api.github.com/users/taion/following{/other_user}",
                "gists_url": "https://api.github.com/users/taion/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/taion/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/taion/subscriptions",
                "organizations_url": "https://api.github.com/users/taion/orgs",
                "repos_url": "https://api.github.com/users/taion/repos",
                "events_url": "https://api.github.com/users/taion/events{/privacy}",
                "received_events_url": "https://api.github.com/users/taion/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2018-11-01T19:20:36Z",
            "updated_at": "2018-11-01T19:20:36Z",
            "author_association": "CONTRIBUTOR",
            "body": "> That test still passes if you change `@app.errorhandler(500)` to `@app.errorhandler(InteralServerError)`.\r\n\r\nThat's exactly the problem here, though. Per @ThiefMaster in https://github.com/pallets/flask/issues/2778#issuecomment-388956734, if I install an exception handler on `InternalServerError`, I do not except to receive exceptions that are not instances of `InternalServerError`."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/435157732",
            "html_url": "https://github.com/pallets/flask/issues/2778#issuecomment-435157732",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2778",
            "id": 435157732,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTE1NzczMg==",
            "user": {
                "login": "taion",
                "id": 3112159,
                "node_id": "MDQ6VXNlcjMxMTIxNTk=",
                "avatar_url": "https://avatars0.githubusercontent.com/u/3112159?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/taion",
                "html_url": "https://github.com/taion",
                "followers_url": "https://api.github.com/users/taion/followers",
                "following_url": "https://api.github.com/users/taion/following{/other_user}",
                "gists_url": "https://api.github.com/users/taion/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/taion/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/taion/subscriptions",
                "organizations_url": "https://api.github.com/users/taion/orgs",
                "repos_url": "https://api.github.com/users/taion/repos",
                "events_url": "https://api.github.com/users/taion/events{/privacy}",
                "received_events_url": "https://api.github.com/users/taion/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2018-11-01T19:28:28Z",
            "updated_at": "2018-11-01T19:28:28Z",
            "author_association": "CONTRIBUTOR",
            "body": "I'm not disputing your explanation of the current behavior.\r\n\r\nThe gist of this issue is that the current behavior is unexpected and seems buggy to me. Per the OP, if I do:\r\n\r\n```python\r\n@app.errorhandler(HTTPException)\r\ndef my_error_handler(error):\r\n    assert isinstance(error, HTTPException)\r\n    return \"I just had an error\", error.code\r\n```\r\n\r\nMy expectation is that the `assert` should always trivially pass, and that my error handler will work. This is not currently the case, because `error` can be whatever internal exception gets thrown in my app.\r\n\r\nMy PR in #2983 makes the above handler only receive instances of `HTTPException`, while preserving the ability to register handlers on `500`, keeping the existing behavior there.\r\n\r\n(And actually, per https://github.com/pallets/flask/issues/2984, it _really_ won't work as expected, because internal routing exceptions that I do not understand as errors will _also_ get handled by my handler \u2013 incorrectly, at that.)"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/461020367",
            "html_url": "https://github.com/pallets/flask/issues/2778#issuecomment-461020367",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2778",
            "id": 461020367,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MTAyMDM2Nw==",
            "user": {
                "login": "RawPlutonium",
                "id": 22885308,
                "node_id": "MDQ6VXNlcjIyODg1MzA4",
                "avatar_url": "https://avatars2.githubusercontent.com/u/22885308?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/RawPlutonium",
                "html_url": "https://github.com/RawPlutonium",
                "followers_url": "https://api.github.com/users/RawPlutonium/followers",
                "following_url": "https://api.github.com/users/RawPlutonium/following{/other_user}",
                "gists_url": "https://api.github.com/users/RawPlutonium/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/RawPlutonium/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/RawPlutonium/subscriptions",
                "organizations_url": "https://api.github.com/users/RawPlutonium/orgs",
                "repos_url": "https://api.github.com/users/RawPlutonium/repos",
                "events_url": "https://api.github.com/users/RawPlutonium/events{/privacy}",
                "received_events_url": "https://api.github.com/users/RawPlutonium/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2019-02-06T13:20:42Z",
            "updated_at": "2019-02-06T13:50:48Z",
            "author_association": "NONE",
            "body": "My flask app is rejecting my custom definition of the 500 error catch and therefore not rendering the template. This is the code. From @miguelgrinberg 's tutorial. `from flask import render_template\r\nfrom app import app, db\r\n    \r\n\r\n```\r\n@app.errorhandler(500)\r\ndef internal_server_error(error):\r\n    return render_template('500.html'), 500\r\n\r\n\r\n@app.errorhandler(404)\r\ndef not_found_error(error):\r\n    return render_template('404.html'), 404\r\n```\r\n\r\nPlease help. [Stack trace](https://pastebin.com/gjREfCuw) for the 500 error."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/461026547",
            "html_url": "https://github.com/pallets/flask/issues/2778#issuecomment-461026547",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2778",
            "id": 461026547,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MTAyNjU0Nw==",
            "user": {
                "login": "miguelgrinberg",
                "id": 2715854,
                "node_id": "MDQ6VXNlcjI3MTU4NTQ=",
                "avatar_url": "https://avatars0.githubusercontent.com/u/2715854?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/miguelgrinberg",
                "html_url": "https://github.com/miguelgrinberg",
                "followers_url": "https://api.github.com/users/miguelgrinberg/followers",
                "following_url": "https://api.github.com/users/miguelgrinberg/following{/other_user}",
                "gists_url": "https://api.github.com/users/miguelgrinberg/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/miguelgrinberg/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/miguelgrinberg/subscriptions",
                "organizations_url": "https://api.github.com/users/miguelgrinberg/orgs",
                "repos_url": "https://api.github.com/users/miguelgrinberg/repos",
                "events_url": "https://api.github.com/users/miguelgrinberg/events{/privacy}",
                "received_events_url": "https://api.github.com/users/miguelgrinberg/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2019-02-06T13:41:11Z",
            "updated_at": "2019-02-06T13:50:55Z",
            "author_association": "MEMBER",
            "body": "@RawPlutonium where do you have your 500 handler defined? Are you sure you imported that module?"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/461027556",
            "html_url": "https://github.com/pallets/flask/issues/2778#issuecomment-461027556",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2778",
            "id": 461027556,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MTAyNzU1Ng==",
            "user": {
                "login": "RawPlutonium",
                "id": 22885308,
                "node_id": "MDQ6VXNlcjIyODg1MzA4",
                "avatar_url": "https://avatars2.githubusercontent.com/u/22885308?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/RawPlutonium",
                "html_url": "https://github.com/RawPlutonium",
                "followers_url": "https://api.github.com/users/RawPlutonium/followers",
                "following_url": "https://api.github.com/users/RawPlutonium/following{/other_user}",
                "gists_url": "https://api.github.com/users/RawPlutonium/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/RawPlutonium/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/RawPlutonium/subscriptions",
                "organizations_url": "https://api.github.com/users/RawPlutonium/orgs",
                "repos_url": "https://api.github.com/users/RawPlutonium/repos",
                "events_url": "https://api.github.com/users/RawPlutonium/events{/privacy}",
                "received_events_url": "https://api.github.com/users/RawPlutonium/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2019-02-06T13:44:37Z",
            "updated_at": "2019-02-06T13:51:00Z",
            "author_association": "NONE",
            "body": "@miguelgrinberg  do you mean the view or the logic?"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/461028519",
            "html_url": "https://github.com/pallets/flask/issues/2778#issuecomment-461028519",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2778",
            "id": 461028519,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MTAyODUxOQ==",
            "user": {
                "login": "miguelgrinberg",
                "id": 2715854,
                "node_id": "MDQ6VXNlcjI3MTU4NTQ=",
                "avatar_url": "https://avatars0.githubusercontent.com/u/2715854?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/miguelgrinberg",
                "html_url": "https://github.com/miguelgrinberg",
                "followers_url": "https://api.github.com/users/miguelgrinberg/followers",
                "following_url": "https://api.github.com/users/miguelgrinberg/following{/other_user}",
                "gists_url": "https://api.github.com/users/miguelgrinberg/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/miguelgrinberg/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/miguelgrinberg/subscriptions",
                "organizations_url": "https://api.github.com/users/miguelgrinberg/orgs",
                "repos_url": "https://api.github.com/users/miguelgrinberg/repos",
                "events_url": "https://api.github.com/users/miguelgrinberg/events{/privacy}",
                "received_events_url": "https://api.github.com/users/miguelgrinberg/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2019-02-06T13:47:45Z",
            "updated_at": "2019-02-06T13:51:05Z",
            "author_association": "MEMBER",
            "body": "@RawPlutonium the logic, the code that you just pasted. I'm thinking you aren't importing it, so flask does not see it."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/461029027",
            "html_url": "https://github.com/pallets/flask/issues/2778#issuecomment-461029027",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2778",
            "id": 461029027,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MTAyOTAyNw==",
            "user": {
                "login": "RawPlutonium",
                "id": 22885308,
                "node_id": "MDQ6VXNlcjIyODg1MzA4",
                "avatar_url": "https://avatars2.githubusercontent.com/u/22885308?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/RawPlutonium",
                "html_url": "https://github.com/RawPlutonium",
                "followers_url": "https://api.github.com/users/RawPlutonium/followers",
                "following_url": "https://api.github.com/users/RawPlutonium/following{/other_user}",
                "gists_url": "https://api.github.com/users/RawPlutonium/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/RawPlutonium/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/RawPlutonium/subscriptions",
                "organizations_url": "https://api.github.com/users/RawPlutonium/orgs",
                "repos_url": "https://api.github.com/users/RawPlutonium/repos",
                "events_url": "https://api.github.com/users/RawPlutonium/events{/privacy}",
                "received_events_url": "https://api.github.com/users/RawPlutonium/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2019-02-06T13:49:17Z",
            "updated_at": "2019-02-06T13:51:12Z",
            "author_association": "NONE",
            "body": "According to your tutorial it's just a file called `errors.py` . The 404 error is responding perfectly and referring to the particular class that is handling the 404 not found error. The 500 error however is not as friendly as when I trigger it, the system view is displayed instead of my custom one.\r\n\r\nHow come it's seeing the 404? @miguelgrinberg , Is there something else I'm supposed to import?"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/461029063",
            "html_url": "https://github.com/pallets/flask/issues/2778#issuecomment-461029063",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2778",
            "id": 461029063,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MTAyOTA2Mw==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2019-02-06T13:49:22Z",
            "updated_at": "2019-02-06T14:40:28Z",
            "author_association": "MEMBER",
            "body": "Please use another venue for Q&A. Stack Overflow or [our Discord](https://discord.gg/t6rrQZH) would be appropriate."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/461030751",
            "html_url": "https://github.com/pallets/flask/issues/2778#issuecomment-461030751",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2778",
            "id": 461030751,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MTAzMDc1MQ==",
            "user": {
                "login": "RawPlutonium",
                "id": 22885308,
                "node_id": "MDQ6VXNlcjIyODg1MzA4",
                "avatar_url": "https://avatars2.githubusercontent.com/u/22885308?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/RawPlutonium",
                "html_url": "https://github.com/RawPlutonium",
                "followers_url": "https://api.github.com/users/RawPlutonium/followers",
                "following_url": "https://api.github.com/users/RawPlutonium/following{/other_user}",
                "gists_url": "https://api.github.com/users/RawPlutonium/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/RawPlutonium/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/RawPlutonium/subscriptions",
                "organizations_url": "https://api.github.com/users/RawPlutonium/orgs",
                "repos_url": "https://api.github.com/users/RawPlutonium/repos",
                "events_url": "https://api.github.com/users/RawPlutonium/events{/privacy}",
                "received_events_url": "https://api.github.com/users/RawPlutonium/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2019-02-06T13:54:20Z",
            "updated_at": "2019-02-06T14:40:24Z",
            "author_association": "NONE",
            "body": "@davidism I'm sorry about that. @miguelgrinberg can we continue there?"
        }
    ]
}