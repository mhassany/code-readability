{
    "url": "https://api.github.com/repos/pallets/flask/issues/220",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/220/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/220/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/220/events",
    "html_url": "https://github.com/pallets/flask/issues/220",
    "id": 787712,
    "node_id": "MDU6SXNzdWU3ODc3MTI=",
    "number": 220,
    "title": "Custom default function for jsonify",
    "user": {
        "login": "dag",
        "id": 319,
        "node_id": "MDQ6VXNlcjMxOQ==",
        "avatar_url": "https://avatars1.githubusercontent.com/u/319?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dag",
        "html_url": "https://github.com/dag",
        "followers_url": "https://api.github.com/users/dag/followers",
        "following_url": "https://api.github.com/users/dag/following{/other_user}",
        "gists_url": "https://api.github.com/users/dag/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/dag/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dag/subscriptions",
        "organizations_url": "https://api.github.com/users/dag/orgs",
        "repos_url": "https://api.github.com/users/dag/repos",
        "events_url": "https://api.github.com/users/dag/events{/privacy}",
        "received_events_url": "https://api.github.com/users/dag/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 10,
    "created_at": "2011-04-19T08:25:20Z",
    "updated_at": "2014-07-26T12:26:09Z",
    "closed_at": "2014-07-26T12:26:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "It would be neat to be able to control the serialization of arbitrary objects with jsonify. The dumps function allows you to pass a callable for this. I propose the addition of either an overridable method on the Flask class that is passed by jsonify, or a decorator for registering such a function. The \"default default\" could simply raise TypeError, the \"default default\" for the json module.\n\n``` python\nclass JSONAdaptiveFlask(Flask):\n\n    def json_defaults(self, obj):\n        if isinstance(obj, datetime):\n            return obj.isoformat()\n        try:\n            return obj.__json__()\n        except AttributeError:\n            raise TypeError\n```\n\n\u2026 or \u2026\n\n``` python\n@app.json_defaults\ndef json_adaption(obj):\n    if isinstance(obj, datetime):\n        return obj.isoformat()\n    try:\n        return obj.__json__()\n    except AttributeError:\n        raise TypeError\n```\n\nUnlike the rejected pull-request, this should be thread-safe. As for direct use of the json module, one can simply pass the reference:\n\n``` python\njson.dumps(obj, default=app.json_defaults)\n```\n\nIn a discussion on IRC, Armin expressed concern that this kind of adaption isn't very useful in practice, because it differs between requests _what_ one wants serialized from an object. This problem can be solved by exploiting the fact that jsonify is request-bound, and the defaults function is able to read context-locals such as 'g'. It may not \"feel\" right but it is essentially what we need: a global state for the request.\n\n``` python\nclass User(Model):\n\n    def __json__(self):\n        data = dict(name=self.name, joined=self.created_at)\n        if g.user is self:\n            data.update(email=self.email)\n        if g.verbose_json:\n            data.update(posts=self.posts)\n```\n\nThe gain is that we can simplify views and structure the code better by moving model-logic to models. We can avoid repeating ourselves \u2014 the serialization is recursive, we just reference a datetime object and a list of instances of the Post model. We don't lose anything because by default it will behave as before and regardless we can still pass standard types directly to jsonify.\n\nIf you [Armin] approve the idea and decide on an API, I'll try my hand at a patch if you like.\n",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/1025621",
            "html_url": "https://github.com/pallets/flask/issues/220#issuecomment-1025621",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/220",
            "id": 1025621,
            "node_id": "MDEyOklzc3VlQ29tbWVudDEwMjU2MjE=",
            "user": {
                "login": "dag",
                "id": 319,
                "node_id": "MDQ6VXNlcjMxOQ==",
                "avatar_url": "https://avatars1.githubusercontent.com/u/319?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/dag",
                "html_url": "https://github.com/dag",
                "followers_url": "https://api.github.com/users/dag/followers",
                "following_url": "https://api.github.com/users/dag/following{/other_user}",
                "gists_url": "https://api.github.com/users/dag/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/dag/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dag/subscriptions",
                "organizations_url": "https://api.github.com/users/dag/orgs",
                "repos_url": "https://api.github.com/users/dag/repos",
                "events_url": "https://api.github.com/users/dag/events{/privacy}",
                "received_events_url": "https://api.github.com/users/dag/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2011-04-19T08:27:48Z",
            "updated_at": "2011-04-19T08:27:48Z",
            "author_association": "CONTRIBUTOR",
            "body": "There might be a better name for 'json_defaults' BTW. Suggestions?\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/1029208",
            "html_url": "https://github.com/pallets/flask/issues/220#issuecomment-1029208",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/220",
            "id": 1029208,
            "node_id": "MDEyOklzc3VlQ29tbWVudDEwMjkyMDg=",
            "user": {
                "login": "gregglind",
                "id": 163983,
                "node_id": "MDQ6VXNlcjE2Mzk4Mw==",
                "avatar_url": "https://avatars2.githubusercontent.com/u/163983?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/gregglind",
                "html_url": "https://github.com/gregglind",
                "followers_url": "https://api.github.com/users/gregglind/followers",
                "following_url": "https://api.github.com/users/gregglind/following{/other_user}",
                "gists_url": "https://api.github.com/users/gregglind/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/gregglind/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gregglind/subscriptions",
                "organizations_url": "https://api.github.com/users/gregglind/orgs",
                "repos_url": "https://api.github.com/users/gregglind/repos",
                "events_url": "https://api.github.com/users/gregglind/events{/privacy}",
                "received_events_url": "https://api.github.com/users/gregglind/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2011-04-19T20:36:31Z",
            "updated_at": "2011-04-19T20:36:31Z",
            "author_association": "NONE",
            "body": "In the standard lib, it's called 'cls', which is not terribly descriptive. http://docs.python.org/library/json.html .  Maybe 'json_cls', or 'json_dumper'?    Those are both quite hideous as well though.\n\n\"To use a custom JSONEncoder subclass (e.g. one that overrides the default() method to serialize additional types), specify it with the cls kwarg; otherwise JSONEncoder is used.\"\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/1029362",
            "html_url": "https://github.com/pallets/flask/issues/220#issuecomment-1029362",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/220",
            "id": 1029362,
            "node_id": "MDEyOklzc3VlQ29tbWVudDEwMjkzNjI=",
            "user": {
                "login": "dag",
                "id": 319,
                "node_id": "MDQ6VXNlcjMxOQ==",
                "avatar_url": "https://avatars1.githubusercontent.com/u/319?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/dag",
                "html_url": "https://github.com/dag",
                "followers_url": "https://api.github.com/users/dag/followers",
                "following_url": "https://api.github.com/users/dag/following{/other_user}",
                "gists_url": "https://api.github.com/users/dag/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/dag/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dag/subscriptions",
                "organizations_url": "https://api.github.com/users/dag/orgs",
                "repos_url": "https://api.github.com/users/dag/repos",
                "events_url": "https://api.github.com/users/dag/events{/privacy}",
                "received_events_url": "https://api.github.com/users/dag/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2011-04-19T21:05:06Z",
            "updated_at": "2011-04-19T21:34:29Z",
            "author_association": "CONTRIBUTOR",
            "body": "> In the standard lib, it's called 'cls', which is not terribly descriptive. http://docs.python.org/library/json.html . Maybe 'json_cls', or 'json_dumper'? Those are both quite hideous as well though.\n\nYou can pass a 'default' callable without the need for a class. Are there any benefits from using custom encoder classes instead?\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/4607657",
            "html_url": "https://github.com/pallets/flask/issues/220#issuecomment-4607657",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/220",
            "id": 4607657,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MDc2NTc=",
            "user": {
                "login": "aisipos",
                "id": 68444,
                "node_id": "MDQ6VXNlcjY4NDQ0",
                "avatar_url": "https://avatars0.githubusercontent.com/u/68444?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/aisipos",
                "html_url": "https://github.com/aisipos",
                "followers_url": "https://api.github.com/users/aisipos/followers",
                "following_url": "https://api.github.com/users/aisipos/following{/other_user}",
                "gists_url": "https://api.github.com/users/aisipos/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/aisipos/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aisipos/subscriptions",
                "organizations_url": "https://api.github.com/users/aisipos/orgs",
                "repos_url": "https://api.github.com/users/aisipos/repos",
                "events_url": "https://api.github.com/users/aisipos/events{/privacy}",
                "received_events_url": "https://api.github.com/users/aisipos/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2012-03-20T23:14:07Z",
            "updated_at": "2012-03-20T23:14:07Z",
            "author_association": "CONTRIBUTOR",
            "body": "+1 on this issue. datetime objects in particular don't serialize by default, which makes writing JSON API's with jsonify difficult, as this is a common data type in API's.  \n\n+1 to dag 's comment, as a simple answer we would only need to be able to pass a callable to the internal json.dumps call in the 'default' kwarg.\n\n Unfortunately, the way jsonify is currently written, the _args, *_kwargs arguments to jsonify makes it impossible to specify any arguments to the internal json.dumps 'out of band' from your data. I'm not sure how to implement a way to pass in 'default', while at the same time keeping backwards compatibility and allowing 'default' as a key in your data. Perhaps a new json helper, or json oriented extension is needed?\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/4609018",
            "html_url": "https://github.com/pallets/flask/issues/220#issuecomment-4609018",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/220",
            "id": 4609018,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MDkwMTg=",
            "user": {
                "login": "jparise",
                "id": 10311,
                "node_id": "MDQ6VXNlcjEwMzEx",
                "avatar_url": "https://avatars1.githubusercontent.com/u/10311?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/jparise",
                "html_url": "https://github.com/jparise",
                "followers_url": "https://api.github.com/users/jparise/followers",
                "following_url": "https://api.github.com/users/jparise/following{/other_user}",
                "gists_url": "https://api.github.com/users/jparise/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/jparise/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jparise/subscriptions",
                "organizations_url": "https://api.github.com/users/jparise/orgs",
                "repos_url": "https://api.github.com/users/jparise/repos",
                "events_url": "https://api.github.com/users/jparise/events{/privacy}",
                "received_events_url": "https://api.github.com/users/jparise/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2012-03-21T00:59:10Z",
            "updated_at": "2012-03-21T01:00:09Z",
            "author_association": "CONTRIBUTOR",
            "body": "I see a few of options here.\n1. Change `jsonify` to use an explicit [`JSONEncoder`](http://docs.python.org/library/json.html#json.JSONEncoder) object that is provided by the `Flask` class.  There would be a way for people to replace the default `JSONEncoder` object with their own.  This would allow encoding customization such as providing a `default` callback function.\n2. Instead of owning the `JSONEncoder` object, the `Flask` class could just own a `default` callback function that could be replaced by users.  It always be passed to `jsonify` and would default to `None`.\n3. Provide a more advanced JSON encoder registration system as hinted at above.  `@app.json_encoder(DateTime)` could register a function that would be called whenever a `DateTime` object needed encoding.  Flask would provide a `default` function implementation that would honor these registrations which could be passed internally to `json.dumps` in `jsonify`.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/4609523",
            "html_url": "https://github.com/pallets/flask/issues/220#issuecomment-4609523",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/220",
            "id": 4609523,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MDk1MjM=",
            "user": {
                "login": "aisipos",
                "id": 68444,
                "node_id": "MDQ6VXNlcjY4NDQ0",
                "avatar_url": "https://avatars0.githubusercontent.com/u/68444?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/aisipos",
                "html_url": "https://github.com/aisipos",
                "followers_url": "https://api.github.com/users/aisipos/followers",
                "following_url": "https://api.github.com/users/aisipos/following{/other_user}",
                "gists_url": "https://api.github.com/users/aisipos/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/aisipos/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aisipos/subscriptions",
                "organizations_url": "https://api.github.com/users/aisipos/orgs",
                "repos_url": "https://api.github.com/users/aisipos/repos",
                "events_url": "https://api.github.com/users/aisipos/events{/privacy}",
                "received_events_url": "https://api.github.com/users/aisipos/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2012-03-21T01:45:38Z",
            "updated_at": "2012-03-21T01:45:38Z",
            "author_association": "CONTRIBUTOR",
            "body": "While (3) seems quite cool, it is a departure from standard json/simplejson practice, whereas (1) and (2) basically expose standard simplejson customization mechanisms to the user. How about a combination of (1) and (2), where you can specify a JSONEncoder class, or a default callback, or none of the above?\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/4643848",
            "html_url": "https://github.com/pallets/flask/issues/220#issuecomment-4643848",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/220",
            "id": 4643848,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NDM4NDg=",
            "user": {
                "login": "jparise",
                "id": 10311,
                "node_id": "MDQ6VXNlcjEwMzEx",
                "avatar_url": "https://avatars1.githubusercontent.com/u/10311?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/jparise",
                "html_url": "https://github.com/jparise",
                "followers_url": "https://api.github.com/users/jparise/followers",
                "following_url": "https://api.github.com/users/jparise/following{/other_user}",
                "gists_url": "https://api.github.com/users/jparise/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/jparise/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jparise/subscriptions",
                "organizations_url": "https://api.github.com/users/jparise/orgs",
                "repos_url": "https://api.github.com/users/jparise/repos",
                "events_url": "https://api.github.com/users/jparise/events{/privacy}",
                "received_events_url": "https://api.github.com/users/jparise/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2012-03-22T17:27:41Z",
            "updated_at": "2012-03-22T17:27:41Z",
            "author_association": "CONTRIBUTOR",
            "body": "If either **1** or **2** were available, **3** could be implemented by the project or an extension.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/4869334",
            "html_url": "https://github.com/pallets/flask/issues/220#issuecomment-4869334",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/220",
            "id": 4869334,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ4NjkzMzQ=",
            "user": {
                "login": "jfinkels",
                "id": 121755,
                "node_id": "MDQ6VXNlcjEyMTc1NQ==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/121755?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/jfinkels",
                "html_url": "https://github.com/jfinkels",
                "followers_url": "https://api.github.com/users/jfinkels/followers",
                "following_url": "https://api.github.com/users/jfinkels/following{/other_user}",
                "gists_url": "https://api.github.com/users/jfinkels/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/jfinkels/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jfinkels/subscriptions",
                "organizations_url": "https://api.github.com/users/jfinkels/orgs",
                "repos_url": "https://api.github.com/users/jfinkels/repos",
                "events_url": "https://api.github.com/users/jfinkels/events{/privacy}",
                "received_events_url": "https://api.github.com/users/jfinkels/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2012-04-01T20:42:27Z",
            "updated_at": "2012-04-01T22:09:41Z",
            "author_association": "CONTRIBUTOR",
            "body": "Pull request #471 is a first draft of a solution based on option number 1.\n\nBy the way, there now seems to be a fair number of JSON handling functionality in `flask/helpers.py`; should they move to their own module at some point?\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/4875534",
            "html_url": "https://github.com/pallets/flask/issues/220#issuecomment-4875534",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/220",
            "id": 4875534,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ4NzU1MzQ=",
            "user": {
                "login": "passy",
                "id": 9906,
                "node_id": "MDQ6VXNlcjk5MDY=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/9906?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/passy",
                "html_url": "https://github.com/passy",
                "followers_url": "https://api.github.com/users/passy/followers",
                "following_url": "https://api.github.com/users/passy/following{/other_user}",
                "gists_url": "https://api.github.com/users/passy/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/passy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/passy/subscriptions",
                "organizations_url": "https://api.github.com/users/passy/orgs",
                "repos_url": "https://api.github.com/users/passy/repos",
                "events_url": "https://api.github.com/users/passy/events{/privacy}",
                "received_events_url": "https://api.github.com/users/passy/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2012-04-02T10:02:56Z",
            "updated_at": "2012-04-02T10:02:56Z",
            "author_association": "CONTRIBUTOR",
            "body": "Overriding jsonify with a custom function that uses my own JSONEncoder is something most if not all of my Flask projects do. Definitely +1 on the issue. `@app.json_default` or similar would certainly look flask-like, but it I suppose it's not clear what would happen if you use it multiple times.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/12353724",
            "html_url": "https://github.com/pallets/flask/issues/220#issuecomment-12353724",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/220",
            "id": 12353724,
            "node_id": "MDEyOklzc3VlQ29tbWVudDEyMzUzNzI0",
            "user": {
                "login": "sciyoshi",
                "id": 39950,
                "node_id": "MDQ6VXNlcjM5OTUw",
                "avatar_url": "https://avatars0.githubusercontent.com/u/39950?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/sciyoshi",
                "html_url": "https://github.com/sciyoshi",
                "followers_url": "https://api.github.com/users/sciyoshi/followers",
                "following_url": "https://api.github.com/users/sciyoshi/following{/other_user}",
                "gists_url": "https://api.github.com/users/sciyoshi/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/sciyoshi/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/sciyoshi/subscriptions",
                "organizations_url": "https://api.github.com/users/sciyoshi/orgs",
                "repos_url": "https://api.github.com/users/sciyoshi/repos",
                "events_url": "https://api.github.com/users/sciyoshi/events{/privacy}",
                "received_events_url": "https://api.github.com/users/sciyoshi/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2013-01-17T04:11:29Z",
            "updated_at": "2013-01-17T04:11:29Z",
            "author_association": "NONE",
            "body": "This has been implemented in master, where the attribute for the custom JSONEncoder is `app.json_encoder`. This ticket can safely be closed.\n"
        }
    ]
}