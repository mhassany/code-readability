{
    "url": "https://api.github.com/repos/pallets/flask/issues/2027",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/2027/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/2027/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/2027/events",
    "html_url": "https://github.com/pallets/flask/issues/2027",
    "id": 177648512,
    "node_id": "MDU6SXNzdWUxNzc2NDg1MTI=",
    "number": 2027,
    "title": "Update app factory docs for Flask's CLI",
    "user": {
        "login": "untitaker",
        "id": 837573,
        "node_id": "MDQ6VXNlcjgzNzU3Mw==",
        "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/untitaker",
        "html_url": "https://github.com/untitaker",
        "followers_url": "https://api.github.com/users/untitaker/followers",
        "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
        "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
        "organizations_url": "https://api.github.com/users/untitaker/orgs",
        "repos_url": "https://api.github.com/users/untitaker/repos",
        "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
        "received_events_url": "https://api.github.com/users/untitaker/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 380608249,
            "node_id": "MDU6TGFiZWwzODA2MDgyNDk=",
            "url": "https://api.github.com/repos/pallets/flask/labels/cli",
            "name": "cli",
            "color": "1d76db",
            "default": false,
            "description": null
        },
        {
            "id": 32876,
            "node_id": "MDU6TGFiZWwzMjg3Ng==",
            "url": "https://api.github.com/repos/pallets/flask/labels/docs",
            "name": "docs",
            "color": "0e8a16",
            "default": false,
            "description": null
        }
    ],
    "state": "closed",
    "locked": false,
    "assignee": {
        "login": "davidism",
        "id": 1242887,
        "node_id": "MDQ6VXNlcjEyNDI4ODc=",
        "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidism",
        "html_url": "https://github.com/davidism",
        "followers_url": "https://api.github.com/users/davidism/followers",
        "following_url": "https://api.github.com/users/davidism/following{/other_user}",
        "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
        "organizations_url": "https://api.github.com/users/davidism/orgs",
        "repos_url": "https://api.github.com/users/davidism/repos",
        "events_url": "https://api.github.com/users/davidism/events{/privacy}",
        "received_events_url": "https://api.github.com/users/davidism/received_events",
        "type": "User",
        "site_admin": false
    },
    "assignees": [
        {
            "login": "davidism",
            "id": 1242887,
            "node_id": "MDQ6VXNlcjEyNDI4ODc=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/davidism",
            "html_url": "https://github.com/davidism",
            "followers_url": "https://api.github.com/users/davidism/followers",
            "following_url": "https://api.github.com/users/davidism/following{/other_user}",
            "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
            "organizations_url": "https://api.github.com/users/davidism/orgs",
            "repos_url": "https://api.github.com/users/davidism/repos",
            "events_url": "https://api.github.com/users/davidism/events{/privacy}",
            "received_events_url": "https://api.github.com/users/davidism/received_events",
            "type": "User",
            "site_admin": false
        }
    ],
    "milestone": {
        "url": "https://api.github.com/repos/pallets/flask/milestones/2",
        "html_url": "https://github.com/pallets/flask/milestone/2",
        "labels_url": "https://api.github.com/repos/pallets/flask/milestones/2/labels",
        "id": 795954,
        "node_id": "MDk6TWlsZXN0b25lNzk1OTU0",
        "number": 2,
        "title": "1.0",
        "description": "",
        "creator": {
            "login": "untitaker",
            "id": 837573,
            "node_id": "MDQ6VXNlcjgzNzU3Mw==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/untitaker",
            "html_url": "https://github.com/untitaker",
            "followers_url": "https://api.github.com/users/untitaker/followers",
            "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
            "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
            "organizations_url": "https://api.github.com/users/untitaker/orgs",
            "repos_url": "https://api.github.com/users/untitaker/repos",
            "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
            "received_events_url": "https://api.github.com/users/untitaker/received_events",
            "type": "User",
            "site_admin": false
        },
        "open_issues": 0,
        "closed_issues": 159,
        "state": "closed",
        "created_at": "2014-09-19T15:47:20Z",
        "updated_at": "2018-04-26T21:07:44Z",
        "due_on": "2018-04-26T07:00:00Z",
        "closed_at": "2018-04-26T21:07:44Z"
    },
    "comments": 11,
    "created_at": "2016-09-18T12:17:46Z",
    "updated_at": "2017-10-10T18:59:29Z",
    "closed_at": "2017-10-10T18:59:29Z",
    "author_association": "MEMBER",
    "body": "see https://github.com/pallets/flask/pull/1536\n",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/247846173",
            "html_url": "https://github.com/pallets/flask/issues/2027#issuecomment-247846173",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2027",
            "id": 247846173,
            "node_id": "MDEyOklzc3VlQ29tbWVudDI0Nzg0NjE3Mw==",
            "user": {
                "login": "wgwz",
                "id": 10120306,
                "node_id": "MDQ6VXNlcjEwMTIwMzA2",
                "avatar_url": "https://avatars2.githubusercontent.com/u/10120306?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/wgwz",
                "html_url": "https://github.com/wgwz",
                "followers_url": "https://api.github.com/users/wgwz/followers",
                "following_url": "https://api.github.com/users/wgwz/following{/other_user}",
                "gists_url": "https://api.github.com/users/wgwz/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/wgwz/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wgwz/subscriptions",
                "organizations_url": "https://api.github.com/users/wgwz/orgs",
                "repos_url": "https://api.github.com/users/wgwz/repos",
                "events_url": "https://api.github.com/users/wgwz/events{/privacy}",
                "received_events_url": "https://api.github.com/users/wgwz/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2016-09-18T12:56:04Z",
            "updated_at": "2016-09-18T12:56:04Z",
            "author_association": "CONTRIBUTOR",
            "body": "So would best practice be to create a runner/instantiation script? (For using the development server)\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/247846401",
            "html_url": "https://github.com/pallets/flask/issues/2027#issuecomment-247846401",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2027",
            "id": 247846401,
            "node_id": "MDEyOklzc3VlQ29tbWVudDI0Nzg0NjQwMQ==",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2016-09-18T13:01:01Z",
            "updated_at": "2016-09-18T13:01:01Z",
            "author_association": "MEMBER",
            "body": "Yeah. Also I'm not sure why \"multiple instances\" is mentioned as usecase, since we already use locks in Flask to ensure that one app object can be used with more than one server in one process.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/247857920",
            "html_url": "https://github.com/pallets/flask/issues/2027#issuecomment-247857920",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2027",
            "id": 247857920,
            "node_id": "MDEyOklzc3VlQ29tbWVudDI0Nzg1NzkyMA==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2016-09-18T16:32:37Z",
            "updated_at": "2016-09-18T16:36:22Z",
            "author_association": "MEMBER",
            "body": "I create a `FlaskGroup` and add an entry point for it, then use that entry point instead of `flask` to call any commands.\n\n`my_app/app.py`\n\n``` python\nfrom flask import Flask\nfrom flask.cli import FlaskGroup\n\ndef create_app(info=None):\n    app = Flask('my_app')\n    ...\n    return app\n\ncli = FlaskGroup(create_app=create_app)\n```\n\n`setup.py`\n\n``` python\nsetup(\n    ...,\n    entry_points={\n        'console_scripts': [\n            'my_app=my_app:cli.main',\n        ],\n    },\n)\n```\n\n```\npip install -e .\nFLASK_DEBUG=1 my_app run\n```\n\nYou can of course adapt this to use a separate file for the cli so it can be called without installing too, but I'd rather encourage the install pattern.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/247893820",
            "html_url": "https://github.com/pallets/flask/issues/2027#issuecomment-247893820",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2027",
            "id": 247893820,
            "node_id": "MDEyOklzc3VlQ29tbWVudDI0Nzg5MzgyMA==",
            "user": {
                "login": "wgwz",
                "id": 10120306,
                "node_id": "MDQ6VXNlcjEwMTIwMzA2",
                "avatar_url": "https://avatars2.githubusercontent.com/u/10120306?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/wgwz",
                "html_url": "https://github.com/wgwz",
                "followers_url": "https://api.github.com/users/wgwz/followers",
                "following_url": "https://api.github.com/users/wgwz/following{/other_user}",
                "gists_url": "https://api.github.com/users/wgwz/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/wgwz/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wgwz/subscriptions",
                "organizations_url": "https://api.github.com/users/wgwz/orgs",
                "repos_url": "https://api.github.com/users/wgwz/repos",
                "events_url": "https://api.github.com/users/wgwz/events{/privacy}",
                "received_events_url": "https://api.github.com/users/wgwz/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2016-09-19T00:25:56Z",
            "updated_at": "2016-09-19T00:25:56Z",
            "author_association": "CONTRIBUTOR",
            "body": "@davidism how do you make use of the kwarg \"info\"?\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/247895764",
            "html_url": "https://github.com/pallets/flask/issues/2027#issuecomment-247895764",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2027",
            "id": 247895764,
            "node_id": "MDEyOklzc3VlQ29tbWVudDI0Nzg5NTc2NA==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2016-09-19T01:01:09Z",
            "updated_at": "2016-09-19T01:01:09Z",
            "author_association": "MEMBER",
            "body": "I don't, but it has to be there to make Click happy.  I think it can be used to pass data around within Click.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/247897066",
            "html_url": "https://github.com/pallets/flask/issues/2027#issuecomment-247897066",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2027",
            "id": 247897066,
            "node_id": "MDEyOklzc3VlQ29tbWVudDI0Nzg5NzA2Ng==",
            "user": {
                "login": "miguelgrinberg",
                "id": 2715854,
                "node_id": "MDQ6VXNlcjI3MTU4NTQ=",
                "avatar_url": "https://avatars0.githubusercontent.com/u/2715854?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/miguelgrinberg",
                "html_url": "https://github.com/miguelgrinberg",
                "followers_url": "https://api.github.com/users/miguelgrinberg/followers",
                "following_url": "https://api.github.com/users/miguelgrinberg/following{/other_user}",
                "gists_url": "https://api.github.com/users/miguelgrinberg/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/miguelgrinberg/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/miguelgrinberg/subscriptions",
                "organizations_url": "https://api.github.com/users/miguelgrinberg/orgs",
                "repos_url": "https://api.github.com/users/miguelgrinberg/repos",
                "events_url": "https://api.github.com/users/miguelgrinberg/events{/privacy}",
                "received_events_url": "https://api.github.com/users/miguelgrinberg/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2016-09-19T01:24:42Z",
            "updated_at": "2016-09-19T01:24:42Z",
            "author_association": "MEMBER",
            "body": "I think the factory function should be coded in a way that it is straightforward to call directly. I do not like the idea of adding the `ScriptInfo` argument, just because the Click integration code requires it.\n\nI honestly haven't found a way to use an app factory with Click that matches what you can do with Flask-Script. This is how I typically code my app factory functions:\n\n``` python\ndef create_app(config_name=None):\n    if config_name is None:\n        config_name = os.environ.get('FLASK_CONFIG', 'development')\n    app = Flask(__name__)\n    ...\n    return app\n```\n\nWith this structure, Flask-Script can be given the app factory and it will call it without arguments, which runs the `development` configuration unless the `FLASK_CONFIG` environment variable is set to some other configuration. In unit tests, you just call `create_app('testing')` and you get a test ready app. In my opinion this is very handy. Depending on the application, I can add additional arguments to `create_app`, as long as all the arguments have defaults for when Flask-Scripts invokes it.\n\nThe closest I have achieved with Click requires the use of a `wsgi.py` file in which `create_app()` is called explicitly. Obviously Flask never sees the factory function, it gets the app created in wsgi.py, but at least I can write my app factory function with the arguments that I need/want.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/247945526",
            "html_url": "https://github.com/pallets/flask/issues/2027#issuecomment-247945526",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2027",
            "id": 247945526,
            "node_id": "MDEyOklzc3VlQ29tbWVudDI0Nzk0NTUyNg==",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2016-09-19T09:17:54Z",
            "updated_at": "2016-09-19T09:17:54Z",
            "author_association": "MEMBER",
            "body": "I hadn't considered optional arguments even though @mbr pointed that out repeatedly. On that basis we might actually include a basic way to use factories.\n\nOn 19 September 2016 03:24:52 CEST, Miguel Grinberg notifications@github.com wrote:\n\n> I think the factory function should be coded in a way that it is\n> straightforward to call directly. I do not like the idea of adding the\n> `ScriptInfo` argument, just because the Click integration code requires\n> it.\n> \n> I honestly haven't found a way to use an app factory with Click that\n> matches what you can do with Flask-Script. This is how I typically code\n> my app factory functions:\n> \n> ``` python\n> def create_app(config_name=None):\n>    if config_name is None:\n>        config_name = os.environ.get('FLASK_CONFIG', 'development')\n>    app = Flask(__name__)\n>    ...\n>    return app\n> ```\n> \n> With this structure, Flask-Script can be given the app factory and it\n> will call it without arguments, which runs the `development`\n> configuration unless the `FLASK_CONFIG` environment variable is set to\n> some other configuration. In unit tests, you just call\n> `create_app('testing')` and you get a test ready app. In my opinion\n> this is very handy. Depending on the application, I can add additional\n> arguments to `create_app`, as long as all the arguments have defaults\n> for when Flask-Scripts invokes it.\n> \n> The closest I have achieved with Click requires the use of a `wsgi.py`\n> file in which `create_app()` is called explicitly. Obviously Flask\n> never sees the factory function, it gets the app created in wsgi.py,\n> but at least I can write my app factory function with the arguments\n> that I need/want.\n> \n> ## \n> \n> You are receiving this because you authored the thread.\n> Reply to this email directly or view it on GitHub:\n> https://github.com/pallets/flask/issues/2027#issuecomment-247897066\n\n## \n\nSent from my Android device with K-9 Mail. Please excuse my brevity.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/269342478",
            "html_url": "https://github.com/pallets/flask/issues/2027#issuecomment-269342478",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2027",
            "id": 269342478,
            "node_id": "MDEyOklzc3VlQ29tbWVudDI2OTM0MjQ3OA==",
            "user": {
                "login": "wgwz",
                "id": 10120306,
                "node_id": "MDQ6VXNlcjEwMTIwMzA2",
                "avatar_url": "https://avatars2.githubusercontent.com/u/10120306?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/wgwz",
                "html_url": "https://github.com/wgwz",
                "followers_url": "https://api.github.com/users/wgwz/followers",
                "following_url": "https://api.github.com/users/wgwz/following{/other_user}",
                "gists_url": "https://api.github.com/users/wgwz/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/wgwz/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wgwz/subscriptions",
                "organizations_url": "https://api.github.com/users/wgwz/orgs",
                "repos_url": "https://api.github.com/users/wgwz/repos",
                "events_url": "https://api.github.com/users/wgwz/events{/privacy}",
                "received_events_url": "https://api.github.com/users/wgwz/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2016-12-27T15:43:55Z",
            "updated_at": "2016-12-27T15:43:55Z",
            "author_association": "CONTRIBUTOR",
            "body": "@davidism what kind of package structure do you use to add commands to the `cli`? (using the method you outlined above) i.e. do you import the `cli` object from *my_app/app.py* into a separate module and add commands using `@cli`? "
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/276070456",
            "html_url": "https://github.com/pallets/flask/issues/2027#issuecomment-276070456",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2027",
            "id": 276070456,
            "node_id": "MDEyOklzc3VlQ29tbWVudDI3NjA3MDQ1Ng==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2017-01-30T14:06:20Z",
            "updated_at": "2017-01-30T14:06:20Z",
            "author_association": "MEMBER",
            "body": "Cross posting from the .env discussion:\r\n\r\nOne option for making this play nicer with the factory pattern is to allow making a call in the `FLASK_APP` var. Gunicorn and uWSGI allow this. `gunicorn bwportal.app:create_app(where='dev')`"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/276130047",
            "html_url": "https://github.com/pallets/flask/issues/2027#issuecomment-276130047",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2027",
            "id": 276130047,
            "node_id": "MDEyOklzc3VlQ29tbWVudDI3NjEzMDA0Nw==",
            "user": {
                "login": "wgwz",
                "id": 10120306,
                "node_id": "MDQ6VXNlcjEwMTIwMzA2",
                "avatar_url": "https://avatars2.githubusercontent.com/u/10120306?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/wgwz",
                "html_url": "https://github.com/wgwz",
                "followers_url": "https://api.github.com/users/wgwz/followers",
                "following_url": "https://api.github.com/users/wgwz/following{/other_user}",
                "gists_url": "https://api.github.com/users/wgwz/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/wgwz/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wgwz/subscriptions",
                "organizations_url": "https://api.github.com/users/wgwz/orgs",
                "repos_url": "https://api.github.com/users/wgwz/repos",
                "events_url": "https://api.github.com/users/wgwz/events{/privacy}",
                "received_events_url": "https://api.github.com/users/wgwz/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2017-01-30T17:34:30Z",
            "updated_at": "2017-01-30T17:35:18Z",
            "author_association": "CONTRIBUTOR",
            "body": "I would like to be able to do the same with the flask cli:\r\n\r\n    gunicorn -c \"python:config.gunicorn\" --reload \"myapp.app:create_app()\"\r\n\r\n(Not necessarily the config loading, but definitely invoking the app factory)"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/314141002",
            "html_url": "https://github.com/pallets/flask/issues/2027#issuecomment-314141002",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2027",
            "id": 314141002,
            "node_id": "MDEyOklzc3VlQ29tbWVudDMxNDE0MTAwMg==",
            "user": {
                "login": "bovarysme",
                "id": 25013194,
                "node_id": "MDQ6VXNlcjI1MDEzMTk0",
                "avatar_url": "https://avatars1.githubusercontent.com/u/25013194?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/bovarysme",
                "html_url": "https://github.com/bovarysme",
                "followers_url": "https://api.github.com/users/bovarysme/followers",
                "following_url": "https://api.github.com/users/bovarysme/following{/other_user}",
                "gists_url": "https://api.github.com/users/bovarysme/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/bovarysme/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bovarysme/subscriptions",
                "organizations_url": "https://api.github.com/users/bovarysme/orgs",
                "repos_url": "https://api.github.com/users/bovarysme/repos",
                "events_url": "https://api.github.com/users/bovarysme/events{/privacy}",
                "received_events_url": "https://api.github.com/users/bovarysme/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2017-07-10T15:26:04Z",
            "updated_at": "2017-07-10T15:26:04Z",
            "author_association": "CONTRIBUTOR",
            "body": "After reading this thread and mixing @davidism and @miguelgrinberg ideas, I have been using the following structure which allows to:\r\n- write an app factory function without the `ScriptInfo` argument,\r\n- load the correct app config via `FLASK_CONFIG`,\r\n- write as many CLI commands as needed,\r\n- and run in debug mode with `app --debug run`.\r\n\r\nThat way, I don't have to ever set `FLASK_APP` or `FLASK_DEBUG`.\r\n\r\n`app/__init__.py`:\r\n```python\r\ndef create_app(config_name=None):\r\n    if not config_name:\r\n        config_name = os.environ.get('FLASK_CONFIG', 'development')\r\n    app = Flask(__name__)\r\n    # \u2026\r\n    return app\r\n```\r\n\r\n`app/commands.py`:\r\n```python\r\ndef create_cli_app(info):\r\n    return create_app()\r\n\r\n\r\n@click.group(cls=FlaskGroup, create_app=create_cli_app)\r\n@click.option('--debug', is_flag=True, default=False)\r\ndef cli(debug):\r\n    if debug:\r\n        os.environ['FLASK_DEBUG'] = '1'\r\n\r\n\r\n@cli.command()\r\ndef initdb():\r\n    \"\"\"Initialize the database.\"\"\"\r\n    db.create_all()\r\n\r\n# \u2026\r\n\r\nif __name__ == '__main__':\r\n    cli()\r\n```\r\n\r\n`setup.py`:\r\n```python\r\nsetup(\r\n    # \u2026\r\n    entry_points={\r\n        'console_scripts': [\r\n            'app=app.commands:cli',\r\n        ],\r\n    },\r\n)\r\n```"
        }
    ]
}