{
    "url": "https://api.github.com/repos/pallets/flask/issues/1494",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/1494/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/1494/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/1494/events",
    "html_url": "https://github.com/pallets/flask/issues/1494",
    "id": 87169027,
    "node_id": "MDU6SXNzdWU4NzE2OTAyNw==",
    "number": 1494,
    "title": "Handling HTTP 405 on the blueprint level",
    "user": {
        "login": "jmagnusson",
        "id": 190835,
        "node_id": "MDQ6VXNlcjE5MDgzNQ==",
        "avatar_url": "https://avatars3.githubusercontent.com/u/190835?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jmagnusson",
        "html_url": "https://github.com/jmagnusson",
        "followers_url": "https://api.github.com/users/jmagnusson/followers",
        "following_url": "https://api.github.com/users/jmagnusson/following{/other_user}",
        "gists_url": "https://api.github.com/users/jmagnusson/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jmagnusson/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jmagnusson/subscriptions",
        "organizations_url": "https://api.github.com/users/jmagnusson/orgs",
        "repos_url": "https://api.github.com/users/jmagnusson/repos",
        "events_url": "https://api.github.com/users/jmagnusson/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jmagnusson/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 357932495,
            "node_id": "MDU6TGFiZWwzNTc5MzI0OTU=",
            "url": "https://api.github.com/repos/pallets/flask/labels/blueprints",
            "name": "blueprints",
            "color": "1d76db",
            "default": false,
            "description": null
        }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 7,
    "created_at": "2015-06-11T01:35:47Z",
    "updated_at": "2017-06-01T04:41:18Z",
    "closed_at": "2017-06-01T04:41:18Z",
    "author_association": "NONE",
    "body": "I really like being able to override the error templates for each blueprint using their errorhandler methods. All error codes work great for me. Except one. 405's are _AFAIK_ not catchable by the blueprint. This is a bit unfortunate when you have a JSON REST API where you want your consumers to be able to parse the data that they get back.\n\n[This line in `werkzeug.routing`](https://github.com/mitsuhiko/werkzeug/blob/2b2d921eea7d1f896ce436ec5238890abe8b81bf/werkzeug/routing.py#L1558) is where the exception is raised. I feel a bit lost about the whole flow of a request in werkzeug/flask and don't really have any idea what I could do to be able to catch it in the Blueprint. Is this a bug? A known \"feature\"? Or am I doing something wrong?\n\nHere's a test case which shows this behavior:\n\n``` python\nimport unittest\nfrom flask import Flask, Blueprint, request\n\napp = Flask(__name__)\nmyblueprint = Blueprint('myblueprint', __name__)\n\n\n@myblueprint.route('/', methods=['GET'])\ndef hello():\n    return 'hello world!'\n\nmyblueprint.errorhandler(405)(lambda e: ('myblueprint 405', 405))\napp.register_blueprint(myblueprint)\napp.errorhandler(405)(lambda e: ('app 405', 405))\n\n\nclass BlueprintOrAppTestCase(unittest.TestCase):\n\n    def setUp(self):\n        self.client = app.test_client()\n\n    def test_200(self):\n        resp = self.client.get('/')\n        self.assertEqual(resp.status_code, 200)\n\n    def test_405(self):\n        with app.test_client() as client:\n            resp = client.post('/?http405')\n            self.assertEqual(resp.status_code, 405)\n            self.assertEqual(resp.get_data(True), 'myblueprint 405')\n            self.assertEqual(request.blueprint, 'myblueprint')\n\n\nif __name__ == '__main__':\n    # app.run(use_reloader=True)\n    unittest.main()\n```\n\nRunning this gives:\n\n``` python-traceback\n.F\n======================================================================\nFAIL: test_405 (__main__.BlueprintOrAppTestCase)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"test.py\", line 30, in test_405\n    self.assertEqual(resp.get_data(True), 'myblueprint 405')\nAssertionError: 'app 405' != 'myblueprint 405'\n- app 405\n+ myblueprint 405\n\n\n----------------------------------------------------------------------\nRan 2 tests in 0.013s\n\nFAILED (failures=1)\n```\n\nA version which tests more error codes can be found [in this gist](https://gist.github.com/jmagnusson/477d209ca3cee464674d).\n",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/111702004",
            "html_url": "https://github.com/pallets/flask/issues/1494#issuecomment-111702004",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1494",
            "id": 111702004,
            "node_id": "MDEyOklzc3VlQ29tbWVudDExMTcwMjAwNA==",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-06-13T11:52:39Z",
            "updated_at": "2015-06-13T11:52:39Z",
            "author_association": "MEMBER",
            "body": "It certainly seems like a rough edge, similar to #1498 \n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/111709489",
            "html_url": "https://github.com/pallets/flask/issues/1494#issuecomment-111709489",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1494",
            "id": 111709489,
            "node_id": "MDEyOklzc3VlQ29tbWVudDExMTcwOTQ4OQ==",
            "user": {
                "login": "jmagnusson",
                "id": 190835,
                "node_id": "MDQ6VXNlcjE5MDgzNQ==",
                "avatar_url": "https://avatars3.githubusercontent.com/u/190835?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/jmagnusson",
                "html_url": "https://github.com/jmagnusson",
                "followers_url": "https://api.github.com/users/jmagnusson/followers",
                "following_url": "https://api.github.com/users/jmagnusson/following{/other_user}",
                "gists_url": "https://api.github.com/users/jmagnusson/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/jmagnusson/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jmagnusson/subscriptions",
                "organizations_url": "https://api.github.com/users/jmagnusson/orgs",
                "repos_url": "https://api.github.com/users/jmagnusson/repos",
                "events_url": "https://api.github.com/users/jmagnusson/events{/privacy}",
                "received_events_url": "https://api.github.com/users/jmagnusson/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-06-13T13:08:14Z",
            "updated_at": "2015-06-13T13:08:14Z",
            "author_association": "NONE",
            "body": "Kind of, but at least there we know of [a workaround](https://github.com/mitsuhiko/flask/issues/1498#issuecomment-111709325).\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/114530847",
            "html_url": "https://github.com/pallets/flask/issues/1494#issuecomment-114530847",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1494",
            "id": 114530847,
            "node_id": "MDEyOklzc3VlQ29tbWVudDExNDUzMDg0Nw==",
            "user": {
                "login": "svieira",
                "id": 143435,
                "node_id": "MDQ6VXNlcjE0MzQzNQ==",
                "avatar_url": "https://avatars3.githubusercontent.com/u/143435?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/svieira",
                "html_url": "https://github.com/svieira",
                "followers_url": "https://api.github.com/users/svieira/followers",
                "following_url": "https://api.github.com/users/svieira/following{/other_user}",
                "gists_url": "https://api.github.com/users/svieira/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/svieira/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/svieira/subscriptions",
                "organizations_url": "https://api.github.com/users/svieira/orgs",
                "repos_url": "https://api.github.com/users/svieira/repos",
                "events_url": "https://api.github.com/users/svieira/events{/privacy}",
                "received_events_url": "https://api.github.com/users/svieira/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-06-23T14:43:59Z",
            "updated_at": "2015-06-23T14:43:59Z",
            "author_association": "CONTRIBUTOR",
            "body": "@jmagnusson - the way to work around this (just like in #1498) is to compose distinct Flask _applications_, rather than trying to make a blueprint handle 405s.\n\n@untitaker - I think one way to help people for whom this is an issue (for 1.x or 1.0 if that ship hasn't sailed yet) would be to add a new registration method to `flask.Flask` that does [app composition](http://flask.pocoo.org/docs/0.10/patterns/appdispatch/) from another app or a blueprint.  Something like `app.mount_app(bp_or_app, url_prefix=None, subdomain=None, **config_args)`  Doing something like this could also help with issues like #1507 as well.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/114534080",
            "html_url": "https://github.com/pallets/flask/issues/1494#issuecomment-114534080",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1494",
            "id": 114534080,
            "node_id": "MDEyOklzc3VlQ29tbWVudDExNDUzNDA4MA==",
            "user": {
                "login": "jmagnusson",
                "id": 190835,
                "node_id": "MDQ6VXNlcjE5MDgzNQ==",
                "avatar_url": "https://avatars3.githubusercontent.com/u/190835?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/jmagnusson",
                "html_url": "https://github.com/jmagnusson",
                "followers_url": "https://api.github.com/users/jmagnusson/followers",
                "following_url": "https://api.github.com/users/jmagnusson/following{/other_user}",
                "gists_url": "https://api.github.com/users/jmagnusson/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/jmagnusson/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jmagnusson/subscriptions",
                "organizations_url": "https://api.github.com/users/jmagnusson/orgs",
                "repos_url": "https://api.github.com/users/jmagnusson/repos",
                "events_url": "https://api.github.com/users/jmagnusson/events{/privacy}",
                "received_events_url": "https://api.github.com/users/jmagnusson/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-06-23T14:56:55Z",
            "updated_at": "2015-06-23T14:56:55Z",
            "author_association": "NONE",
            "body": "@svieira Interesting idea about using app composition. However, don't we miss out on features like linking between them with `url_for`?\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/114537229",
            "html_url": "https://github.com/pallets/flask/issues/1494#issuecomment-114537229",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1494",
            "id": 114537229,
            "node_id": "MDEyOklzc3VlQ29tbWVudDExNDUzNzIyOQ==",
            "user": {
                "login": "svieira",
                "id": 143435,
                "node_id": "MDQ6VXNlcjE0MzQzNQ==",
                "avatar_url": "https://avatars3.githubusercontent.com/u/143435?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/svieira",
                "html_url": "https://github.com/svieira",
                "followers_url": "https://api.github.com/users/svieira/followers",
                "following_url": "https://api.github.com/users/svieira/following{/other_user}",
                "gists_url": "https://api.github.com/users/svieira/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/svieira/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/svieira/subscriptions",
                "organizations_url": "https://api.github.com/users/svieira/orgs",
                "repos_url": "https://api.github.com/users/svieira/repos",
                "events_url": "https://api.github.com/users/svieira/events{/privacy}",
                "received_events_url": "https://api.github.com/users/svieira/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-06-23T15:06:10Z",
            "updated_at": "2015-06-23T15:06:10Z",
            "author_association": "CONTRIBUTOR",
            "body": "You would need to add to the set of [`Flask.url_build_error_handlers`](http://flask.pocoo.org/docs/0.10/api/#flask.Flask.url_build_error_handlers) so that the parent app (at least) could use `url_for` to route to the children.  You _could_ also update the children so the children could route to the parents, but that's probably not a good idea in the general case (too much magic to avoid the infinite recursion problem + the children shouldn't be aware of the parents if they really are stand-alone applications that just happen to be mounted together for convenience)\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/114557334",
            "html_url": "https://github.com/pallets/flask/issues/1494#issuecomment-114557334",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1494",
            "id": 114557334,
            "node_id": "MDEyOklzc3VlQ29tbWVudDExNDU1NzMzNA==",
            "user": {
                "login": "jmagnusson",
                "id": 190835,
                "node_id": "MDQ6VXNlcjE5MDgzNQ==",
                "avatar_url": "https://avatars3.githubusercontent.com/u/190835?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/jmagnusson",
                "html_url": "https://github.com/jmagnusson",
                "followers_url": "https://api.github.com/users/jmagnusson/followers",
                "following_url": "https://api.github.com/users/jmagnusson/following{/other_user}",
                "gists_url": "https://api.github.com/users/jmagnusson/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/jmagnusson/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jmagnusson/subscriptions",
                "organizations_url": "https://api.github.com/users/jmagnusson/orgs",
                "repos_url": "https://api.github.com/users/jmagnusson/repos",
                "events_url": "https://api.github.com/users/jmagnusson/events{/privacy}",
                "received_events_url": "https://api.github.com/users/jmagnusson/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-06-23T16:02:32Z",
            "updated_at": "2015-06-23T16:02:39Z",
            "author_association": "NONE",
            "body": "Sounds somewhat messy. I kind of like the simplicity we have today where we just add Blueprints to our app to add more HTTP endpoints.\n\nCouldn't there be some other way to make 405 catchable? An idea I have is that we make Flask create \"fake routes\" for each method in the [url_map](http://flask.pocoo.org/docs/0.10/api/#flask.Flask.url_map). This would make it work a bit like [your workaround](https://github.com/mitsuhiko/flask/issues/1498#issuecomment-111709325) for 404s not being catched by the blueprints.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/114568793",
            "html_url": "https://github.com/pallets/flask/issues/1494#issuecomment-114568793",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1494",
            "id": 114568793,
            "node_id": "MDEyOklzc3VlQ29tbWVudDExNDU2ODc5Mw==",
            "user": {
                "login": "svieira",
                "id": 143435,
                "node_id": "MDQ6VXNlcjE0MzQzNQ==",
                "avatar_url": "https://avatars3.githubusercontent.com/u/143435?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/svieira",
                "html_url": "https://github.com/svieira",
                "followers_url": "https://api.github.com/users/svieira/followers",
                "following_url": "https://api.github.com/users/svieira/following{/other_user}",
                "gists_url": "https://api.github.com/users/svieira/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/svieira/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/svieira/subscriptions",
                "organizations_url": "https://api.github.com/users/svieira/orgs",
                "repos_url": "https://api.github.com/users/svieira/repos",
                "events_url": "https://api.github.com/users/svieira/events{/privacy}",
                "received_events_url": "https://api.github.com/users/svieira/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-06-23T16:49:19Z",
            "updated_at": "2015-06-23T16:49:19Z",
            "author_association": "CONTRIBUTOR",
            "body": "You're absolutely right, you _could_ iterate over all the defined routes in a blueprint and add a route handler for the `url + (all_possible_http_methods - route_accepted_methods)`.  However, [as it currently stands](https://github.com/mitsuhiko/flask/blob/595fb7e1fac3eea207816a700565f6a549e160d3/flask/blueprints.py#L166-L173) Flask does not make this easy.  The routes in a Blueprint [are stored as a closure that will just call `BlueprintSetupState.add_url_rule` when the Blueprint is registered on the application](https://github.com/mitsuhiko/flask/blob/595fb7e1fac3eea207816a700565f6a549e160d3/flask/blueprints.py#L166-L173) ... and the `add_url_rule` method of `BlueprintSetupState` basically just forwards on its arguments to `Flask.add_url_rule`.\n\nSo you are left with either:\n- Reflecting the nonlocals of the lambda function of each entry in [`Blueprint.deferred_functions`](https://github.com/mitsuhiko/flask/blob/595fb7e1fac3eea207816a700565f6a549e160d3/flask/blueprints.py#L103)\n- Overriding `add_url_rule` and `register` for your Blueprint sub-class to store the extra meta-data and register the 405 method handlers.\n"
        }
    ]
}