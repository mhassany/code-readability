{
    "url": "https://api.github.com/repos/pallets/flask/issues/824",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/824/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/824/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/824/events",
    "html_url": "https://github.com/pallets/flask/issues/824",
    "id": 17693672,
    "node_id": "MDU6SXNzdWUxNzY5MzY3Mg==",
    "number": 824,
    "title": "url_for(*args, _external=True) doesn't add the port to the full url",
    "user": {
        "login": "celestian02",
        "id": 1412285,
        "node_id": "MDQ6VXNlcjE0MTIyODU=",
        "avatar_url": "https://avatars3.githubusercontent.com/u/1412285?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/celestian02",
        "html_url": "https://github.com/celestian02",
        "followers_url": "https://api.github.com/users/celestian02/followers",
        "following_url": "https://api.github.com/users/celestian02/following{/other_user}",
        "gists_url": "https://api.github.com/users/celestian02/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/celestian02/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/celestian02/subscriptions",
        "organizations_url": "https://api.github.com/users/celestian02/orgs",
        "repos_url": "https://api.github.com/users/celestian02/repos",
        "events_url": "https://api.github.com/users/celestian02/events{/privacy}",
        "received_events_url": "https://api.github.com/users/celestian02/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 8,
    "created_at": "2013-08-06T14:41:11Z",
    "updated_at": "2017-05-20T23:23:04Z",
    "closed_at": "2014-11-01T15:49:07Z",
    "author_association": "NONE",
    "body": "When using url_for with _external argument set to \"True\", the returned url does not contain the port which defaults the url to port 80.\n\nI have read a few posts regarding this and it was because people were not specifying the full \"SERVER_NAME\" but I didn't set it.\n\nAt first, I was creating an app context to use url_for but it told me I had to set my server name but I can't set it as it might be dynamic upon a user configuration.\n\nAnyhow, what I did was to create an app context and create a test_request context to use url_for which gave me the whole URL without the port.\n",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/22278290",
            "html_url": "https://github.com/pallets/flask/issues/824#issuecomment-22278290",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/824",
            "id": 22278290,
            "node_id": "MDEyOklzc3VlQ29tbWVudDIyMjc4Mjkw",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2013-08-07T19:44:42Z",
            "updated_at": "2013-08-07T19:44:42Z",
            "author_association": "MEMBER",
            "body": "To clarify, this happens when listening to a different port like 5000?\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/22338572",
            "html_url": "https://github.com/pallets/flask/issues/824#issuecomment-22338572",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/824",
            "id": 22338572,
            "node_id": "MDEyOklzc3VlQ29tbWVudDIyMzM4NTcy",
            "user": {
                "login": "mitsuhiko",
                "id": 7396,
                "node_id": "MDQ6VXNlcjczOTY=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/7396?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/mitsuhiko",
                "html_url": "https://github.com/mitsuhiko",
                "followers_url": "https://api.github.com/users/mitsuhiko/followers",
                "following_url": "https://api.github.com/users/mitsuhiko/following{/other_user}",
                "gists_url": "https://api.github.com/users/mitsuhiko/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/mitsuhiko/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mitsuhiko/subscriptions",
                "organizations_url": "https://api.github.com/users/mitsuhiko/orgs",
                "repos_url": "https://api.github.com/users/mitsuhiko/repos",
                "events_url": "https://api.github.com/users/mitsuhiko/events{/privacy}",
                "received_events_url": "https://api.github.com/users/mitsuhiko/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2013-08-08T17:05:39Z",
            "updated_at": "2013-08-08T17:05:39Z",
            "author_association": "MEMBER",
            "body": "I am not sure what the problem is you're describing.  Do you have a testcase of what is broken?\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/22482289",
            "html_url": "https://github.com/pallets/flask/issues/824#issuecomment-22482289",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/824",
            "id": 22482289,
            "node_id": "MDEyOklzc3VlQ29tbWVudDIyNDgyMjg5",
            "user": {
                "login": "celestian02",
                "id": 1412285,
                "node_id": "MDQ6VXNlcjE0MTIyODU=",
                "avatar_url": "https://avatars3.githubusercontent.com/u/1412285?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/celestian02",
                "html_url": "https://github.com/celestian02",
                "followers_url": "https://api.github.com/users/celestian02/followers",
                "following_url": "https://api.github.com/users/celestian02/following{/other_user}",
                "gists_url": "https://api.github.com/users/celestian02/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/celestian02/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/celestian02/subscriptions",
                "organizations_url": "https://api.github.com/users/celestian02/orgs",
                "repos_url": "https://api.github.com/users/celestian02/repos",
                "events_url": "https://api.github.com/users/celestian02/events{/privacy}",
                "received_events_url": "https://api.github.com/users/celestian02/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2013-08-12T09:37:01Z",
            "updated_at": "2013-08-12T09:49:41Z",
            "author_association": "NONE",
            "body": "Sorry if I didn't make myself clear enough. Let's say, I am running a webserver on the following host:port: **192.168.1.4:5000**\n\n``` python\napp.run(host=192.18.1.4, port=5000)\n```\n\nBasically, if I use **url_for(endpoint='settings')**, it will return the relative url for that given endpoint:\n\n``` python\nprint url_for('settings')\n>> /settings\n```\n\nNow, what I would like is to return the full external URL such as: **http://192.168.1.4:5000/settings** and I happen to understand the _external parameter is exactly for what I try to achieve. But, from my experience, it would return:\n\n``` python\nprint url_for('settings', _external=True)\n>> http://192.168.1.4/settings\n```\n\nWhich, in my case, is not the valid external URL because it is missing the port, or, more precisely, Flask appears to assume it always run on port 80 and does not take into account the application's port (here: 5000)\nWhat I assumed, it should return:\n\n``` python\nprint url_for('settings', _external=True)\n>> http://192.168.1.4:5000/settings\n```\n\nNow, I also **url_for** may use **SERVER_NAME** (and not **SERVER_PORT??) when _external is set to True so that anyone can set the SERVER_NAME (i.e. 192.168.1.4:5:5000) and then, my expected external URL would be correct.\n\nBut, in my case, this is a standalone webserver and user can define whichever host/port they want and although I could make it so that my code returns and update the flask configuration dict, I woud like to believe, when there is an issue/bug here:\n- First, when SERVER_NAME/SERVER_PORT are not used:\n  Shouldn't the url_for return: **http://host:port/endpoint_relative_url**\n- Second, when SERVER_NAME is used:\n  Shouldn't the url_for return: **http://SERVER_NAME:SERVER_PORT/endpoint_relative_url\n\nNote: I haven't tested all the usecase when using SERVER_NAME/PORT so it might works that way already but it didn't appear so.\n\nThe first usecase is the one I am raising this issue about and is surely not working that way although it might be intended by you but then, I would be grateful to have some clarification/explanations! Thank you:\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/61372039",
            "html_url": "https://github.com/pallets/flask/issues/824#issuecomment-61372039",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/824",
            "id": 61372039,
            "node_id": "MDEyOklzc3VlQ29tbWVudDYxMzcyMDM5",
            "user": {
                "login": "romuald",
                "id": 113200,
                "node_id": "MDQ6VXNlcjExMzIwMA==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/113200?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/romuald",
                "html_url": "https://github.com/romuald",
                "followers_url": "https://api.github.com/users/romuald/followers",
                "following_url": "https://api.github.com/users/romuald/following{/other_user}",
                "gists_url": "https://api.github.com/users/romuald/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/romuald/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/romuald/subscriptions",
                "organizations_url": "https://api.github.com/users/romuald/orgs",
                "repos_url": "https://api.github.com/users/romuald/repos",
                "events_url": "https://api.github.com/users/romuald/events{/privacy}",
                "received_events_url": "https://api.github.com/users/romuald/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-11-01T15:38:44Z",
            "updated_at": "2014-11-01T15:38:44Z",
            "author_association": "NONE",
            "body": "As far as I can see, I don't have this problem (with version 0.10.1), `url_for('thingy', _external=True)` adds the correct port / host set in `app.run`\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/61372378",
            "html_url": "https://github.com/pallets/flask/issues/824#issuecomment-61372378",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/824",
            "id": 61372378,
            "node_id": "MDEyOklzc3VlQ29tbWVudDYxMzcyMzc4",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-11-01T15:49:07Z",
            "updated_at": "2014-11-01T15:49:07Z",
            "author_association": "MEMBER",
            "body": "Yeah, me neither. Downgrading Werkzeug to 0.5 didn't introduce this issue either.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/68103351",
            "html_url": "https://github.com/pallets/flask/issues/824#issuecomment-68103351",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/824",
            "id": 68103351,
            "node_id": "MDEyOklzc3VlQ29tbWVudDY4MTAzMzUx",
            "user": {
                "login": "newhouse",
                "id": 2524009,
                "node_id": "MDQ6VXNlcjI1MjQwMDk=",
                "avatar_url": "https://avatars3.githubusercontent.com/u/2524009?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/newhouse",
                "html_url": "https://github.com/newhouse",
                "followers_url": "https://api.github.com/users/newhouse/followers",
                "following_url": "https://api.github.com/users/newhouse/following{/other_user}",
                "gists_url": "https://api.github.com/users/newhouse/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/newhouse/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/newhouse/subscriptions",
                "organizations_url": "https://api.github.com/users/newhouse/orgs",
                "repos_url": "https://api.github.com/users/newhouse/repos",
                "events_url": "https://api.github.com/users/newhouse/events{/privacy}",
                "received_events_url": "https://api.github.com/users/newhouse/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-12-25T13:27:57Z",
            "updated_at": "2014-12-25T13:33:15Z",
            "author_association": "NONE",
            "body": "Hey, just seeing this thread now while trying to tackle a similar problem in a python/flask/_celery_ instance.  In my issue (which @celestian02 may or may not have neglected to mention as part of his issue - either way, the following still describes _my_ issue from here on out) I was trying to add URLs to emails that were being sent by a celery task.  For emails sent from within the live app, using `url_for('thingy', _external=True)` works just fine.  No surprise there.  But with no context of the app present in a celery task (even after including an `import app from my_app_module`) I was getting errors.  \n\nThis answer (http://stackoverflow.com/a/16222783/1427426) got me on to the idea of running \"in test request context\" and using `_external=True` to get the absolute URL.  I also needed the _PORT_ to show up, but it wasn't.  This article (https://julo.ch/blog/why-flask-can-suck/) helped me think about how to get it to add the _PORT_ to this, which is also how I found this question we are reading now.  Here's the code that I used to solve this problem:\n\n``` python\n# In some module of mine, let's call it `my_utils`\nfrom my_app_package import app    # Flask app\nfrom my_app_config import PORT    # The port I know I'm on - you can even do some logic to figure out which it is/should be.  This should probably be available via Flask, however?\nfrom flask import url_for    # What we're trying to get t work\n\n\ndef my_url_for(*args, **kwargs):\n    with app.test_request_context():\n        # With the test request context of the app\n        kwargs['_external'] = True    # Add the _external=True keyword argument to whatever else was passed\n        url = url_for(*args, **kwargs)    # Get the URL\n        if PORT is not None:    # If we have a port, we should do something\n            url = url.replace('://localhost/', '://localhost:%d/' % (PORT))    # Oh yeah, add the port to the URL!\n            # I only need to add the port to when I'm running locally, but you could use a regex here to add the port to any servername, if you have that type of setup\n\n        return url\n```\n\nThis then allows me to use this in the following way:\n\n``` python\n# In my celery task definitions\nfrom my_utils import my_url_for\n...    # more imports\n\ndef my_celery_task():\n    message = '<a href=\"%s\">Click here!</a>' % (my_url_for('some_endpoint', arg1=val1, arg2=val2))\n    send_email(message)\n```\n\nThis creates URLs with the hostname and port!\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/200529986",
            "html_url": "https://github.com/pallets/flask/issues/824#issuecomment-200529986",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/824",
            "id": 200529986,
            "node_id": "MDEyOklzc3VlQ29tbWVudDIwMDUyOTk4Ng==",
            "user": {
                "login": "beager",
                "id": 1027710,
                "node_id": "MDQ6VXNlcjEwMjc3MTA=",
                "avatar_url": "https://avatars3.githubusercontent.com/u/1027710?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/beager",
                "html_url": "https://github.com/beager",
                "followers_url": "https://api.github.com/users/beager/followers",
                "following_url": "https://api.github.com/users/beager/following{/other_user}",
                "gists_url": "https://api.github.com/users/beager/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/beager/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/beager/subscriptions",
                "organizations_url": "https://api.github.com/users/beager/orgs",
                "repos_url": "https://api.github.com/users/beager/repos",
                "events_url": "https://api.github.com/users/beager/events{/privacy}",
                "received_events_url": "https://api.github.com/users/beager/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2016-03-23T20:25:50Z",
            "updated_at": "2016-03-23T20:25:50Z",
            "author_association": "NONE",
            "body": "Here to comment because @newhouse's solution, while it appears to work, does create a hacked version of `url_for` which smells nasty. In my python/flask/celery environment, as long as I'm also providing an `app.config['SERVER_NAME']` with the port in my development environment, `url_for` within `app.test_request_context()` in celery tasks behaves properly and has the correct port:\n\n``` python\n# config_local.py\n...\nSERVER_NAME = 'localhost:5000'\n```\n\n``` python\n# tasks.py\nfrom my_app_package import app, celery\n\n@celery.task\ndef my_task():\n    with app.test_request_context('/path'):\n        url = url_for('module.route', _external=True) # returns 'http://localhost:5000/module/route'\n```\n\nDefinitely a bit of a windy road to sort this out for celery users, test cases, or anything that runs afoul of the assumption that anything will go through `app.run()` and provide a port\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/302904753",
            "html_url": "https://github.com/pallets/flask/issues/824#issuecomment-302904753",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/824",
            "id": 302904753,
            "node_id": "MDEyOklzc3VlQ29tbWVudDMwMjkwNDc1Mw==",
            "user": {
                "login": "bepetersn",
                "id": 1389463,
                "node_id": "MDQ6VXNlcjEzODk0NjM=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1389463?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/bepetersn",
                "html_url": "https://github.com/bepetersn",
                "followers_url": "https://api.github.com/users/bepetersn/followers",
                "following_url": "https://api.github.com/users/bepetersn/following{/other_user}",
                "gists_url": "https://api.github.com/users/bepetersn/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/bepetersn/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bepetersn/subscriptions",
                "organizations_url": "https://api.github.com/users/bepetersn/orgs",
                "repos_url": "https://api.github.com/users/bepetersn/repos",
                "events_url": "https://api.github.com/users/bepetersn/events{/privacy}",
                "received_events_url": "https://api.github.com/users/bepetersn/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2017-05-20T23:19:57Z",
            "updated_at": "2017-05-20T23:23:04Z",
            "author_association": "NONE",
            "body": "Here's a solution I came up with to fix a similar issue I had with passing `_external` to `url_for`, in this case to get it to use the same scheme as my application. It's basically similar to the above suggestion, but I think it's a little cleaner (because it doesn't rely on `replace`) & could be extended for port issues, etc. \r\n\r\nAlso as my function name suggests, it's not `my_url_for`, it's `external_url_for`, because flask hasn't provided us with a better way to actually get that without patching it. Slightly less code smell, if you change how you think about it.\r\n\r\n```python\r\ndef external_url_for(view, **kwargs):\r\n    \"\"\" Takes a view function name, like `flask.url_for`,\r\n        and returns that view function's URL prefixed \r\n        with the full & correct scheme and domain. \"\"\"\r\n    parsed_url = urlparse(\r\n            url_for(view, _external=True, **kwargs))\r\n    app_scheme = urlparse(\r\n            current_app.config['HOST']).scheme\r\n    final_parsed_url = parsed_url._replace(scheme=app_scheme)\r\n    return final_parsed_url.geturl()\r\n```\r\nP.S. I realize this doesn't tackle the app/request context issues. I didn't need to use it in celery tasks.\r\n\r\n"
        }
    ]
}