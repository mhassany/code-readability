{
    "url": "https://api.github.com/repos/pallets/flask/issues/984",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/984/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/984/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/984/events",
    "html_url": "https://github.com/pallets/flask/issues/984",
    "id": 27914373,
    "node_id": "MDU6SXNzdWUyNzkxNDM3Mw==",
    "number": 984,
    "title": "Teardown functions sometimes receive spurious exceptions from Gunicorn",
    "user": {
        "login": "astonm",
        "id": 1728824,
        "node_id": "MDQ6VXNlcjE3Mjg4MjQ=",
        "avatar_url": "https://avatars1.githubusercontent.com/u/1728824?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/astonm",
        "html_url": "https://github.com/astonm",
        "followers_url": "https://api.github.com/users/astonm/followers",
        "following_url": "https://api.github.com/users/astonm/following{/other_user}",
        "gists_url": "https://api.github.com/users/astonm/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/astonm/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/astonm/subscriptions",
        "organizations_url": "https://api.github.com/users/astonm/orgs",
        "repos_url": "https://api.github.com/users/astonm/repos",
        "events_url": "https://api.github.com/users/astonm/events{/privacy}",
        "received_events_url": "https://api.github.com/users/astonm/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 4,
    "created_at": "2014-02-19T22:10:17Z",
    "updated_at": "2016-06-03T09:03:11Z",
    "closed_at": "2016-06-03T09:03:11Z",
    "author_association": "NONE",
    "body": "While using Flask-SQLAlchemy's `SQLALCHEMY_COMMIT_ON_TEARDOWN` feature, I noticed certain successful-looking requests didn't have their results committed to the database. After further investigation I discovered some exceptions from Gunicorn end up being passed into the teardown function Flask-SQLAlchemy uses to implement the post-request commit functionality.\n\nI was able to reproduce the issue on a minimal case with the code below (as test.py):\n\n``` python\nfrom flask import Flask, redirect, request, url_for\n\napp = Flask(__name__)\napp.debug = True\n\n@app.route(\"/\")\ndef index():\n    return \"Hello World!\"\n\n@app.teardown_request\ndef teardown_request(exception=None):\n    if exception:\n        app.logger.error(\"Unexpected exception {}\".format(exception))\n\nif __name__ == \"__main__\":\n    app.run()\n```\n\nWith the app run with the following line:\n\n`gunicorn test:app -w 1`\n\nI fairly consistently get the following output:\n\n```\n2014-02-19 14:00:34 [4459] [INFO] Starting gunicorn 18.0\n2014-02-19 14:00:34 [4459] [INFO] Listening at: http://127.0.0.1:8000 (4459)\n2014-02-19 14:00:34 [4459] [INFO] Using worker: sync\n2014-02-19 14:00:34 [4462] [INFO] Booting worker with pid: 4462\n--------------------------------------------------------------------------------\nERROR in test [/Users/aston/.envs/flask-gunicorn-bug/test.py:12]:\nUnexpected exception [Errno 35] Resource temporarily unavailable\n--------------------------------------------------------------------------------\n```\n\nErrno 35 is EAGAIN.\n\nI'm running on a Mac, but I first noticed this behavior on Heroku (it's Errno 11 there). Also, the behavior isn't consistent, and though I found it more consistently locally with app.debug = True, I noticed the behavior with debugging off (again, on Heroku).\n\nThere's been some discussion about this issue in Gunicorn's issues section [here](https://github.com/benoitc/gunicorn/issues/416), but they consider EAGAIN a non-fatal exception (and as you can see from running the example, the requests always successfully return data), so the fact that Flask sees it and thinks it's real is a problem.\n\nI believe Gunicorn could help fix this bug by clearing sys.exc_info() after ignoring the exception (i.e. around here: https://github.com/tilgovi/gunicorn/blob/master/gunicorn/workers/sync.py#L43:L45), but it'd still be racy.\n\nThe real fix, I believe is for Flask not to throw arbitrary \"if not exc: exc = sys.exc_info()[1]\" in areas where no exception is being explicitly caught by the code (e.g. [here](https://github.com/mitsuhiko/flask/blob/master/flask/app.py#L1711:L1712)). Another alternative, if that behavior is generally desirable, would be to ignore any exceptions with a stack trace that doesn't go deep enough to include any Flask or user-provided code.\n",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/37574094",
            "html_url": "https://github.com/pallets/flask/issues/984#issuecomment-37574094",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/984",
            "id": 37574094,
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTc0MDk0",
            "user": {
                "login": "DasIch",
                "id": 182316,
                "node_id": "MDQ6VXNlcjE4MjMxNg==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/182316?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/DasIch",
                "html_url": "https://github.com/DasIch",
                "followers_url": "https://api.github.com/users/DasIch/followers",
                "following_url": "https://api.github.com/users/DasIch/following{/other_user}",
                "gists_url": "https://api.github.com/users/DasIch/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/DasIch/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/DasIch/subscriptions",
                "organizations_url": "https://api.github.com/users/DasIch/orgs",
                "repos_url": "https://api.github.com/users/DasIch/repos",
                "events_url": "https://api.github.com/users/DasIch/events{/privacy}",
                "received_events_url": "https://api.github.com/users/DasIch/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-03-13T19:08:06Z",
            "updated_at": "2014-03-13T19:08:06Z",
            "author_association": "CONTRIBUTOR",
            "body": "We do have to inspect sys.exc_info in several places simply due to Flask's design, that cannot be changed. Making assumptions by looking at the tracebacks might turn out to be a very expensive operation on e.g. PyPy. Overall I don't think there is a way we can really solve this within Flask.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/61877935",
            "html_url": "https://github.com/pallets/flask/issues/984#issuecomment-61877935",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/984",
            "id": 61877935,
            "node_id": "MDEyOklzc3VlQ29tbWVudDYxODc3OTM1",
            "user": {
                "login": "dcosson",
                "id": 708904,
                "node_id": "MDQ6VXNlcjcwODkwNA==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/708904?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/dcosson",
                "html_url": "https://github.com/dcosson",
                "followers_url": "https://api.github.com/users/dcosson/followers",
                "following_url": "https://api.github.com/users/dcosson/following{/other_user}",
                "gists_url": "https://api.github.com/users/dcosson/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/dcosson/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dcosson/subscriptions",
                "organizations_url": "https://api.github.com/users/dcosson/orgs",
                "repos_url": "https://api.github.com/users/dcosson/repos",
                "events_url": "https://api.github.com/users/dcosson/events{/privacy}",
                "received_events_url": "https://api.github.com/users/dcosson/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-11-05T20:46:16Z",
            "updated_at": "2014-11-05T20:46:16Z",
            "author_association": "NONE",
            "body": "In case anyone else comes across this, I just ran into this issue and adding [this](https://gist.github.com/dcosson/dcf927bfa5f64dbd215e) extra teardown handler is what I'm using instead of `SQLALCHEMY_COMMIT_ON_TEARDOWN`.  I was concerned it might get called after flask-sqlalchemy calls session.remove() but [flask calls the teardown functions in reverse order](https://github.com/mitsuhiko/flask/blob/6fcc2ae3f4536e4d2651c1a00abe2306212a5bfd/flask/app.py#L1784-L1795) so that's not an issue.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/223369633",
            "html_url": "https://github.com/pallets/flask/issues/984#issuecomment-223369633",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/984",
            "id": 223369633,
            "node_id": "MDEyOklzc3VlQ29tbWVudDIyMzM2OTYzMw==",
            "user": {
                "login": "EuphyZhao",
                "id": 5028469,
                "node_id": "MDQ6VXNlcjUwMjg0Njk=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/5028469?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/EuphyZhao",
                "html_url": "https://github.com/EuphyZhao",
                "followers_url": "https://api.github.com/users/EuphyZhao/followers",
                "following_url": "https://api.github.com/users/EuphyZhao/following{/other_user}",
                "gists_url": "https://api.github.com/users/EuphyZhao/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/EuphyZhao/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/EuphyZhao/subscriptions",
                "organizations_url": "https://api.github.com/users/EuphyZhao/orgs",
                "repos_url": "https://api.github.com/users/EuphyZhao/repos",
                "events_url": "https://api.github.com/users/EuphyZhao/events{/privacy}",
                "received_events_url": "https://api.github.com/users/EuphyZhao/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2016-06-02T17:52:53Z",
            "updated_at": "2016-06-02T17:52:53Z",
            "author_association": "NONE",
            "body": "Looking at this issue at Pycon 2016 Sprints day. Is this fixed already? I can't reproduce the same error with the code provided by @astonm.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/223372593",
            "html_url": "https://github.com/pallets/flask/issues/984#issuecomment-223372593",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/984",
            "id": 223372593,
            "node_id": "MDEyOklzc3VlQ29tbWVudDIyMzM3MjU5Mw==",
            "user": {
                "login": "astonm",
                "id": 1728824,
                "node_id": "MDQ6VXNlcjE3Mjg4MjQ=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1728824?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/astonm",
                "html_url": "https://github.com/astonm",
                "followers_url": "https://api.github.com/users/astonm/followers",
                "following_url": "https://api.github.com/users/astonm/following{/other_user}",
                "gists_url": "https://api.github.com/users/astonm/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/astonm/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/astonm/subscriptions",
                "organizations_url": "https://api.github.com/users/astonm/orgs",
                "repos_url": "https://api.github.com/users/astonm/repos",
                "events_url": "https://api.github.com/users/astonm/events{/privacy}",
                "received_events_url": "https://api.github.com/users/astonm/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2016-06-02T18:03:02Z",
            "updated_at": "2016-06-02T18:03:02Z",
            "author_association": "NONE",
            "body": "I'm no longer able to repro, either.\n\nMaybe the [change](https://github.com/pallets/flask/pull/1393) from pulling `sys.exc_info()[1]` when `exc` was `None` to instead checking for `_sentinel` may have done the trick?\n"
        }
    ]
}