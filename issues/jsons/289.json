{
    "url": "https://api.github.com/repos/pallets/flask/issues/289",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/289/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/289/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/289/events",
    "html_url": "https://github.com/pallets/flask/issues/289",
    "id": 1314399,
    "node_id": "MDU6SXNzdWUxMzE0Mzk5",
    "number": 289,
    "title": "Blueprints and Extensions and SQLAlchemy",
    "user": {
        "login": "mitsuhiko",
        "id": 7396,
        "node_id": "MDQ6VXNlcjczOTY=",
        "avatar_url": "https://avatars1.githubusercontent.com/u/7396?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mitsuhiko",
        "html_url": "https://github.com/mitsuhiko",
        "followers_url": "https://api.github.com/users/mitsuhiko/followers",
        "following_url": "https://api.github.com/users/mitsuhiko/following{/other_user}",
        "gists_url": "https://api.github.com/users/mitsuhiko/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/mitsuhiko/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mitsuhiko/subscriptions",
        "organizations_url": "https://api.github.com/users/mitsuhiko/orgs",
        "repos_url": "https://api.github.com/users/mitsuhiko/repos",
        "events_url": "https://api.github.com/users/mitsuhiko/events{/privacy}",
        "received_events_url": "https://api.github.com/users/mitsuhiko/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 357932495,
            "node_id": "MDU6TGFiZWwzNTc5MzI0OTU=",
            "url": "https://api.github.com/repos/pallets/flask/labels/blueprints",
            "name": "blueprints",
            "color": "1d76db",
            "default": false,
            "description": null
        },
        {
            "id": 32876,
            "node_id": "MDU6TGFiZWwzMjg3Ng==",
            "url": "https://api.github.com/repos/pallets/flask/labels/docs",
            "name": "docs",
            "color": "0e8a16",
            "default": false,
            "description": null
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 7,
    "created_at": "2011-07-30T08:39:56Z",
    "updated_at": "2019-06-01T13:40:35Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "body": "We do not encourage people to create more than one database connection and to connect to databases in arbitrary extensions. The obvious exception are extensions whose sole purpose is to connect to databases. Dependency resolving is done by the developer. Eg:\n\n``` #!python\napp = Flask(__name__)\ndb = SQLAlchemy(app)\nsomething = SomethingElse(app, db)\n```\n\nThe problem comes with blueprints. If SomethingElse wants to define models it has to do that at a local scope where it has the reference to the db. Assuming it provides blueprints, how does the blueprint's views and other code get to the models? The sad truth is that if you make up blueprints on the fly the views in that blueprint don't know how to reference it.\n",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/1687991",
            "html_url": "https://github.com/pallets/flask/issues/289#issuecomment-1687991",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/289",
            "id": 1687991,
            "node_id": "MDEyOklzc3VlQ29tbWVudDE2ODc5OTE=",
            "user": {
                "login": "mrjoes",
                "id": 179880,
                "node_id": "MDQ6VXNlcjE3OTg4MA==",
                "avatar_url": "https://avatars1.githubusercontent.com/u/179880?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/mrjoes",
                "html_url": "https://github.com/mrjoes",
                "followers_url": "https://api.github.com/users/mrjoes/followers",
                "following_url": "https://api.github.com/users/mrjoes/following{/other_user}",
                "gists_url": "https://api.github.com/users/mrjoes/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/mrjoes/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mrjoes/subscriptions",
                "organizations_url": "https://api.github.com/users/mrjoes/orgs",
                "repos_url": "https://api.github.com/users/mrjoes/repos",
                "events_url": "https://api.github.com/users/mrjoes/events{/privacy}",
                "received_events_url": "https://api.github.com/users/mrjoes/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2011-07-30T12:36:15Z",
            "updated_at": "2011-07-30T12:36:15Z",
            "author_association": "CONTRIBUTOR",
            "body": "It depends from the use case.\n\nI have following assumptions:\n1. Application might want to access blueprint models\n2. There can be more than one instance of the blueprint, so there can be multiple instances of the same model mapped to different or same database table(s) (using prefixed table name, etc)\n3. Blueprints don't know how they're going to be used in the application - all parameters are passed in object creation time\n4. Which brings to the point - blueprints should always dynamicly create their models based on the input parameters to the constructor\n\nFor #1, snippet can look like:\n`\nsomething.MyModel.query.all()\n`\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/2851607",
            "html_url": "https://github.com/pallets/flask/issues/289#issuecomment-2851607",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/289",
            "id": 2851607,
            "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTE2MDc=",
            "user": {
                "login": "benallard",
                "id": 178188,
                "node_id": "MDQ6VXNlcjE3ODE4OA==",
                "avatar_url": "https://avatars1.githubusercontent.com/u/178188?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/benallard",
                "html_url": "https://github.com/benallard",
                "followers_url": "https://api.github.com/users/benallard/followers",
                "following_url": "https://api.github.com/users/benallard/following{/other_user}",
                "gists_url": "https://api.github.com/users/benallard/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/benallard/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/benallard/subscriptions",
                "organizations_url": "https://api.github.com/users/benallard/orgs",
                "repos_url": "https://api.github.com/users/benallard/repos",
                "events_url": "https://api.github.com/users/benallard/events{/privacy}",
                "received_events_url": "https://api.github.com/users/benallard/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2011-11-23T17:11:25Z",
            "updated_at": "2011-11-23T17:11:25Z",
            "author_association": "NONE",
            "body": "I came across this issue with my bugLink project (http://buglink.readthedocs.org/), where the basic app knows about the relationship changeset <-> issue, and extensions to the app should provide release <-> build <-> changeset ( <-> issue).\n\nMy understanding of this is that Blueprint are intended to extend the views. If you need to extend the model, you need to define something like a YellowPrint. As the model is highly coupled with the controller, YellowPrint could also have some mechanism in place to extend your controller. But there is no point in extending the controller if you don't make use of the extension provided. Here we come back to the views. Which brings us to the GreenPrint if you need to extend the views and the model.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/4980516",
            "html_url": "https://github.com/pallets/flask/issues/289#issuecomment-4980516",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/289",
            "id": 4980516,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ5ODA1MTY=",
            "user": {
                "login": "jfinkels",
                "id": 121755,
                "node_id": "MDQ6VXNlcjEyMTc1NQ==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/121755?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/jfinkels",
                "html_url": "https://github.com/jfinkels",
                "followers_url": "https://api.github.com/users/jfinkels/followers",
                "following_url": "https://api.github.com/users/jfinkels/following{/other_user}",
                "gists_url": "https://api.github.com/users/jfinkels/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/jfinkels/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jfinkels/subscriptions",
                "organizations_url": "https://api.github.com/users/jfinkels/orgs",
                "repos_url": "https://api.github.com/users/jfinkels/repos",
                "events_url": "https://api.github.com/users/jfinkels/events{/privacy}",
                "received_events_url": "https://api.github.com/users/jfinkels/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2012-04-05T16:42:47Z",
            "updated_at": "2012-04-05T16:42:47Z",
            "author_association": "CONTRIBUTOR",
            "body": "I don't know if this is exactly the situation you are describing, but I have something that looks like this in Flask-Restless. Check out http://readthedocs.org/docs/flask-restless/en/latest/quickstart.html\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/21666760",
            "html_url": "https://github.com/pallets/flask/issues/289#issuecomment-21666760",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/289",
            "id": 21666760,
            "node_id": "MDEyOklzc3VlQ29tbWVudDIxNjY2NzYw",
            "user": {
                "login": "jack-nie",
                "id": 2355975,
                "node_id": "MDQ6VXNlcjIzNTU5NzU=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/2355975?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/jack-nie",
                "html_url": "https://github.com/jack-nie",
                "followers_url": "https://api.github.com/users/jack-nie/followers",
                "following_url": "https://api.github.com/users/jack-nie/following{/other_user}",
                "gists_url": "https://api.github.com/users/jack-nie/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/jack-nie/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jack-nie/subscriptions",
                "organizations_url": "https://api.github.com/users/jack-nie/orgs",
                "repos_url": "https://api.github.com/users/jack-nie/repos",
                "events_url": "https://api.github.com/users/jack-nie/events{/privacy}",
                "received_events_url": "https://api.github.com/users/jack-nie/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2013-07-27T15:02:45Z",
            "updated_at": "2013-07-27T15:02:45Z",
            "author_association": "NONE",
            "body": "Nice work!\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/152403846",
            "html_url": "https://github.com/pallets/flask/issues/289#issuecomment-152403846",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/289",
            "id": 152403846,
            "node_id": "MDEyOklzc3VlQ29tbWVudDE1MjQwMzg0Ng==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-10-30T03:29:06Z",
            "updated_at": "2015-10-30T03:30:12Z",
            "author_association": "MEMBER",
            "body": "There are a few solutions I've seen, depending on the use case:\n- Inject dependencies and explicitly generate the views.  This use is a good use case for class based views.  During `init_app`, the extension generates the models and passes them to `as_view`.  This is similar to what @jfinkels mentions.\n- Provide abstract bases for the models, and expect the user to subclass them and use callbacks to set proxies.  Flask-Login does this with `UserMixin`, `login_manager.user_loader`, and `current_user`.  This is useful when \n- Set properties on the extension instance, then pull them from `current_app.extensions['my_ext'].MyModel` in views.  I don't have an example off the top of my head, but this is a similar concept to Flask-Login's `login_manager.anonymous_user`.\n\nI'll work on some short examples for each of these solutions to add to the docs on extensions.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/304138480",
            "html_url": "https://github.com/pallets/flask/issues/289#issuecomment-304138480",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/289",
            "id": 304138480,
            "node_id": "MDEyOklzc3VlQ29tbWVudDMwNDEzODQ4MA==",
            "user": {
                "login": "kennethreitz",
                "id": 119893,
                "node_id": "MDQ6VXNlcjExOTg5Mw==",
                "avatar_url": "https://avatars2.githubusercontent.com/u/119893?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/kennethreitz",
                "html_url": "https://github.com/kennethreitz",
                "followers_url": "https://api.github.com/users/kennethreitz/followers",
                "following_url": "https://api.github.com/users/kennethreitz/following{/other_user}",
                "gists_url": "https://api.github.com/users/kennethreitz/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/kennethreitz/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/kennethreitz/subscriptions",
                "organizations_url": "https://api.github.com/users/kennethreitz/orgs",
                "repos_url": "https://api.github.com/users/kennethreitz/repos",
                "events_url": "https://api.github.com/users/kennethreitz/events{/privacy}",
                "received_events_url": "https://api.github.com/users/kennethreitz/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2017-05-25T22:11:19Z",
            "updated_at": "2017-05-25T22:11:19Z",
            "author_association": "CONTRIBUTOR",
            "body": "Closing as this issue is OLD."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/304138587",
            "html_url": "https://github.com/pallets/flask/issues/289#issuecomment-304138587",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/289",
            "id": 304138587,
            "node_id": "MDEyOklzc3VlQ29tbWVudDMwNDEzODU4Nw==",
            "user": {
                "login": "kennethreitz",
                "id": 119893,
                "node_id": "MDQ6VXNlcjExOTg5Mw==",
                "avatar_url": "https://avatars2.githubusercontent.com/u/119893?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/kennethreitz",
                "html_url": "https://github.com/kennethreitz",
                "followers_url": "https://api.github.com/users/kennethreitz/followers",
                "following_url": "https://api.github.com/users/kennethreitz/following{/other_user}",
                "gists_url": "https://api.github.com/users/kennethreitz/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/kennethreitz/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/kennethreitz/subscriptions",
                "organizations_url": "https://api.github.com/users/kennethreitz/orgs",
                "repos_url": "https://api.github.com/users/kennethreitz/repos",
                "events_url": "https://api.github.com/users/kennethreitz/events{/privacy}",
                "received_events_url": "https://api.github.com/users/kennethreitz/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2017-05-25T22:11:56Z",
            "updated_at": "2017-05-25T22:11:56Z",
            "author_association": "CONTRIBUTOR",
            "body": "keeping open as this seems important"
        }
    ]
}