{
    "url": "https://api.github.com/repos/pallets/flask/issues/556",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/556/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/556/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/556/events",
    "html_url": "https://github.com/pallets/flask/issues/556",
    "id": 5729706,
    "node_id": "MDU6SXNzdWU1NzI5NzA2",
    "number": 556,
    "title": "Get raw data from POST request",
    "user": {
        "login": "desaiashu",
        "id": 178066,
        "node_id": "MDQ6VXNlcjE3ODA2Ng==",
        "avatar_url": "https://avatars0.githubusercontent.com/u/178066?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/desaiashu",
        "html_url": "https://github.com/desaiashu",
        "followers_url": "https://api.github.com/users/desaiashu/followers",
        "following_url": "https://api.github.com/users/desaiashu/following{/other_user}",
        "gists_url": "https://api.github.com/users/desaiashu/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/desaiashu/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/desaiashu/subscriptions",
        "organizations_url": "https://api.github.com/users/desaiashu/orgs",
        "repos_url": "https://api.github.com/users/desaiashu/repos",
        "events_url": "https://api.github.com/users/desaiashu/events{/privacy}",
        "received_events_url": "https://api.github.com/users/desaiashu/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 6,
    "created_at": "2012-07-20T03:34:50Z",
    "updated_at": "2014-04-04T14:02:03Z",
    "closed_at": "2012-07-20T13:46:14Z",
    "author_association": "NONE",
    "body": "How can I get the raw data from a POST request in Flask?\n\nI am moving from web.py to Flask and have some clients in production that unfortunately are using the content-type header application/x-www-form-urlencoded, so changing the header value of the request is not an option (unless it is overwritten on the server)\n\nI cannot use: data = request.form.keys()[0] Because occasionally the '&' character shows up in my data and trying to loop through the form.keys adding the '&' seems to corrupt the data for some reason.\n\nI'm currently using the solution proposed in this post: Python (Flask): How to get whole raw post body? But I'm not too sure if this has any performance issues.\n\nI'm looking for one of three things: \n1. Confirmation that the WGSICopyBody method won't have any adverse performance issues \n2. Ability to make this (data = request.form.keys()[0]) method work by looping through the keys and properly restoring the & in the data \n3. Another solution to the problem, possibly by subclassing the Request class?\n",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/7130466",
            "html_url": "https://github.com/pallets/flask/issues/556#issuecomment-7130466",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/556",
            "id": 7130466,
            "node_id": "MDEyOklzc3VlQ29tbWVudDcxMzA0NjY=",
            "user": {
                "login": "mitsuhiko",
                "id": 7396,
                "node_id": "MDQ6VXNlcjczOTY=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/7396?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/mitsuhiko",
                "html_url": "https://github.com/mitsuhiko",
                "followers_url": "https://api.github.com/users/mitsuhiko/followers",
                "following_url": "https://api.github.com/users/mitsuhiko/following{/other_user}",
                "gists_url": "https://api.github.com/users/mitsuhiko/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/mitsuhiko/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mitsuhiko/subscriptions",
                "organizations_url": "https://api.github.com/users/mitsuhiko/orgs",
                "repos_url": "https://api.github.com/users/mitsuhiko/repos",
                "events_url": "https://api.github.com/users/mitsuhiko/events{/privacy}",
                "received_events_url": "https://api.github.com/users/mitsuhiko/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2012-07-20T13:46:14Z",
            "updated_at": "2012-07-20T13:46:27Z",
            "author_association": "MEMBER",
            "body": "Sounds like you have broken clients. If you can detect those broken clients you could use a WSGI middleware to change the content type:\n\n``` python\nclass BackwardsCompatMiddleware(object):\n    def __init__(self, app):\n        self.app = app\n   def __call__(self, environ, start_response):\n       ua = environ.get('HTTP_USER_AGENT')\n       if ua == 'thebrokenuseragent/1.0' and environ.get('HTTP_CONTENT_TYPE') in \\\n               (None, '', 'application/x-www-form-urlencoded'):\n           environ['HTTP_CONTENT_TYPE'] = 'application/octet-stream'\n       return self.app(environ, start_response)\n\nflask_app.wsgi_app = BackwardsCompatMiddleware(flask_app.wsgi_app)\n```\n\n> I'm currently using the solution proposed in this post: Python (Flask): How to get whole raw post body? But I'm not too sure if this has any performance issues.\n\nThere is a reason you don't get the body of the request if we're parsing it with a detected mimetype :-) So no, there are performance issues if you would want to copy arbitrary input data around.\n\n> 1. Ability to make this (data = request.form.keys()[0]) method work by looping through the keys and properly restoring the & in the data \n\nCould work, I would detect the broken user agent with the wrong content type and change it like mentioned above.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/7136636",
            "html_url": "https://github.com/pallets/flask/issues/556#issuecomment-7136636",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/556",
            "id": 7136636,
            "node_id": "MDEyOklzc3VlQ29tbWVudDcxMzY2MzY=",
            "user": {
                "login": "desaiashu",
                "id": 178066,
                "node_id": "MDQ6VXNlcjE3ODA2Ng==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/178066?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/desaiashu",
                "html_url": "https://github.com/desaiashu",
                "followers_url": "https://api.github.com/users/desaiashu/followers",
                "following_url": "https://api.github.com/users/desaiashu/following{/other_user}",
                "gists_url": "https://api.github.com/users/desaiashu/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/desaiashu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/desaiashu/subscriptions",
                "organizations_url": "https://api.github.com/users/desaiashu/orgs",
                "repos_url": "https://api.github.com/users/desaiashu/repos",
                "events_url": "https://api.github.com/users/desaiashu/events{/privacy}",
                "received_events_url": "https://api.github.com/users/desaiashu/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2012-07-20T17:51:49Z",
            "updated_at": "2012-07-20T17:51:49Z",
            "author_association": "NONE",
            "body": "Awesome thanks so much!\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/36297471",
            "html_url": "https://github.com/pallets/flask/issues/556#issuecomment-36297471",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/556",
            "id": 36297471,
            "node_id": "MDEyOklzc3VlQ29tbWVudDM2Mjk3NDcx",
            "user": {
                "login": "linuxlizard",
                "id": 438131,
                "node_id": "MDQ6VXNlcjQzODEzMQ==",
                "avatar_url": "https://avatars3.githubusercontent.com/u/438131?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/linuxlizard",
                "html_url": "https://github.com/linuxlizard",
                "followers_url": "https://api.github.com/users/linuxlizard/followers",
                "following_url": "https://api.github.com/users/linuxlizard/following{/other_user}",
                "gists_url": "https://api.github.com/users/linuxlizard/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/linuxlizard/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/linuxlizard/subscriptions",
                "organizations_url": "https://api.github.com/users/linuxlizard/orgs",
                "repos_url": "https://api.github.com/users/linuxlizard/repos",
                "events_url": "https://api.github.com/users/linuxlizard/events{/privacy}",
                "received_events_url": "https://api.github.com/users/linuxlizard/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-02-27T22:05:31Z",
            "updated_at": "2014-02-27T22:05:31Z",
            "author_association": "NONE",
            "body": "> There is a reason you don't get the body of the request if we're parsing it with a detected \n> mimetype :-) So no, there are performance issues if you would want to copy arbitrary \n> input data around.\n\nWhat is the reason? \n\nI'm having the same issue. A client sending raw XML but the Content-Type is 'application/x-www-form-urlencoded'. Flask is giving me keys() = '<?xml version' and value = (rest of XML). \n\nJust curious. The middleware solution from https://stackoverflow.com/questions/10999990/get-raw-post-body-in-python-flask-regardless-of-content-type-header works for me. (The above middleware solution isn't working for me.)\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/36297573",
            "html_url": "https://github.com/pallets/flask/issues/556#issuecomment-36297573",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/556",
            "id": 36297573,
            "node_id": "MDEyOklzc3VlQ29tbWVudDM2Mjk3NTcz",
            "user": {
                "login": "ThiefMaster",
                "id": 179599,
                "node_id": "MDQ6VXNlcjE3OTU5OQ==",
                "avatar_url": "https://avatars1.githubusercontent.com/u/179599?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/ThiefMaster",
                "html_url": "https://github.com/ThiefMaster",
                "followers_url": "https://api.github.com/users/ThiefMaster/followers",
                "following_url": "https://api.github.com/users/ThiefMaster/following{/other_user}",
                "gists_url": "https://api.github.com/users/ThiefMaster/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/ThiefMaster/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ThiefMaster/subscriptions",
                "organizations_url": "https://api.github.com/users/ThiefMaster/orgs",
                "repos_url": "https://api.github.com/users/ThiefMaster/repos",
                "events_url": "https://api.github.com/users/ThiefMaster/events{/privacy}",
                "received_events_url": "https://api.github.com/users/ThiefMaster/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-02-27T22:06:41Z",
            "updated_at": "2014-02-27T22:06:41Z",
            "author_association": "MEMBER",
            "body": "The best solution is to throw a `400 Bad Request` in the face of clients sending you crap.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/36297908",
            "html_url": "https://github.com/pallets/flask/issues/556#issuecomment-36297908",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/556",
            "id": 36297908,
            "node_id": "MDEyOklzc3VlQ29tbWVudDM2Mjk3OTA4",
            "user": {
                "login": "linuxlizard",
                "id": 438131,
                "node_id": "MDQ6VXNlcjQzODEzMQ==",
                "avatar_url": "https://avatars3.githubusercontent.com/u/438131?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/linuxlizard",
                "html_url": "https://github.com/linuxlizard",
                "followers_url": "https://api.github.com/users/linuxlizard/followers",
                "following_url": "https://api.github.com/users/linuxlizard/following{/other_user}",
                "gists_url": "https://api.github.com/users/linuxlizard/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/linuxlizard/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/linuxlizard/subscriptions",
                "organizations_url": "https://api.github.com/users/linuxlizard/orgs",
                "repos_url": "https://api.github.com/users/linuxlizard/repos",
                "events_url": "https://api.github.com/users/linuxlizard/events{/privacy}",
                "received_events_url": "https://api.github.com/users/linuxlizard/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-02-27T22:10:06Z",
            "updated_at": "2014-02-27T22:10:06Z",
            "author_association": "NONE",
            "body": "Odds are I'm not going to be able to get Apple to change their client. :-( \n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/39567000",
            "html_url": "https://github.com/pallets/flask/issues/556#issuecomment-39567000",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/556",
            "id": 39567000,
            "node_id": "MDEyOklzc3VlQ29tbWVudDM5NTY3MDAw",
            "user": {
                "login": "asmuth",
                "id": 564023,
                "node_id": "MDQ6VXNlcjU2NDAyMw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/564023?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/asmuth",
                "html_url": "https://github.com/asmuth",
                "followers_url": "https://api.github.com/users/asmuth/followers",
                "following_url": "https://api.github.com/users/asmuth/following{/other_user}",
                "gists_url": "https://api.github.com/users/asmuth/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/asmuth/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/asmuth/subscriptions",
                "organizations_url": "https://api.github.com/users/asmuth/orgs",
                "repos_url": "https://api.github.com/users/asmuth/repos",
                "events_url": "https://api.github.com/users/asmuth/events{/privacy}",
                "received_events_url": "https://api.github.com/users/asmuth/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-04-04T13:54:17Z",
            "updated_at": "2014-04-04T14:02:03Z",
            "author_association": "NONE",
            "body": "The problem with @mitsuhiko 's middleware solution is that it only overwrites the `HTTP_CONTENT_TYPE` environment variable which is apparently not respected by flask. It works for me if another environment variable `CONTENT_TYPE` is also overwritten:\n\n```\nclass PhonyContentType(object):\n  def __init__(self, app):\n    self.app = app\n  def __call__(self, environ, start_response):\n    if some_condition:\n      environ['HTTP_CONTENT_TYPE'] = 'application/json'\n      environ['CONTENT_TYPE'] = 'application/json'\n    return self.app(environ, start_response)\n\n flask_app.wsgi_app = PhonyContentType(flask_app.wsgi_app) \n```\n"
        }
    ]
}