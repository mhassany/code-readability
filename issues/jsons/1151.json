{
    "url": "https://api.github.com/repos/pallets/flask/issues/1151",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/1151/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/1151/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/1151/events",
    "html_url": "https://github.com/pallets/flask/issues/1151",
    "id": 40363953,
    "node_id": "MDU6SXNzdWU0MDM2Mzk1Mw==",
    "number": 1151,
    "title": "Documention for \"The Application Context\" is confusing",
    "user": {
        "login": "Ceasar",
        "id": 625822,
        "node_id": "MDQ6VXNlcjYyNTgyMg==",
        "avatar_url": "https://avatars2.githubusercontent.com/u/625822?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Ceasar",
        "html_url": "https://github.com/Ceasar",
        "followers_url": "https://api.github.com/users/Ceasar/followers",
        "following_url": "https://api.github.com/users/Ceasar/following{/other_user}",
        "gists_url": "https://api.github.com/users/Ceasar/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Ceasar/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Ceasar/subscriptions",
        "organizations_url": "https://api.github.com/users/Ceasar/orgs",
        "repos_url": "https://api.github.com/users/Ceasar/repos",
        "events_url": "https://api.github.com/users/Ceasar/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Ceasar/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 32876,
            "node_id": "MDU6TGFiZWwzMjg3Ng==",
            "url": "https://api.github.com/repos/pallets/flask/labels/docs",
            "name": "docs",
            "color": "0e8a16",
            "default": false,
            "description": null
        }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": {
        "url": "https://api.github.com/repos/pallets/flask/milestones/2",
        "html_url": "https://github.com/pallets/flask/milestone/2",
        "labels_url": "https://api.github.com/repos/pallets/flask/milestones/2/labels",
        "id": 795954,
        "node_id": "MDk6TWlsZXN0b25lNzk1OTU0",
        "number": 2,
        "title": "1.0",
        "description": "",
        "creator": {
            "login": "untitaker",
            "id": 837573,
            "node_id": "MDQ6VXNlcjgzNzU3Mw==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/untitaker",
            "html_url": "https://github.com/untitaker",
            "followers_url": "https://api.github.com/users/untitaker/followers",
            "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
            "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
            "organizations_url": "https://api.github.com/users/untitaker/orgs",
            "repos_url": "https://api.github.com/users/untitaker/repos",
            "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
            "received_events_url": "https://api.github.com/users/untitaker/received_events",
            "type": "User",
            "site_admin": false
        },
        "open_issues": 0,
        "closed_issues": 159,
        "state": "closed",
        "created_at": "2014-09-19T15:47:20Z",
        "updated_at": "2018-04-26T21:07:44Z",
        "due_on": "2018-04-26T07:00:00Z",
        "closed_at": "2018-04-26T21:07:44Z"
    },
    "comments": 15,
    "created_at": "2014-08-15T16:48:13Z",
    "updated_at": "2018-04-09T07:22:17Z",
    "closed_at": "2018-04-09T07:22:17Z",
    "author_association": "NONE",
    "body": "See: http://flask.pocoo.org/docs/appcontext/\n\nThere seems to be two main issues with this page.\n1. I'm not sure how to say it, but the prose is vague and lacks focus. The effect in any case is that the concepts are difficult to grasp. [1] [2] [3]\n2. Syntax errors and wordiness [4] [5] [6]\n\n[1] \"The application setup state in which the application implicitly is on the module level.\"\n[2] \"In contrast, during request handling, a couple of other rules exist\"\n[3] \"There is a third state which is sitting in between a little bit.\"\n[4] \"The main reason for the application\u2019s context existence is that in the past a bunch of functionality was attached to the request context in lack of a better solution. Since one of the pillar\u2019s of Flask\u2019s design is that you can have more than one application in the same Python process.\"\n[5] \"To make an application context there are two ways.\"\n[6] \"The context is typically used to cache resources on there that need to be created on a per-request or usage case.\"\n",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/52329912",
            "html_url": "https://github.com/pallets/flask/issues/1151#issuecomment-52329912",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1151",
            "id": 52329912,
            "node_id": "MDEyOklzc3VlQ29tbWVudDUyMzI5OTEy",
            "user": {
                "login": "Ceasar",
                "id": 625822,
                "node_id": "MDQ6VXNlcjYyNTgyMg==",
                "avatar_url": "https://avatars2.githubusercontent.com/u/625822?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/Ceasar",
                "html_url": "https://github.com/Ceasar",
                "followers_url": "https://api.github.com/users/Ceasar/followers",
                "following_url": "https://api.github.com/users/Ceasar/following{/other_user}",
                "gists_url": "https://api.github.com/users/Ceasar/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/Ceasar/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Ceasar/subscriptions",
                "organizations_url": "https://api.github.com/users/Ceasar/orgs",
                "repos_url": "https://api.github.com/users/Ceasar/repos",
                "events_url": "https://api.github.com/users/Ceasar/events{/privacy}",
                "received_events_url": "https://api.github.com/users/Ceasar/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-08-15T16:50:54Z",
            "updated_at": "2014-08-15T16:51:06Z",
            "author_association": "NONE",
            "body": "I'm willing to draft a rewrite myself since I need to understand this anyway for my current project.\n\nI think it would be helpful if (1) others could look it over and tell me if any points are missing, outdated, or incorrect (since it seems to have been somewhat neglected) and (2) if there are any existing explanations which others have found useful for making sense of application contexts which I could use as a reference or direct people toward in a further reading section.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/52346766",
            "html_url": "https://github.com/pallets/flask/issues/1151#issuecomment-52346766",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1151",
            "id": 52346766,
            "node_id": "MDEyOklzc3VlQ29tbWVudDUyMzQ2NzY2",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-08-15T19:17:50Z",
            "updated_at": "2014-08-15T19:17:50Z",
            "author_association": "MEMBER",
            "body": "I think the page should at least refer more prominently to http://werkzeug.pocoo.org/docs/local/, as some basic concepts (thread locals) are explained there.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/52347326",
            "html_url": "https://github.com/pallets/flask/issues/1151#issuecomment-52347326",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1151",
            "id": 52347326,
            "node_id": "MDEyOklzc3VlQ29tbWVudDUyMzQ3MzI2",
            "user": {
                "login": "Ceasar",
                "id": 625822,
                "node_id": "MDQ6VXNlcjYyNTgyMg==",
                "avatar_url": "https://avatars2.githubusercontent.com/u/625822?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/Ceasar",
                "html_url": "https://github.com/Ceasar",
                "followers_url": "https://api.github.com/users/Ceasar/followers",
                "following_url": "https://api.github.com/users/Ceasar/following{/other_user}",
                "gists_url": "https://api.github.com/users/Ceasar/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/Ceasar/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Ceasar/subscriptions",
                "organizations_url": "https://api.github.com/users/Ceasar/orgs",
                "repos_url": "https://api.github.com/users/Ceasar/repos",
                "events_url": "https://api.github.com/users/Ceasar/events{/privacy}",
                "received_events_url": "https://api.github.com/users/Ceasar/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-08-15T19:23:03Z",
            "updated_at": "2014-08-15T21:40:40Z",
            "author_association": "NONE",
            "body": "I agree. Studying thread locals and context locals was helpful. Continuing on that point, I also think the Request context page should be arranged before the Application context page, since (1) it's easier to understand and (2) the application context was a product of issues with the request context.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/52361595",
            "html_url": "https://github.com/pallets/flask/issues/1151#issuecomment-52361595",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1151",
            "id": 52361595,
            "node_id": "MDEyOklzc3VlQ29tbWVudDUyMzYxNTk1",
            "user": {
                "login": "Ceasar",
                "id": 625822,
                "node_id": "MDQ6VXNlcjYyNTgyMg==",
                "avatar_url": "https://avatars2.githubusercontent.com/u/625822?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/Ceasar",
                "html_url": "https://github.com/Ceasar",
                "followers_url": "https://api.github.com/users/Ceasar/followers",
                "following_url": "https://api.github.com/users/Ceasar/following{/other_user}",
                "gists_url": "https://api.github.com/users/Ceasar/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/Ceasar/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Ceasar/subscriptions",
                "organizations_url": "https://api.github.com/users/Ceasar/orgs",
                "repos_url": "https://api.github.com/users/Ceasar/repos",
                "events_url": "https://api.github.com/users/Ceasar/events{/privacy}",
                "received_events_url": "https://api.github.com/users/Ceasar/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-08-15T21:48:45Z",
            "updated_at": "2014-08-15T21:48:45Z",
            "author_association": "NONE",
            "body": "Can someone provide me a definition for an application context? I having trouble grasping the term. The two docstrings on `Flask.app_context` and `AppContext` are not the clearest.\n\n>  Binds the application only. For as long as the application is bound to the current context the :data:`flask.current_app` points to that application. An application context is automatically created when a request context is pushed if necessary. - `Flask.app_context`\n> \n> The application context binds an application object implicitly to the current thread or greenlet, similar to how the :class:`RequestContext` binds request information.  The application context is also implicitly created if a request context is created but the application is not on top of the individual application context. - `AppContext`\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/52401108",
            "html_url": "https://github.com/pallets/flask/issues/1151#issuecomment-52401108",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1151",
            "id": 52401108,
            "node_id": "MDEyOklzc3VlQ29tbWVudDUyNDAxMTA4",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-08-16T17:56:48Z",
            "updated_at": "2014-08-16T18:08:19Z",
            "author_association": "MEMBER",
            "body": "- A \"proxy of X\" (also called an \"object proxying X\") is an object which provides all attributes and methods of the object X. Ideally it behaves exactly like the given object, so given that `original == original`, it is that `proxy == original`, but in Python it's never going to be that `proxy is original`.\n- A thread local is a variable which has a different value per thread, but in Flask/Werkzeug, a thread local is only a proxy (and not the original object) because that's easier to implement.\n- `flask.current_app` is a thread local which proxies the application whose application context is currently active.\n- The application context of the app X is a \"period of time\"/\"state\" where `flask.current_app` is proxying the app X.\n\nAwkward formulation, but i think that sums it up. I am a bit new to this myself, so any corrections are appreciated.\n\nSee `werkzeug/local.py` for all of this.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/52521137",
            "html_url": "https://github.com/pallets/flask/issues/1151#issuecomment-52521137",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1151",
            "id": 52521137,
            "node_id": "MDEyOklzc3VlQ29tbWVudDUyNTIxMTM3",
            "user": {
                "login": "Ceasar",
                "id": 625822,
                "node_id": "MDQ6VXNlcjYyNTgyMg==",
                "avatar_url": "https://avatars2.githubusercontent.com/u/625822?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/Ceasar",
                "html_url": "https://github.com/Ceasar",
                "followers_url": "https://api.github.com/users/Ceasar/followers",
                "following_url": "https://api.github.com/users/Ceasar/following{/other_user}",
                "gists_url": "https://api.github.com/users/Ceasar/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/Ceasar/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Ceasar/subscriptions",
                "organizations_url": "https://api.github.com/users/Ceasar/orgs",
                "repos_url": "https://api.github.com/users/Ceasar/repos",
                "events_url": "https://api.github.com/users/Ceasar/events{/privacy}",
                "received_events_url": "https://api.github.com/users/Ceasar/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-08-18T16:55:44Z",
            "updated_at": "2014-08-18T16:57:21Z",
            "author_association": "NONE",
            "body": "I am trying to write the abstract, starting from context locals. In @mitsuhiko's 2011 Pycon talk \"Opening the Flask\" he argued that context-locals should appear everywhere or nowhere. [1] This of course omits the idea of using context-locals sometimes, as they do in Django (where it is mostly threaded through functions, but occasionally introspection is possible, as in internationalization). Is there an archive of this argument somewhere I can find? I couldn't find anything in the mailing list.\n\n[1] http://blip.tv/pycon-us-videos-2009-2010-2011/pycon-2011-opening-the-flask-4896892 at 11:25\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/53618450",
            "html_url": "https://github.com/pallets/flask/issues/1151#issuecomment-53618450",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1151",
            "id": 53618450,
            "node_id": "MDEyOklzc3VlQ29tbWVudDUzNjE4NDUw",
            "user": {
                "login": "Ceasar",
                "id": 625822,
                "node_id": "MDQ6VXNlcjYyNTgyMg==",
                "avatar_url": "https://avatars2.githubusercontent.com/u/625822?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/Ceasar",
                "html_url": "https://github.com/Ceasar",
                "followers_url": "https://api.github.com/users/Ceasar/followers",
                "following_url": "https://api.github.com/users/Ceasar/following{/other_user}",
                "gists_url": "https://api.github.com/users/Ceasar/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/Ceasar/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Ceasar/subscriptions",
                "organizations_url": "https://api.github.com/users/Ceasar/orgs",
                "repos_url": "https://api.github.com/users/Ceasar/repos",
                "events_url": "https://api.github.com/users/Ceasar/events{/privacy}",
                "received_events_url": "https://api.github.com/users/Ceasar/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-08-27T18:27:38Z",
            "updated_at": "2014-08-27T18:27:38Z",
            "author_association": "NONE",
            "body": "Does anyone know why we use `current_app` to refer to the current app, but `request` to refer to the current request (i.e., it's inconsistent)?\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/53618579",
            "html_url": "https://github.com/pallets/flask/issues/1151#issuecomment-53618579",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1151",
            "id": 53618579,
            "node_id": "MDEyOklzc3VlQ29tbWVudDUzNjE4NTc5",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2014-08-27T18:28:43Z",
            "updated_at": "2014-08-27T18:28:43Z",
            "author_association": "MEMBER",
            "body": "I'd guess because there'd be a naming collision with the `app` variable you're using to register routes.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/159657431",
            "html_url": "https://github.com/pallets/flask/issues/1151#issuecomment-159657431",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1151",
            "id": 159657431,
            "node_id": "MDEyOklzc3VlQ29tbWVudDE1OTY1NzQzMQ==",
            "user": {
                "login": "lenolib",
                "id": 1769273,
                "node_id": "MDQ6VXNlcjE3NjkyNzM=",
                "avatar_url": "https://avatars2.githubusercontent.com/u/1769273?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/lenolib",
                "html_url": "https://github.com/lenolib",
                "followers_url": "https://api.github.com/users/lenolib/followers",
                "following_url": "https://api.github.com/users/lenolib/following{/other_user}",
                "gists_url": "https://api.github.com/users/lenolib/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/lenolib/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lenolib/subscriptions",
                "organizations_url": "https://api.github.com/users/lenolib/orgs",
                "repos_url": "https://api.github.com/users/lenolib/repos",
                "events_url": "https://api.github.com/users/lenolib/events{/privacy}",
                "received_events_url": "https://api.github.com/users/lenolib/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-11-25T16:11:10Z",
            "updated_at": "2015-11-25T16:11:10Z",
            "author_association": "NONE",
            "body": "l second that a rewrite would be great. Perhaps some inspiration can be had from this SO answer:\nhttps://stackoverflow.com/questions/20036520/what-is-the-purpose-of-flasks-context-stacks\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/159661024",
            "html_url": "https://github.com/pallets/flask/issues/1151#issuecomment-159661024",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1151",
            "id": 159661024,
            "node_id": "MDEyOklzc3VlQ29tbWVudDE1OTY2MTAyNA==",
            "user": {
                "login": "mitsuhiko",
                "id": 7396,
                "node_id": "MDQ6VXNlcjczOTY=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/7396?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/mitsuhiko",
                "html_url": "https://github.com/mitsuhiko",
                "followers_url": "https://api.github.com/users/mitsuhiko/followers",
                "following_url": "https://api.github.com/users/mitsuhiko/following{/other_user}",
                "gists_url": "https://api.github.com/users/mitsuhiko/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/mitsuhiko/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mitsuhiko/subscriptions",
                "organizations_url": "https://api.github.com/users/mitsuhiko/orgs",
                "repos_url": "https://api.github.com/users/mitsuhiko/repos",
                "events_url": "https://api.github.com/users/mitsuhiko/events{/privacy}",
                "received_events_url": "https://api.github.com/users/mitsuhiko/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-11-25T16:21:01Z",
            "updated_at": "2015-11-25T16:21:01Z",
            "author_association": "MEMBER",
            "body": "I think one reason people are confused is because there are app and request contexts and it's not clear why they are there and what the lifetime is.  That might need some clarification in the docs.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/162447825",
            "html_url": "https://github.com/pallets/flask/issues/1151#issuecomment-162447825",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1151",
            "id": 162447825,
            "node_id": "MDEyOklzc3VlQ29tbWVudDE2MjQ0NzgyNQ==",
            "user": {
                "login": "Korijn",
                "id": 1882046,
                "node_id": "MDQ6VXNlcjE4ODIwNDY=",
                "avatar_url": "https://avatars0.githubusercontent.com/u/1882046?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/Korijn",
                "html_url": "https://github.com/Korijn",
                "followers_url": "https://api.github.com/users/Korijn/followers",
                "following_url": "https://api.github.com/users/Korijn/following{/other_user}",
                "gists_url": "https://api.github.com/users/Korijn/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/Korijn/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Korijn/subscriptions",
                "organizations_url": "https://api.github.com/users/Korijn/orgs",
                "repos_url": "https://api.github.com/users/Korijn/repos",
                "events_url": "https://api.github.com/users/Korijn/events{/privacy}",
                "received_events_url": "https://api.github.com/users/Korijn/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-12-07T08:32:50Z",
            "updated_at": "2015-12-07T08:32:50Z",
            "author_association": "NONE",
            "body": ":+1: As a newcomer trying to make sense of things, this is very very hard.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/259959254",
            "html_url": "https://github.com/pallets/flask/issues/1151#issuecomment-259959254",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1151",
            "id": 259959254,
            "node_id": "MDEyOklzc3VlQ29tbWVudDI1OTk1OTI1NA==",
            "user": {
                "login": "lukeschlather",
                "id": 184099,
                "node_id": "MDQ6VXNlcjE4NDA5OQ==",
                "avatar_url": "https://avatars2.githubusercontent.com/u/184099?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/lukeschlather",
                "html_url": "https://github.com/lukeschlather",
                "followers_url": "https://api.github.com/users/lukeschlather/followers",
                "following_url": "https://api.github.com/users/lukeschlather/following{/other_user}",
                "gists_url": "https://api.github.com/users/lukeschlather/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/lukeschlather/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lukeschlather/subscriptions",
                "organizations_url": "https://api.github.com/users/lukeschlather/orgs",
                "repos_url": "https://api.github.com/users/lukeschlather/repos",
                "events_url": "https://api.github.com/users/lukeschlather/events{/privacy}",
                "received_events_url": "https://api.github.com/users/lukeschlather/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2016-11-11T13:40:38Z",
            "updated_at": "2016-11-11T13:40:38Z",
            "author_association": "NONE",
            "body": "The appcontext definitely needs some clarification in the docs. The docs say that the appcontext [\"will not be shared between requests.\"](http://flask.pocoo.org/docs/appcontext/) However, I don't really see the point of separate teardown_request and teardown_appcontext functions if both the request context and the appcontext are torn down with every request. \n\nI believe that the appcontext is not shared between different threads, but is shared between different requests in the same thread. This is consistent with some of the documentation (and it's consistent with a sensible design.) Reading through docstrings I've seen contradictory information in various places.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/259960693",
            "html_url": "https://github.com/pallets/flask/issues/1151#issuecomment-259960693",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1151",
            "id": 259960693,
            "node_id": "MDEyOklzc3VlQ29tbWVudDI1OTk2MDY5Mw==",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2016-11-11T13:48:41Z",
            "updated_at": "2016-11-11T13:56:31Z",
            "author_association": "MEMBER",
            "body": "@lukeschlather The appcontext is _not_ shared between requests, for the simple reason that persisting it between requests would amount to global state. The point is to have `flask.g` available in scripts as well, where no HTTP request (and therefore no request context) is available. Having `flask.g` bound to the request context makes no sense because there's nothing there that would really depend on a HTTP request.\n\nThe docs may be confusing but they're not technically wrong. If you find logical contradictions please do point those out, because even if the docs fail to explain those concepts well, they should at least not contradict themselves.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/305696004",
            "html_url": "https://github.com/pallets/flask/issues/1151#issuecomment-305696004",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1151",
            "id": 305696004,
            "node_id": "MDEyOklzc3VlQ29tbWVudDMwNTY5NjAwNA==",
            "user": {
                "login": "craigphicks",
                "id": 13205732,
                "node_id": "MDQ6VXNlcjEzMjA1NzMy",
                "avatar_url": "https://avatars3.githubusercontent.com/u/13205732?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/craigphicks",
                "html_url": "https://github.com/craigphicks",
                "followers_url": "https://api.github.com/users/craigphicks/followers",
                "following_url": "https://api.github.com/users/craigphicks/following{/other_user}",
                "gists_url": "https://api.github.com/users/craigphicks/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/craigphicks/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/craigphicks/subscriptions",
                "organizations_url": "https://api.github.com/users/craigphicks/orgs",
                "repos_url": "https://api.github.com/users/craigphicks/repos",
                "events_url": "https://api.github.com/users/craigphicks/events{/privacy}",
                "received_events_url": "https://api.github.com/users/craigphicks/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2017-06-02T05:49:35Z",
            "updated_at": "2017-06-02T05:49:35Z",
            "author_association": "NONE",
            "body": "I think that document in question would gain from adding a top down perspective on \"why\" specific design decisions were made.  This top down perspective would involve explaining the physical constraints involved in solving the problem of delivering a specific internet service, e.g., a single version of an app based on Flask.  With that understanding to build on, the answers should fall into place like a jigsaw puzzle.\r\n\r\nWe know that the app may be distributed as identical \"clone\" processes each on a different physical server(*1), each clone running exactly the same software logic and having exactly the same configuration - let us say the same DNA.  The reason for this is scalability - client traffic might suddenly increase, servers might suddenly fail, yet the system needs to respond seamlessly so that the clients do not experience delays.  Therefore a design decision is made:  a process should never store any \"session\" state necessary to complete a client-server session. (This is one the REST requirements). This means that for a specific client session, each request from that client session can be routed to an arbitrary clone, doesn't have to be routed to the same clone for each request in a session, and the server clones don't have communicate DIRECTLY to each other about that client session state.  Of course, a clone can pass state information to the client, for the client to pass that same state information onto the next serving clone in the session sequence. (*1: Arbitrarily assuming there is no reason to run multiple clone processes on the same physical server, but perhaps I'm wrong).\r\n\r\nNow the reason for the setup and teardown of the so-called \"context global\" variables app_ctx, g, request, and session at the start and end of a request is clear:  that clone might never service that client session again, so the memory resources are reclaimed for other use.  Note:  \"Global\" is not really a specific enough term and could cause confusion. The actual scope of these variables is limited to the time span of a single request and the physical span of a single thread in a single process on a single server.  \r\n\r\nAlthough app_ctx, g, request, and session share the same single request scope, they are set and read by different characters for different purposes:\r\n- session: the session state data shuttled between the client and the server clone so that the next server clone knows where to pick up.  \r\n- request: data sent from the client to the server clone\r\n- g: temporary storage for use by the application code (but not the Flask libraries and extensions code) for database info, etc.\r\n- app_ctx: like g but used by the by the Flask libraries and extensions, and not the application code.\r\n\r\nIt is stated that multiple non-identical Flask apps my be running in the same process space.  I guess this has something to do with optimizing load balancing but I don't have any specific knowledge about what problem this paradigm solves, so I'll just take it at face value that it happens.  In any event, that paradigm is not the one necessitating the so-called \"context global\" variables app_ctx, g, request, and session to be set up and torn down with each client request.\r\n\r\nAlso, the paradigm of accessing the application from a shell is unrelated to production usage of serving clients.  It is just a convenient way to run scripts for things like migrating a database and testing.  The existing structure of \"g\" variable happens to be available and useful due to the clever design of Flask, but there is no deep meaning beyond that.  There would have been other less clever ways to chieve the same result.\r\n\r\nIn conclusion, sometimes the big picture takes too long to explain, and giving a simplified recipe is more pragmatic.  But it can only go far, and it will eventually lead to confusion and dogma.  It's like the difference between using the bible to try to explain the existence of the universe, and using your understanding of the universe to explain the existence of the bible.  \r\n\r\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/362203712",
            "html_url": "https://github.com/pallets/flask/issues/1151#issuecomment-362203712",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1151",
            "id": 362203712,
            "node_id": "MDEyOklzc3VlQ29tbWVudDM2MjIwMzcxMg==",
            "user": {
                "login": "kaos",
                "id": 72965,
                "node_id": "MDQ6VXNlcjcyOTY1",
                "avatar_url": "https://avatars0.githubusercontent.com/u/72965?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/kaos",
                "html_url": "https://github.com/kaos",
                "followers_url": "https://api.github.com/users/kaos/followers",
                "following_url": "https://api.github.com/users/kaos/following{/other_user}",
                "gists_url": "https://api.github.com/users/kaos/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/kaos/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/kaos/subscriptions",
                "organizations_url": "https://api.github.com/users/kaos/orgs",
                "repos_url": "https://api.github.com/users/kaos/repos",
                "events_url": "https://api.github.com/users/kaos/events{/privacy}",
                "received_events_url": "https://api.github.com/users/kaos/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2018-02-01T09:11:16Z",
            "updated_at": "2018-02-01T09:25:26Z",
            "author_association": "NONE",
            "body": "EDIT: Sorry for the noise. I seem to have come to false conclusions regarding the app context, where I thought it was surviving between requests. Which clearly is not the case, so my confusion lies else where (and also in my clearly limited understanding of the app context). It actually was the upgrade note that this change should be transparent for me as user that got me on the right track again.\r\n\r\nMy apologies.\r\n\r\nThe parts below kept for the record where I was wrong..\r\n\r\n--\r\nI've not spent the time reading up on the history on this issue, so may reiterate points. Here is what I found confusing in the documentation regarding the `flask.g` object:\r\n\r\n> The application context is created and destroyed as necessary. It never moves between threads and it will not be shared between requests\r\n\r\nSince https://github.com/pallets/flask/commit/1949c4a9abc174bf29620f6dd8ceab9ed3ace2eb it is shared between requests.\r\n\r\n> The context is typically used to cache resources that need to be created on a per-request or usage case.\r\n\r\nStill not per-request safe, as this paragraph suggests.\r\n\r\nAnd in the api documentation for App Globals, there is this paragraph:\r\n\r\n> To share data that is valid for one request only from one function to another, a global variable is not good enough because it would break in threaded environments. Flask provides you with a special object that ensures it is only valid for the active request and that will return different values for each request. In a nutshell: it does the right thing, like it does for request and session.\r\n\r\nThis clearly states the previous functionality when the `g` object was on the request context stack.\r\n\r\nThe _only_ hint (Edit: oh, except in the changelog and upgrade notes) that it is not a per-request safe object any more, is this passage, which was added in the referenced commit:\r\n\r\n> Starting with Flask 0.10 this is stored on the application context and no longer on the request context which means it becomes available if only the application context is bound and not yet a request.\r\n\r\nAnd as it is not super clear (what is the consequence of being on the app context, with regard to per-request data), and contradicts all other documentation regarding this object, one may come to the conclusion that it is not accurate.\r\n\r\nEdit: the upgrade notes state that this change should be transparent to you (as user). How is it transparent? If I put the logged in user on `flask.g.userid` in one request and the next request comes from another client that is not logged in there is still the `flask.g.userid` from the previous request.\r\n\r\nI hope the tone comes across as constructive feedback, and nothing else. I find flask to be a great library and want it all the best. Cheers for all the work so far!\r\n"
        }
    ]
}