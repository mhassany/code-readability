{
    "url": "https://api.github.com/repos/pallets/flask/issues/2677",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/2677/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/2677/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/2677/events",
    "html_url": "https://github.com/pallets/flask/issues/2677",
    "id": 310321275,
    "node_id": "MDU6SXNzdWUzMTAzMjEyNzU=",
    "number": 2677,
    "title": "AssertionError on app.test_client().session_transaction()",
    "user": {
        "login": "ghost",
        "id": 10137,
        "node_id": "MDQ6VXNlcjEwMTM3",
        "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ghost",
        "html_url": "https://github.com/ghost",
        "followers_url": "https://api.github.com/users/ghost/followers",
        "following_url": "https://api.github.com/users/ghost/following{/other_user}",
        "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
        "organizations_url": "https://api.github.com/users/ghost/orgs",
        "repos_url": "https://api.github.com/users/ghost/repos",
        "events_url": "https://api.github.com/users/ghost/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ghost/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2018-04-01T12:49:56Z",
    "updated_at": "2018-04-02T11:32:48Z",
    "closed_at": "2018-04-02T11:32:48Z",
    "author_association": "NONE",
    "body": "### Expected Behavior\r\n\r\nTesting with pytest and using  the context manager `app.test_client().session_transaction()`\r\nto set the session configuration.\r\n\r\n```python\r\n\r\n@pytest.fixture()\r\ndef client():\r\n    app.config['TESTING'] = True\r\n\r\n    app.secret_key = 'test_views'\r\n    with app.test_client() as client:\r\n        yield client\r\n\r\ndef test_phase1(client, mocker):\r\n    with client.session_transaction() as session:\r\n        session['logged_in'] = True\r\n        response = client.get('/phase1')\r\n        print(response)\r\n```\r\n### Actual Behavior\r\n\r\n```pytb\r\n    def do_teardown_request(self, exc=_sentinel):\r\n        \"\"\"Called after the actual request dispatching and will\r\n            call every as :meth:`teardown_request` decorated function.  This is\r\n            not actually called by the :class:`Flask` object itself but is always\r\n            triggered when the request context is popped.  That way we have a\r\n            tighter control over certain resources under testing environments.\r\n    \r\n            .. versionchanged:: 0.9\r\n               Added the `exc` argument.  Previously this was always using the\r\n               current exception information.\r\n            \"\"\"\r\n        if exc is _sentinel:\r\n            exc = sys.exc_info()[1]\r\n        funcs = reversed(self.teardown_request_funcs.get(None, ()))\r\n>       bp = _request_ctx_stack.top.request.blueprint\r\nE           AssertionError: Popped wrong request context.  (None instead of <RequestContext 'http://localhost/' [GET])\r\n\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\n    def pop(self, exc=_sentinel):\r\n        \"\"\"Pops the request context and unbinds it by doing that.  This will\r\n            also trigger the execution of functions registered by the\r\n            :meth:`~flask.Flask.teardown_request` decorator.\r\n    \r\n            .. versionchanged:: 0.9\r\n               Added the `exc` argument.\r\n            \"\"\"\r\n        app_ctx = self._implicit_app_ctx_stack.pop()\r\n    \r\n        try:\r\n            clear_request = False\r\n            if not self._implicit_app_ctx_stack:\r\n                self.preserved = False\r\n                self._preserved_exc = None\r\n                if exc is _sentinel:\r\n                    exc = sys.exc_info()[1]\r\n                self.app.do_teardown_request(exc)\r\n    \r\n                # If this interpreter supports clearing the exception information\r\n                # we do that now.  This will only go into effect on Python 2.x,\r\n                # on 3.x it disappears automatically at the end of the exception\r\n                # stack.\r\n                if hasattr(sys, 'exc_clear'):\r\n                    sys.exc_clear()\r\n    \r\n                request_close = getattr(self.request, 'close', None)\r\n                if request_close is not None:\r\n                    request_close()\r\n                clear_request = True\r\n        finally:\r\n            rv = _request_ctx_stack.pop()\r\n    \r\n            # get rid of circular dependencies at the end of the request\r\n            # so that we don't require the GC to be active.\r\n            if clear_request:\r\n                rv.request.environ['werkzeug.request'] = None\r\n    \r\n            # Get rid of the app as well if necessary.\r\n            if app_ctx is not None:\r\n                app_ctx.pop(exc)\r\n    \r\n            assert rv is self, 'Popped wrong request context.  ' \\\r\n>               '(%r instead of %r)' % (rv, self)\r\nE          AssertionError: Popped wrong request context.  (None instead of <RequestContext 'http://localhost/' [GET])\r\n\r\n```\r\ntried with with app.config['PRESERVE_CONTEXT_ON_EXCEPTION'] = False but it doesn't work\r\n\r\n### Environment\r\n\r\n* Python version: 3.5.3\r\n* Flask version: 0.12.2\r\n* Werkzeug version: 0.14.1\r\n",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/377899477",
            "html_url": "https://github.com/pallets/flask/issues/2677#issuecomment-377899477",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2677",
            "id": 377899477,
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3Nzg5OTQ3Nw==",
            "user": {
                "login": "frostming",
                "id": 16336606,
                "node_id": "MDQ6VXNlcjE2MzM2NjA2",
                "avatar_url": "https://avatars3.githubusercontent.com/u/16336606?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/frostming",
                "html_url": "https://github.com/frostming",
                "followers_url": "https://api.github.com/users/frostming/followers",
                "following_url": "https://api.github.com/users/frostming/following{/other_user}",
                "gists_url": "https://api.github.com/users/frostming/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/frostming/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/frostming/subscriptions",
                "organizations_url": "https://api.github.com/users/frostming/orgs",
                "repos_url": "https://api.github.com/users/frostming/repos",
                "events_url": "https://api.github.com/users/frostming/events{/privacy}",
                "received_events_url": "https://api.github.com/users/frostming/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2018-04-02T10:05:01Z",
            "updated_at": "2018-04-02T10:07:10Z",
            "author_association": "NONE",
            "body": "`session_transaction()` is supposed to allow only session modifications inside the context. The session is stored afterwards. See [doc](http://flask.pocoo.org/docs/0.12/testing/#accessing-and-modifying-sessions).\r\n\r\nSo you should fire the request out of it:\r\n```python\r\nwith client.session_transaction() as session:\r\n    session['logged_in'] = True\r\n\r\nresponse = client.get('/phase1')\r\nprint(response)\r\n```\r\nHope it helps."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/377911700",
            "html_url": "https://github.com/pallets/flask/issues/2677#issuecomment-377911700",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2677",
            "id": 377911700,
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzkxMTcwMA==",
            "user": {
                "login": "ghost",
                "id": 10137,
                "node_id": "MDQ6VXNlcjEwMTM3",
                "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/ghost",
                "html_url": "https://github.com/ghost",
                "followers_url": "https://api.github.com/users/ghost/followers",
                "following_url": "https://api.github.com/users/ghost/following{/other_user}",
                "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
                "organizations_url": "https://api.github.com/users/ghost/orgs",
                "repos_url": "https://api.github.com/users/ghost/repos",
                "events_url": "https://api.github.com/users/ghost/events{/privacy}",
                "received_events_url": "https://api.github.com/users/ghost/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2018-04-02T11:32:48Z",
            "updated_at": "2018-04-02T11:32:48Z",
            "author_association": "NONE",
            "body": "i missed how this worked in the docs, thank you for the clarification!"
        }
    ]
}