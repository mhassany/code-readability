{
    "url": "https://api.github.com/repos/pallets/flask/issues/1837",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/1837/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/1837/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/1837/events",
    "html_url": "https://github.com/pallets/flask/issues/1837",
    "id": 157610040,
    "node_id": "MDU6SXNzdWUxNTc2MTAwNDA=",
    "number": 1837,
    "title": "Setting error handler for unknown code fails",
    "user": {
        "login": "georgthegreat",
        "id": 1121500,
        "node_id": "MDQ6VXNlcjExMjE1MDA=",
        "avatar_url": "https://avatars2.githubusercontent.com/u/1121500?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/georgthegreat",
        "html_url": "https://github.com/georgthegreat",
        "followers_url": "https://api.github.com/users/georgthegreat/followers",
        "following_url": "https://api.github.com/users/georgthegreat/following{/other_user}",
        "gists_url": "https://api.github.com/users/georgthegreat/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/georgthegreat/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/georgthegreat/subscriptions",
        "organizations_url": "https://api.github.com/users/georgthegreat/orgs",
        "repos_url": "https://api.github.com/users/georgthegreat/repos",
        "events_url": "https://api.github.com/users/georgthegreat/events{/privacy}",
        "received_events_url": "https://api.github.com/users/georgthegreat/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 135583063,
            "node_id": "MDU6TGFiZWwxMzU1ODMwNjM=",
            "url": "https://api.github.com/repos/pallets/flask/labels/bug",
            "name": "bug",
            "color": "d93f0b",
            "default": true,
            "description": null
        },
        {
            "id": 32876,
            "node_id": "MDU6TGFiZWwzMjg3Ng==",
            "url": "https://api.github.com/repos/pallets/flask/labels/docs",
            "name": "docs",
            "color": "0e8a16",
            "default": false,
            "description": null
        }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": {
        "url": "https://api.github.com/repos/pallets/flask/milestones/2",
        "html_url": "https://github.com/pallets/flask/milestone/2",
        "labels_url": "https://api.github.com/repos/pallets/flask/milestones/2/labels",
        "id": 795954,
        "node_id": "MDk6TWlsZXN0b25lNzk1OTU0",
        "number": 2,
        "title": "1.0",
        "description": "",
        "creator": {
            "login": "untitaker",
            "id": 837573,
            "node_id": "MDQ6VXNlcjgzNzU3Mw==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/untitaker",
            "html_url": "https://github.com/untitaker",
            "followers_url": "https://api.github.com/users/untitaker/followers",
            "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
            "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
            "organizations_url": "https://api.github.com/users/untitaker/orgs",
            "repos_url": "https://api.github.com/users/untitaker/repos",
            "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
            "received_events_url": "https://api.github.com/users/untitaker/received_events",
            "type": "User",
            "site_admin": false
        },
        "open_issues": 0,
        "closed_issues": 159,
        "state": "closed",
        "created_at": "2014-09-19T15:47:20Z",
        "updated_at": "2018-04-26T21:07:44Z",
        "due_on": "2018-04-26T07:00:00Z",
        "closed_at": "2018-04-26T21:07:44Z"
    },
    "comments": 23,
    "created_at": "2016-05-31T07:51:12Z",
    "updated_at": "2017-06-09T09:30:46Z",
    "closed_at": "2017-06-01T01:10:00Z",
    "author_association": "NONE",
    "body": "The following code:\n\n```\nflask_app.errorhandler(402)(http_exception_handler)\n```\n\nraises `KeyError: 402` due to missing 402 in default exception. Code works fine with Flask=0.10.1\n",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/222869012",
            "html_url": "https://github.com/pallets/flask/issues/1837#issuecomment-222869012",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1837",
            "id": 222869012,
            "node_id": "MDEyOklzc3VlQ29tbWVudDIyMjg2OTAxMg==",
            "user": {
                "login": "sublee",
                "id": 19982,
                "node_id": "MDQ6VXNlcjE5OTgy",
                "avatar_url": "https://avatars0.githubusercontent.com/u/19982?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/sublee",
                "html_url": "https://github.com/sublee",
                "followers_url": "https://api.github.com/users/sublee/followers",
                "following_url": "https://api.github.com/users/sublee/following{/other_user}",
                "gists_url": "https://api.github.com/users/sublee/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/sublee/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/sublee/subscriptions",
                "organizations_url": "https://api.github.com/users/sublee/orgs",
                "repos_url": "https://api.github.com/users/sublee/repos",
                "events_url": "https://api.github.com/users/sublee/events{/privacy}",
                "received_events_url": "https://api.github.com/users/sublee/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2016-06-01T01:31:42Z",
            "updated_at": "2016-06-01T01:31:55Z",
            "author_association": "NONE",
            "body": "I have the same issue.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/223158185",
            "html_url": "https://github.com/pallets/flask/issues/1837#issuecomment-223158185",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1837",
            "id": 223158185,
            "node_id": "MDEyOklzc3VlQ29tbWVudDIyMzE1ODE4NQ==",
            "user": {
                "login": "mitsuhiko",
                "id": 7396,
                "node_id": "MDQ6VXNlcjczOTY=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/7396?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/mitsuhiko",
                "html_url": "https://github.com/mitsuhiko",
                "followers_url": "https://api.github.com/users/mitsuhiko/followers",
                "following_url": "https://api.github.com/users/mitsuhiko/following{/other_user}",
                "gists_url": "https://api.github.com/users/mitsuhiko/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/mitsuhiko/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mitsuhiko/subscriptions",
                "organizations_url": "https://api.github.com/users/mitsuhiko/orgs",
                "repos_url": "https://api.github.com/users/mitsuhiko/repos",
                "events_url": "https://api.github.com/users/mitsuhiko/events{/privacy}",
                "received_events_url": "https://api.github.com/users/mitsuhiko/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2016-06-01T23:48:20Z",
            "updated_at": "2016-06-01T23:48:20Z",
            "author_association": "MEMBER",
            "body": "I can see that this might be annoying. We need to figure out how to deal with non standard status codes and error handlers. How did you use this with Flask < 0.11?\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/223195721",
            "html_url": "https://github.com/pallets/flask/issues/1837#issuecomment-223195721",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1837",
            "id": 223195721,
            "node_id": "MDEyOklzc3VlQ29tbWVudDIyMzE5NTcyMQ==",
            "user": {
                "login": "georgthegreat",
                "id": 1121500,
                "node_id": "MDQ6VXNlcjExMjE1MDA=",
                "avatar_url": "https://avatars2.githubusercontent.com/u/1121500?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/georgthegreat",
                "html_url": "https://github.com/georgthegreat",
                "followers_url": "https://api.github.com/users/georgthegreat/followers",
                "following_url": "https://api.github.com/users/georgthegreat/following{/other_user}",
                "gists_url": "https://api.github.com/users/georgthegreat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/georgthegreat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/georgthegreat/subscriptions",
                "organizations_url": "https://api.github.com/users/georgthegreat/orgs",
                "repos_url": "https://api.github.com/users/georgthegreat/repos",
                "events_url": "https://api.github.com/users/georgthegreat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/georgthegreat/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2016-06-02T04:59:06Z",
            "updated_at": "2016-06-02T04:59:06Z",
            "author_association": "NONE",
            "body": "Here is an example of my approach: https://github.com/hda-technical/dancebooks/blob/master/www/main.py#L488\n\nI just set custom exception handler to each HTTP code from werkzeug.HTTP_STATUS_CODES.\nI can easily fix this on my site (I don't have any particular meaning for 402 status), but I decided to create an issue first.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/223358219",
            "html_url": "https://github.com/pallets/flask/issues/1837#issuecomment-223358219",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1837",
            "id": 223358219,
            "node_id": "MDEyOklzc3VlQ29tbWVudDIyMzM1ODIxOQ==",
            "user": {
                "login": "docapotamus",
                "id": 1929544,
                "node_id": "MDQ6VXNlcjE5Mjk1NDQ=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1929544?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/docapotamus",
                "html_url": "https://github.com/docapotamus",
                "followers_url": "https://api.github.com/users/docapotamus/followers",
                "following_url": "https://api.github.com/users/docapotamus/following{/other_user}",
                "gists_url": "https://api.github.com/users/docapotamus/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/docapotamus/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/docapotamus/subscriptions",
                "organizations_url": "https://api.github.com/users/docapotamus/orgs",
                "repos_url": "https://api.github.com/users/docapotamus/repos",
                "events_url": "https://api.github.com/users/docapotamus/events{/privacy}",
                "received_events_url": "https://api.github.com/users/docapotamus/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2016-06-02T17:12:34Z",
            "updated_at": "2016-06-02T17:12:34Z",
            "author_association": "NONE",
            "body": "I am also having an issue with error handlers.\n\nI am using it slightly differently than above (https://github.com/pjuu/pjuu/blob/master/pjuu/lib/errors.py) to try make it as generic as possible.\n\nNot sure if my case is related but I am getting:\n\n```\n  File \"/Users/joedoherty/.virtualenvs/pjuu/lib/python2.7/site-packages/flask/app.py\", line 1465, in find_handler\n    handler = handler_map.get(cls)\nAttributeError: 'function' object has no attribute 'get'\n```\n\nI can get around this I think by implementing the generic error handler as a class with a `get` method but I am not sure if this is the correct way to go about this.\n\nI can open a new issue if you want or if I'm just using undocumented APIs, please feel free to tell me to get lost \ud83d\ude08 \n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/223359287",
            "html_url": "https://github.com/pallets/flask/issues/1837#issuecomment-223359287",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1837",
            "id": 223359287,
            "node_id": "MDEyOklzc3VlQ29tbWVudDIyMzM1OTI4Nw==",
            "user": {
                "login": "sublee",
                "id": 19982,
                "node_id": "MDQ6VXNlcjE5OTgy",
                "avatar_url": "https://avatars0.githubusercontent.com/u/19982?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/sublee",
                "html_url": "https://github.com/sublee",
                "followers_url": "https://api.github.com/users/sublee/followers",
                "following_url": "https://api.github.com/users/sublee/following{/other_user}",
                "gists_url": "https://api.github.com/users/sublee/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/sublee/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/sublee/subscriptions",
                "organizations_url": "https://api.github.com/users/sublee/orgs",
                "repos_url": "https://api.github.com/users/sublee/repos",
                "events_url": "https://api.github.com/users/sublee/events{/privacy}",
                "received_events_url": "https://api.github.com/users/sublee/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2016-06-02T17:16:15Z",
            "updated_at": "2016-06-02T17:16:29Z",
            "author_association": "NONE",
            "body": "@docapotamus You should register error handlers by the `@errorhandler` decorator instead.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/223363779",
            "html_url": "https://github.com/pallets/flask/issues/1837#issuecomment-223363779",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1837",
            "id": 223363779,
            "node_id": "MDEyOklzc3VlQ29tbWVudDIyMzM2Mzc3OQ==",
            "user": {
                "login": "docapotamus",
                "id": 1929544,
                "node_id": "MDQ6VXNlcjE5Mjk1NDQ=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1929544?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/docapotamus",
                "html_url": "https://github.com/docapotamus",
                "followers_url": "https://api.github.com/users/docapotamus/followers",
                "following_url": "https://api.github.com/users/docapotamus/following{/other_user}",
                "gists_url": "https://api.github.com/users/docapotamus/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/docapotamus/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/docapotamus/subscriptions",
                "organizations_url": "https://api.github.com/users/docapotamus/orgs",
                "repos_url": "https://api.github.com/users/docapotamus/repos",
                "events_url": "https://api.github.com/users/docapotamus/events{/privacy}",
                "received_events_url": "https://api.github.com/users/docapotamus/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2016-06-02T17:31:56Z",
            "updated_at": "2016-06-02T17:33:24Z",
            "author_association": "NONE",
            "body": "@sublee thanks for showing me the error of my ways. Will get this sorted it's now not a problem.\n\nSorry to hijack this issue.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/257492645",
            "html_url": "https://github.com/pallets/flask/issues/1837#issuecomment-257492645",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1837",
            "id": 257492645,
            "node_id": "MDEyOklzc3VlQ29tbWVudDI1NzQ5MjY0NQ==",
            "user": {
                "login": "liebald",
                "id": 829322,
                "node_id": "MDQ6VXNlcjgyOTMyMg==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/829322?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/liebald",
                "html_url": "https://github.com/liebald",
                "followers_url": "https://api.github.com/users/liebald/followers",
                "following_url": "https://api.github.com/users/liebald/following{/other_user}",
                "gists_url": "https://api.github.com/users/liebald/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/liebald/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/liebald/subscriptions",
                "organizations_url": "https://api.github.com/users/liebald/orgs",
                "repos_url": "https://api.github.com/users/liebald/repos",
                "events_url": "https://api.github.com/users/liebald/events{/privacy}",
                "received_events_url": "https://api.github.com/users/liebald/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2016-11-01T05:35:38Z",
            "updated_at": "2016-11-01T05:35:38Z",
            "author_association": "CONTRIBUTOR",
            "body": "Looks like setting error handlers by assigning to `app.error_handler_spec` no longer works as expected in Flask 0.11, since the semantics of this dict have changed (from my reading of the code, it looks like it used to be a mapping from blueprint + error code -> handler, but it's now a mapping from blueprint + error code + exception class -> handler). As a consequence, setting values in `error_handler_spec` directly will lead to exceptions when flask tries to look up the correct handler for a given error (`AttributeError: 'function' object has no attribute 'get'`).\n\nSolution: Use `app.register_error_handler` (or use `app.errorhandler` in a non-decorator way) instead.\n\nHowever, the documentation makes no mention that this no longer works (the latest docs still give an example of how to use `error_handler_spec` that's now broken: http://flask.pocoo.org/docs/0.11/api/#flask.Flask.error_handler_spec). Is this a bug that should be fixed, or did you intend to make this backwards-incompatible change? If the latter, can we update the documentation? I'd be happy to send a pull request, but wanted to make sure I'm not missing something here.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/257534895",
            "html_url": "https://github.com/pallets/flask/issues/1837#issuecomment-257534895",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1837",
            "id": 257534895,
            "node_id": "MDEyOklzc3VlQ29tbWVudDI1NzUzNDg5NQ==",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2016-11-01T10:33:50Z",
            "updated_at": "2016-11-01T10:33:50Z",
            "author_association": "MEMBER",
            "body": "Yes, sorry, the docs are completely out of date. The new mapping is `blueprint => statuscode => class` for any kind of exception instead of `blueprint => statuscode => (\"list of tuples\" if statuscode is None else handler)`.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/257535097",
            "html_url": "https://github.com/pallets/flask/issues/1837#issuecomment-257535097",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1837",
            "id": 257535097,
            "node_id": "MDEyOklzc3VlQ29tbWVudDI1NzUzNTA5Nw==",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2016-11-01T10:34:54Z",
            "updated_at": "2016-11-01T10:34:54Z",
            "author_association": "MEMBER",
            "body": "Also I'd like to emphasize in the docs that it's discouraged to use this attribute.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/257933247",
            "html_url": "https://github.com/pallets/flask/issues/1837#issuecomment-257933247",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1837",
            "id": 257933247,
            "node_id": "MDEyOklzc3VlQ29tbWVudDI1NzkzMzI0Nw==",
            "user": {
                "login": "liebald",
                "id": 829322,
                "node_id": "MDQ6VXNlcjgyOTMyMg==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/829322?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/liebald",
                "html_url": "https://github.com/liebald",
                "followers_url": "https://api.github.com/users/liebald/followers",
                "following_url": "https://api.github.com/users/liebald/following{/other_user}",
                "gists_url": "https://api.github.com/users/liebald/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/liebald/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/liebald/subscriptions",
                "organizations_url": "https://api.github.com/users/liebald/orgs",
                "repos_url": "https://api.github.com/users/liebald/repos",
                "events_url": "https://api.github.com/users/liebald/events{/privacy}",
                "received_events_url": "https://api.github.com/users/liebald/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2016-11-02T17:14:35Z",
            "updated_at": "2016-11-02T17:14:35Z",
            "author_association": "CONTRIBUTOR",
            "body": "Re API improvements: How about making the actual map a private attribute and force access through dedicated APIs, such as `register_error_handler` and `@errorhandler`? It would require users to upgrade their code, but anyone who used `error_handler_spec` in <= 0.10 already had their code broken in 0.11 anyway, and it would be better to make that explicit (we only found out because we happen to have unit tests for our error handlers).\n\nRe documentation: The reason we were using the map in the first place was that using a decorator didn't work with application factories, and somehow we missed `register_error_handler` (either it didn't exist, or the docs didn't mention it at the time). Given that an application factory with multiple blueprints is a pretty common pattern these days, it would be good to improve the documentation to outline how to set error handlers that work across blueprints, e.g. in this article: http://flask.pocoo.org/docs/0.11/patterns/errorpages/\n\nI'd be happy to help out with either docs or code changes, let me know your thoughts and what would be most useful.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/257939127",
            "html_url": "https://github.com/pallets/flask/issues/1837#issuecomment-257939127",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1837",
            "id": 257939127,
            "node_id": "MDEyOklzc3VlQ29tbWVudDI1NzkzOTEyNw==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2016-11-02T17:32:29Z",
            "updated_at": "2016-11-02T17:33:20Z",
            "author_association": "MEMBER",
            "body": "> using a decorator didn't work with application factories\n\nRegardless of the existence of the other function, this isn't true.  A decorator is just a function that is passed a function, it can be used anywhere.\n\n``` python\ndef factory():\n    ...\n    app.errorhandler(404)(our_404_handler)\n```\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/257992567",
            "html_url": "https://github.com/pallets/flask/issues/1837#issuecomment-257992567",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1837",
            "id": 257992567,
            "node_id": "MDEyOklzc3VlQ29tbWVudDI1Nzk5MjU2Nw==",
            "user": {
                "login": "liebald",
                "id": 829322,
                "node_id": "MDQ6VXNlcjgyOTMyMg==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/829322?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/liebald",
                "html_url": "https://github.com/liebald",
                "followers_url": "https://api.github.com/users/liebald/followers",
                "following_url": "https://api.github.com/users/liebald/following{/other_user}",
                "gists_url": "https://api.github.com/users/liebald/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/liebald/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/liebald/subscriptions",
                "organizations_url": "https://api.github.com/users/liebald/orgs",
                "repos_url": "https://api.github.com/users/liebald/repos",
                "events_url": "https://api.github.com/users/liebald/events{/privacy}",
                "received_events_url": "https://api.github.com/users/liebald/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2016-11-02T20:42:26Z",
            "updated_at": "2016-11-02T20:42:26Z",
            "author_association": "CONTRIBUTOR",
            "body": "@davidism Sure. Though I suspect this usage isn't obvious to all (most?) users. Hence the existence of `register_error_handler`. In any case, the main point is that `error_handler_spec` shouldn't be accessible as a public attribute, since it's subject to backwards-incompatible changes from version to version, and the documentation could make that clearer.\n\nJust sent out a PR for improving some of the documentation: #2077. Happy to clean up the API reference docs, too, if this one's going in the right direction.\n\n@untitaker @mitsuhiko Curious what your thoughts are re my proposal for blocking access to `error_handler_spec` by making it a private attribute (turn it into `_error_handler_spec` and put a property on `error_handler_spec` with a setter that raises AttributeError, or something along those lines)?\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/262870747",
            "html_url": "https://github.com/pallets/flask/issues/1837#issuecomment-262870747",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1837",
            "id": 262870747,
            "node_id": "MDEyOklzc3VlQ29tbWVudDI2Mjg3MDc0Nw==",
            "user": {
                "login": "hrbonz",
                "id": 99708,
                "node_id": "MDQ6VXNlcjk5NzA4",
                "avatar_url": "https://avatars1.githubusercontent.com/u/99708?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/hrbonz",
                "html_url": "https://github.com/hrbonz",
                "followers_url": "https://api.github.com/users/hrbonz/followers",
                "following_url": "https://api.github.com/users/hrbonz/following{/other_user}",
                "gists_url": "https://api.github.com/users/hrbonz/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/hrbonz/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/hrbonz/subscriptions",
                "organizations_url": "https://api.github.com/users/hrbonz/orgs",
                "repos_url": "https://api.github.com/users/hrbonz/repos",
                "events_url": "https://api.github.com/users/hrbonz/events{/privacy}",
                "received_events_url": "https://api.github.com/users/hrbonz/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2016-11-25T02:49:36Z",
            "updated_at": "2016-11-25T03:17:58Z",
            "author_association": "NONE",
            "body": "Not a specialist of Flask code but did hit the same kind of issue, you can see gist of how we set error handling here (code has been cleaned a bit): https://gist.github.com/hrbonz/5cc9d9d1a63593cd87b3ef555470706c\r\n\r\nThis used to work fine (in 0.10.1), the problem seems to be that now (I don't know how it was before), [Flask._find_error_handler()](https://github.com/pallets/flask/blob/master/flask/app.py#L1429) will try to strictly match the error code from `app.error_handler_spec` when my handlers are registered under the `None` key.\r\n\r\nShould I create a factory to register every error code individually or is it a bug in how the handlers are found?\r\n\r\nBottom line is, it looks like we now have to register all exception codes one by one instead of simply creating a generic error handler."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/268060639",
            "html_url": "https://github.com/pallets/flask/issues/1837#issuecomment-268060639",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1837",
            "id": 268060639,
            "node_id": "MDEyOklzc3VlQ29tbWVudDI2ODA2MDYzOQ==",
            "user": {
                "login": "lingnand",
                "id": 1991754,
                "node_id": "MDQ6VXNlcjE5OTE3NTQ=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1991754?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/lingnand",
                "html_url": "https://github.com/lingnand",
                "followers_url": "https://api.github.com/users/lingnand/followers",
                "following_url": "https://api.github.com/users/lingnand/following{/other_user}",
                "gists_url": "https://api.github.com/users/lingnand/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/lingnand/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lingnand/subscriptions",
                "organizations_url": "https://api.github.com/users/lingnand/orgs",
                "repos_url": "https://api.github.com/users/lingnand/repos",
                "events_url": "https://api.github.com/users/lingnand/events{/privacy}",
                "received_events_url": "https://api.github.com/users/lingnand/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2016-12-19T19:50:45Z",
            "updated_at": "2016-12-19T19:50:45Z",
            "author_association": "NONE",
            "body": "Also, trap_http_exception NO LONGER works. I don't know why you have to force people to register error handler by codes. For something simple like this:\r\n\r\n```\r\napp.config['TRAP_HTTP_EXCEPTIONS'] = True\r\n\r\n@app.errorhandler(Exception)\r\ndef global_handler(e):\r\n    do_something(e)\r\n```\r\n\r\nwhich used to work, but now no longer works because of this forced look up in the dictionary by `code` (`app.py` line 1449)."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/288308957",
            "html_url": "https://github.com/pallets/flask/issues/1837#issuecomment-288308957",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1837",
            "id": 288308957,
            "node_id": "MDEyOklzc3VlQ29tbWVudDI4ODMwODk1Nw==",
            "user": {
                "login": "tuxpowered",
                "id": 2959347,
                "node_id": "MDQ6VXNlcjI5NTkzNDc=",
                "avatar_url": "https://avatars3.githubusercontent.com/u/2959347?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/tuxpowered",
                "html_url": "https://github.com/tuxpowered",
                "followers_url": "https://api.github.com/users/tuxpowered/followers",
                "following_url": "https://api.github.com/users/tuxpowered/following{/other_user}",
                "gists_url": "https://api.github.com/users/tuxpowered/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/tuxpowered/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tuxpowered/subscriptions",
                "organizations_url": "https://api.github.com/users/tuxpowered/orgs",
                "repos_url": "https://api.github.com/users/tuxpowered/repos",
                "events_url": "https://api.github.com/users/tuxpowered/events{/privacy}",
                "received_events_url": "https://api.github.com/users/tuxpowered/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2017-03-22T06:18:57Z",
            "updated_at": "2017-03-22T06:26:14Z",
            "author_association": "NONE",
            "body": "Not sure this is a correct way of handling this or not but it works...\r\n\r\n```\r\nfrom werkzeug.exceptions import default_exceptions\r\n\r\ndef handle_error(e):\r\n    code = 500\r\n    error, message = str(e).split(':', 1)\r\n\r\n    if isinstance(e, HTTPException):\r\n        code = e.code\r\n\r\n    errors = dict(\r\n        error=error,\r\n        message=message.strip(),\r\n        code=code,\r\n        path=request.path,\r\n    )\r\n    return jsonify(errors=errors), code\r\n\r\nfor code in default_exceptions:\r\n    app.register_error_handler(code, handle_error)\r\n\r\n```\r\nThe key is that default_exceptions is a dictionary of valid HTTP errors that werkzeug processes. I suppose you could _add_ custom HTTP codes to this dictionary as well. \r\n\r\n\r\nThe above returns a response like so:\r\n\r\n> http -j 127.0.0.1:5000/sms/messages22\r\nHTTP/1.0 404 NOT FOUND\r\nContent-Length: 242\r\nContent-Type: application/json\r\nDate: Wed, 22 Mar 2017 06:23:20 GMT\r\nServer: Werkzeug/0.12.1 Python/3.4.3\r\n\r\n```\r\n\r\n{\r\n    \"errors\": {\r\n        \"code\": 404,\r\n        \"error\": \"404 Not Found\",\r\n        \"message\": \"The requested URL was not found on the server.  If you entered the URL manually please check your spelling and try again.\",\r\n        \"path\": \"/sms/messages22\"\r\n    }\r\n}\r\n\r\n```"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/293852953",
            "html_url": "https://github.com/pallets/flask/issues/1837#issuecomment-293852953",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1837",
            "id": 293852953,
            "node_id": "MDEyOklzc3VlQ29tbWVudDI5Mzg1Mjk1Mw==",
            "user": {
                "login": "4poc",
                "id": 168797,
                "node_id": "MDQ6VXNlcjE2ODc5Nw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/168797?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/4poc",
                "html_url": "https://github.com/4poc",
                "followers_url": "https://api.github.com/users/4poc/followers",
                "following_url": "https://api.github.com/users/4poc/following{/other_user}",
                "gists_url": "https://api.github.com/users/4poc/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/4poc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/4poc/subscriptions",
                "organizations_url": "https://api.github.com/users/4poc/orgs",
                "repos_url": "https://api.github.com/users/4poc/repos",
                "events_url": "https://api.github.com/users/4poc/events{/privacy}",
                "received_events_url": "https://api.github.com/users/4poc/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2017-04-13T10:31:05Z",
            "updated_at": "2017-04-13T10:33:11Z",
            "author_association": "NONE",
            "body": "This is still an issue, with this:\r\n\r\n```\r\n@app.errorhandler(402)\r\ndef handle_error(e):\r\n    # ...\r\n```\r\n\r\ncauses a crash:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"[..].py\", line 6, in <module>\r\n    exec(compile(open(__file__).read(), __file__, 'exec'))\r\n  File \"[..].py\", line 22, in <module>\r\n    @app.errorhandler(402)\r\n  File \"[..]python3.5/site-packages/flask/app.py\", line 1159, in decorator\r\n    self._register_error_handler(None, code_or_exception, f)\r\n  File \"[..]python3.5/site-packages/flask/app.py\", line 64, in wrapper_func\r\n    return f(self, *args, **kwargs)\r\n  File \"[..]python3.5/site-packages/flask/app.py\", line 1185, in _register_error_handler\r\n    exc_class, code = self._get_exc_class_and_code(code_or_exception)\r\n  File \"[..]python3.5/site-packages/flask/app.py\", line 1104, in _get_exc_class_and_code\r\n    exc_class = default_exceptions[exc_class_or_code]\r\nKeyError: 402\r\n```\r\n\r\nIn my case I want a global error handler, that catches everything to do the handling of errors myself. Workaround for me (why am I even using flask at this point):\r\n\r\n```\r\n@app.errorhandler(Exception):\r\ndef my_global_error_handler(e):\r\n    ...\r\n\r\nfrom werkzeug import HTTP_STATUS_CODES\r\nfor code in HTTP_STATUS_CODES:\r\n    try:\r\n        app.register_error_handler(code, my_global_error_handler)\r\n    except KeyError:\r\n        pass\r\n```\r\n\r\nFlask Version: 0.12.1"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/294281312",
            "html_url": "https://github.com/pallets/flask/issues/1837#issuecomment-294281312",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1837",
            "id": 294281312,
            "node_id": "MDEyOklzc3VlQ29tbWVudDI5NDI4MTMxMg==",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2017-04-15T09:02:27Z",
            "updated_at": "2017-04-15T09:02:27Z",
            "author_association": "MEMBER",
            "body": "I'm looking into fixing this.\r\n\r\n@mitsuhiko what do you think about the app object holding a mapping from error codes to exceptions, where httpexception-subclasses are dynamically added if errorhandlers for unknown codes are registered?\r\n\r\nSo basically `werkzeug.exceptions.default_exceptions` would live on the app object. We would need to write a custom `flask.abort` that uses that mapping instead of reexporting from Werkzeug."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/294289517",
            "html_url": "https://github.com/pallets/flask/issues/1837#issuecomment-294289517",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1837",
            "id": 294289517,
            "node_id": "MDEyOklzc3VlQ29tbWVudDI5NDI4OTUxNw==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2017-04-15T12:14:08Z",
            "updated_at": "2017-04-15T12:18:25Z",
            "author_association": "MEMBER",
            "body": "Here's what I'm thinking: The Flask app has an instance of `werkzeug.exceptions.Aborter`. Custom exceptions get added to that instance's map. The Flask version of the `abort` function tries `current_app.aborter()` first (or only). This is similar to how the Flask app has a `url_map` that `url_for` refers to."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/294293205",
            "html_url": "https://github.com/pallets/flask/issues/1837#issuecomment-294293205",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1837",
            "id": 294293205,
            "node_id": "MDEyOklzc3VlQ29tbWVudDI5NDI5MzIwNQ==",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2017-04-15T13:25:06Z",
            "updated_at": "2017-04-15T13:25:06Z",
            "author_association": "MEMBER",
            "body": "Right, that's better.\n\nOn April 15, 2017 2:14:15 PM GMT+02:00, David Lord <notifications@github.com> wrote:\n>Here's what I'm thinking: The Flask app has an instance of\n>`werkzeug.exceptions.Aborter`. Custom exceptions get added to that\n>instances map. The Flask version of the abort `abort` tries\n>`current_app.aborter()` first (or only).\n>\n>-- \n>You are receiving this because you were mentioned.\n>Reply to this email directly or view it on GitHub:\n>https://github.com/pallets/flask/issues/1837#issuecomment-294289517\n\n-- \nSent from my Android device with K-9 Mail. Please excuse my brevity."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/304993645",
            "html_url": "https://github.com/pallets/flask/issues/1837#issuecomment-304993645",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1837",
            "id": 304993645,
            "node_id": "MDEyOklzc3VlQ29tbWVudDMwNDk5MzY0NQ==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2017-05-30T20:10:49Z",
            "updated_at": "2017-05-30T20:10:49Z",
            "author_association": "MEMBER",
            "body": "This is a long discussion, to summarize:\r\n\r\n* docs are already updated\r\n* catch-all handlers such as `Exception` or `HTTPException` *do* work with status codes, you don't need to register it for each code. Probably due to #2304.\r\n* `errorhandler(402)` fails because there's no associated exception (same with `abort(402)`, but that wasn't in the original report)"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/304996942",
            "html_url": "https://github.com/pallets/flask/issues/1837#issuecomment-304996942",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1837",
            "id": 304996942,
            "node_id": "MDEyOklzc3VlQ29tbWVudDMwNDk5Njk0Mg==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2017-05-30T20:23:03Z",
            "updated_at": "2017-05-30T20:24:24Z",
            "author_association": "MEMBER",
            "body": "The simplest solution is to subclass `HTTPException`, add a handler for the class (not the code), and raise it directly (don't use `abort`).\r\n\r\n~~~python\r\nfrom werkzeug.exceptions import HTTPException\r\n\r\nclass FourZeroTwo(HTTPException):\r\n    code = 402\r\n\r\n@app.errorhandler(FourZeroTwo)\r\ndef handle_402(e):\r\n    return '402', 402\r\n\r\n@app.route('/')\r\ndef index():\r\n    raise FourZeroTwo()\r\n~~~\r\n\r\nIf you really want to use the code, it needs to be registered with Werkzeug in two places.\r\n\r\n~~~python\r\nfrom werkzeug.exceptions import default_exceptions, _aborter\r\n\r\ndefault_exceptions[402] = FourZeroTwo\r\n_aborter.mapping[402] = FourZeroTwo\r\n\r\napp.errorhandler(402)  # works\r\nabort(402)  # works\r\n~~~"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/304998817",
            "html_url": "https://github.com/pallets/flask/issues/1837#issuecomment-304998817",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1837",
            "id": 304998817,
            "node_id": "MDEyOklzc3VlQ29tbWVudDMwNDk5ODgxNw==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2017-05-30T20:30:21Z",
            "updated_at": "2017-05-30T22:25:33Z",
            "author_association": "MEMBER",
            "body": "@untitaker are you still looking into this?\r\n\r\nI'm not sure what a clean solution would look like. If all we have to go on is `errorhandler(402)`, we still don't know what exception to associate with it. We could generate one, but what if the developer subclasses `HTTPException` like above but registers it using `402`? If they try to abort later, they won't get the same exception class.\r\n\r\nWe could add a `register_error_code(exception)` function that takes an `HTTPException` subclass and adds it to the map. If the user tries to add a code that doesn't exist, the error message would point them at calling this first. In that case, we don't necessarily need the custom `Aborter`, since it would be safe to modify the globals during setup."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/305360835",
            "html_url": "https://github.com/pallets/flask/issues/1837#issuecomment-305360835",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1837",
            "id": 305360835,
            "node_id": "MDEyOklzc3VlQ29tbWVudDMwNTM2MDgzNQ==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2017-06-01T01:10:00Z",
            "updated_at": "2017-06-01T01:10:00Z",
            "author_association": "MEMBER",
            "body": "@georgthegreat I'm curious how you were aborting with that code. `abort(402)` would have raised an error because the aborter still doesn't know that code. Additionally, the code you linked doesn't use any non-standard error codes, so not sure how it's related.\r\n\r\nIf you have a non-standard code that's not known to Werkzeug, create a subclass with the code and use that. If Werkzeug is missing a standard code, create a patch for Werkzeug to support it. Documenting this and closing."
        }
    ]
}