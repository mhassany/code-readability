{
    "url": "https://api.github.com/repos/pallets/flask/issues/1545",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/1545/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/1545/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/1545/events",
    "html_url": "https://github.com/pallets/flask/issues/1545",
    "id": 98580902,
    "node_id": "MDU6SXNzdWU5ODU4MDkwMg==",
    "number": 1545,
    "title": "Request.form data dict... Could we modify the structure?",
    "user": {
        "login": "Lewiscowles1986",
        "id": 2605791,
        "node_id": "MDQ6VXNlcjI2MDU3OTE=",
        "avatar_url": "https://avatars3.githubusercontent.com/u/2605791?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Lewiscowles1986",
        "html_url": "https://github.com/Lewiscowles1986",
        "followers_url": "https://api.github.com/users/Lewiscowles1986/followers",
        "following_url": "https://api.github.com/users/Lewiscowles1986/following{/other_user}",
        "gists_url": "https://api.github.com/users/Lewiscowles1986/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Lewiscowles1986/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Lewiscowles1986/subscriptions",
        "organizations_url": "https://api.github.com/users/Lewiscowles1986/orgs",
        "repos_url": "https://api.github.com/users/Lewiscowles1986/repos",
        "events_url": "https://api.github.com/users/Lewiscowles1986/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Lewiscowles1986/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 17,
    "created_at": "2015-08-02T03:08:59Z",
    "updated_at": "2015-08-03T08:35:53Z",
    "closed_at": "2015-08-02T21:35:47Z",
    "author_association": "NONE",
    "body": "using the following html form\n\n``` HTML\n<h1>Debug Form</h1>\n<form action=\"/debug\" method=\"POST\">\n<input name=\"item[1][name]\" value=\"\" />\n<input name=\"item[2][name]\" value=\"\" />\n<button type=\"submit\">test</button>\n</form>\n```\n\nto the following flask application method / view\n\n``` python\n@app.route('/debug', methods=[\"GET\",\"POST\",\"PUT\",\"PATCH\",\"DELETE\"])\ndef debug_info():\n    return jsonify({\"data\":request.data,\"formdata\":request.form})\n```\n\nI get\n\n``` JSON\n{\n  \"data\": \"\", \n  \"formdata\": {\n    \"item[1][name]\": \"fdhnnhdsfsdslkkl\", \n    \"item[2][name]\": \"djdfhdjfh\"\n  }\n}\n```\n\nI expected to see\n\n``` JSON\n{\n  \"data\": \"\", \n  \"formdata\": {\n    \"item\":[\n      {\n         \"name\": \"fdhnnhdsfsdslkkl\"\n       },\n       { \n         \"name\": \"djdfhdjfh\"\n       }\n    ]\n  }\n}\n```\n\nThe first and actual output requires further, more explicit parsing, from a sub-optimal data structure to achieve a nice dictionary; but I cannot see how the flat structure of the request.form object could be helping anyone...\n",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/126988039",
            "html_url": "https://github.com/pallets/flask/issues/1545#issuecomment-126988039",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1545",
            "id": 126988039,
            "node_id": "MDEyOklzc3VlQ29tbWVudDEyNjk4ODAzOQ==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-08-02T05:02:36Z",
            "updated_at": "2015-08-02T05:02:36Z",
            "author_association": "MEMBER",
            "body": "You've given the inputs two different names, so of course you get two different values.  Give them the same name, and you get a list of values.  However, you cannot (basically by definition) get a nested structure from an HTML form, no matter what special names you try to give the inputs.  HTML forms are flat.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/127011898",
            "html_url": "https://github.com/pallets/flask/issues/1545#issuecomment-127011898",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1545",
            "id": 127011898,
            "node_id": "MDEyOklzc3VlQ29tbWVudDEyNzAxMTg5OA==",
            "user": {
                "login": "Lewiscowles1986",
                "id": 2605791,
                "node_id": "MDQ6VXNlcjI2MDU3OTE=",
                "avatar_url": "https://avatars3.githubusercontent.com/u/2605791?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/Lewiscowles1986",
                "html_url": "https://github.com/Lewiscowles1986",
                "followers_url": "https://api.github.com/users/Lewiscowles1986/followers",
                "following_url": "https://api.github.com/users/Lewiscowles1986/following{/other_user}",
                "gists_url": "https://api.github.com/users/Lewiscowles1986/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/Lewiscowles1986/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Lewiscowles1986/subscriptions",
                "organizations_url": "https://api.github.com/users/Lewiscowles1986/orgs",
                "repos_url": "https://api.github.com/users/Lewiscowles1986/repos",
                "events_url": "https://api.github.com/users/Lewiscowles1986/events{/privacy}",
                "received_events_url": "https://api.github.com/users/Lewiscowles1986/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-08-02T10:11:51Z",
            "updated_at": "2015-08-02T10:11:51Z",
            "author_association": "NONE",
            "body": "@davidism I think you may be confused mate. If I give two elements the same name there would be no identifier to link grouped elements. so...\n\nusing the following html form\n\n``` html\n<h1>Debug Form</h1>\n<form action=\"/debug\" method=\"POST\">\n<p>\n  <input name=\"item[1][name]\" value=\"\" />\n  <input name=\"item[1][price]\" value=\"\" />\n</p><p>\n  <input name=\"item[2][name]\" value=\"\" />\n  <input name=\"item[2][price]\" value=\"\" />\n</p>\n<button type=\"submit\">test</button>\n</form>\n```\n\nI would expect \n\n``` JSON\n{\n  \"data\": \"\", \n  \"formdata\": {\n    \"item\":[\n      {\n         \"name\": \"fdhnnhdsfsdslkkl\",\n         \"price\":\"3.99\"\n       },\n       { \n         \"name\": \"djdfhdjfh\",\n         \"price\":\"21.99\"\n       }\n    ]\n  }\n}\n```\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/127012617",
            "html_url": "https://github.com/pallets/flask/issues/1545#issuecomment-127012617",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1545",
            "id": 127012617,
            "node_id": "MDEyOklzc3VlQ29tbWVudDEyNzAxMjYxNw==",
            "user": {
                "login": "RonnyPfannschmidt",
                "id": 156838,
                "node_id": "MDQ6VXNlcjE1NjgzOA==",
                "avatar_url": "https://avatars1.githubusercontent.com/u/156838?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/RonnyPfannschmidt",
                "html_url": "https://github.com/RonnyPfannschmidt",
                "followers_url": "https://api.github.com/users/RonnyPfannschmidt/followers",
                "following_url": "https://api.github.com/users/RonnyPfannschmidt/following{/other_user}",
                "gists_url": "https://api.github.com/users/RonnyPfannschmidt/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/RonnyPfannschmidt/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/RonnyPfannschmidt/subscriptions",
                "organizations_url": "https://api.github.com/users/RonnyPfannschmidt/orgs",
                "repos_url": "https://api.github.com/users/RonnyPfannschmidt/repos",
                "events_url": "https://api.github.com/users/RonnyPfannschmidt/events{/privacy}",
                "received_events_url": "https://api.github.com/users/RonnyPfannschmidt/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-08-02T10:27:12Z",
            "updated_at": "2015-08-02T10:27:12Z",
            "author_association": "CONTRIBUTOR",
            "body": "the name is clearly a sting, there is no standard to tell how to mp that from/to a nested structure\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/127019598",
            "html_url": "https://github.com/pallets/flask/issues/1545#issuecomment-127019598",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1545",
            "id": 127019598,
            "node_id": "MDEyOklzc3VlQ29tbWVudDEyNzAxOTU5OA==",
            "user": {
                "login": "Lewiscowles1986",
                "id": 2605791,
                "node_id": "MDQ6VXNlcjI2MDU3OTE=",
                "avatar_url": "https://avatars3.githubusercontent.com/u/2605791?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/Lewiscowles1986",
                "html_url": "https://github.com/Lewiscowles1986",
                "followers_url": "https://api.github.com/users/Lewiscowles1986/followers",
                "following_url": "https://api.github.com/users/Lewiscowles1986/following{/other_user}",
                "gists_url": "https://api.github.com/users/Lewiscowles1986/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/Lewiscowles1986/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Lewiscowles1986/subscriptions",
                "organizations_url": "https://api.github.com/users/Lewiscowles1986/orgs",
                "repos_url": "https://api.github.com/users/Lewiscowles1986/repos",
                "events_url": "https://api.github.com/users/Lewiscowles1986/events{/privacy}",
                "received_events_url": "https://api.github.com/users/Lewiscowles1986/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-08-02T11:48:09Z",
            "updated_at": "2015-08-02T12:00:41Z",
            "author_association": "NONE",
            "body": "for now I am going to try using a helper to facilitate, but it means I will need to know how many `item`'s are being passed through\n\n``` python\ndef parse_nstring( form, name, patht ):\n    try:\n        key = \"\".join( [ name, '[', \"][\".join( patht ) , ']' ] )\n        return form[ key ]\n    except:\n        return None\n```\n\nit was modeled from the following structure using python\n\n``` python\nreq = {\"form\":{\"item[1][name]\":\"lewis\",\"item[2][name]\":\"peter\"}}\nparse_nstring( req['form'], \"item\", [\"1\",\"name\"] )\nparse_nstring( req['form'], \"item\", [\"2\",\"name\"] )\nparse_nstring( req['form'], \"item\", [\"2\",\"age\"] )\n\n```\n\nalso @RonnyPfannschmidt \"there is no standard to tell how to mp that from/to a nested structure\"...\nI've never actually had to map it before, and this is not my first rodeo\n\n[this](http://www.astro.umass.edu:8000/dicts#) covers passing formdata as dicts\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/127019903",
            "html_url": "https://github.com/pallets/flask/issues/1545#issuecomment-127019903",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1545",
            "id": 127019903,
            "node_id": "MDEyOklzc3VlQ29tbWVudDEyNzAxOTkwMw==",
            "user": {
                "login": "RonnyPfannschmidt",
                "id": 156838,
                "node_id": "MDQ6VXNlcjE1NjgzOA==",
                "avatar_url": "https://avatars1.githubusercontent.com/u/156838?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/RonnyPfannschmidt",
                "html_url": "https://github.com/RonnyPfannschmidt",
                "followers_url": "https://api.github.com/users/RonnyPfannschmidt/followers",
                "following_url": "https://api.github.com/users/RonnyPfannschmidt/following{/other_user}",
                "gists_url": "https://api.github.com/users/RonnyPfannschmidt/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/RonnyPfannschmidt/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/RonnyPfannschmidt/subscriptions",
                "organizations_url": "https://api.github.com/users/RonnyPfannschmidt/orgs",
                "repos_url": "https://api.github.com/users/RonnyPfannschmidt/repos",
                "events_url": "https://api.github.com/users/RonnyPfannschmidt/events{/privacy}",
                "received_events_url": "https://api.github.com/users/RonnyPfannschmidt/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-08-02T11:58:35Z",
            "updated_at": "2015-08-02T11:58:35Z",
            "author_association": "CONTRIBUTOR",
            "body": "there are some libraries that map such names to nested form validation (the path schemes may differ)\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/127019993",
            "html_url": "https://github.com/pallets/flask/issues/1545#issuecomment-127019993",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1545",
            "id": 127019993,
            "node_id": "MDEyOklzc3VlQ29tbWVudDEyNzAxOTk5Mw==",
            "user": {
                "login": "Lewiscowles1986",
                "id": 2605791,
                "node_id": "MDQ6VXNlcjI2MDU3OTE=",
                "avatar_url": "https://avatars3.githubusercontent.com/u/2605791?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/Lewiscowles1986",
                "html_url": "https://github.com/Lewiscowles1986",
                "followers_url": "https://api.github.com/users/Lewiscowles1986/followers",
                "following_url": "https://api.github.com/users/Lewiscowles1986/following{/other_user}",
                "gists_url": "https://api.github.com/users/Lewiscowles1986/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/Lewiscowles1986/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Lewiscowles1986/subscriptions",
                "organizations_url": "https://api.github.com/users/Lewiscowles1986/orgs",
                "repos_url": "https://api.github.com/users/Lewiscowles1986/repos",
                "events_url": "https://api.github.com/users/Lewiscowles1986/events{/privacy}",
                "received_events_url": "https://api.github.com/users/Lewiscowles1986/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-08-02T12:01:36Z",
            "updated_at": "2015-08-02T12:01:36Z",
            "author_association": "NONE",
            "body": "could you give me some examples please @RonnyPfannschmidt Google is not helping in the context of flask or libraries for this (without form abstraction like in WTForms)\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/127022312",
            "html_url": "https://github.com/pallets/flask/issues/1545#issuecomment-127022312",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1545",
            "id": 127022312,
            "node_id": "MDEyOklzc3VlQ29tbWVudDEyNzAyMjMxMg==",
            "user": {
                "login": "RonnyPfannschmidt",
                "id": 156838,
                "node_id": "MDQ6VXNlcjE1NjgzOA==",
                "avatar_url": "https://avatars1.githubusercontent.com/u/156838?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/RonnyPfannschmidt",
                "html_url": "https://github.com/RonnyPfannschmidt",
                "followers_url": "https://api.github.com/users/RonnyPfannschmidt/followers",
                "following_url": "https://api.github.com/users/RonnyPfannschmidt/following{/other_user}",
                "gists_url": "https://api.github.com/users/RonnyPfannschmidt/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/RonnyPfannschmidt/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/RonnyPfannschmidt/subscriptions",
                "organizations_url": "https://api.github.com/users/RonnyPfannschmidt/orgs",
                "repos_url": "https://api.github.com/users/RonnyPfannschmidt/repos",
                "events_url": "https://api.github.com/users/RonnyPfannschmidt/events{/privacy}",
                "received_events_url": "https://api.github.com/users/RonnyPfannschmidt/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-08-02T12:42:03Z",
            "updated_at": "2015-08-02T12:42:03Z",
            "author_association": "CONTRIBUTOR",
            "body": "form abstraction is exactly what i meant\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/127022768",
            "html_url": "https://github.com/pallets/flask/issues/1545#issuecomment-127022768",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1545",
            "id": 127022768,
            "node_id": "MDEyOklzc3VlQ29tbWVudDEyNzAyMjc2OA==",
            "user": {
                "login": "ThiefMaster",
                "id": 179599,
                "node_id": "MDQ6VXNlcjE3OTU5OQ==",
                "avatar_url": "https://avatars1.githubusercontent.com/u/179599?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/ThiefMaster",
                "html_url": "https://github.com/ThiefMaster",
                "followers_url": "https://api.github.com/users/ThiefMaster/followers",
                "following_url": "https://api.github.com/users/ThiefMaster/following{/other_user}",
                "gists_url": "https://api.github.com/users/ThiefMaster/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/ThiefMaster/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ThiefMaster/subscriptions",
                "organizations_url": "https://api.github.com/users/ThiefMaster/orgs",
                "repos_url": "https://api.github.com/users/ThiefMaster/repos",
                "events_url": "https://api.github.com/users/ThiefMaster/events{/privacy}",
                "received_events_url": "https://api.github.com/users/ThiefMaster/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-08-02T12:54:18Z",
            "updated_at": "2015-08-02T12:54:18Z",
            "author_association": "MEMBER",
            "body": "FYI, automated conversion from specially formatted field names to nested structures as a default on the framework level is a terrible idea. It is **not** up to the client to decide whether a variable on the server side should be a plain string or a list/dict.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/127024147",
            "html_url": "https://github.com/pallets/flask/issues/1545#issuecomment-127024147",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1545",
            "id": 127024147,
            "node_id": "MDEyOklzc3VlQ29tbWVudDEyNzAyNDE0Nw==",
            "user": {
                "login": "mattupstate",
                "id": 166176,
                "node_id": "MDQ6VXNlcjE2NjE3Ng==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/166176?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/mattupstate",
                "html_url": "https://github.com/mattupstate",
                "followers_url": "https://api.github.com/users/mattupstate/followers",
                "following_url": "https://api.github.com/users/mattupstate/following{/other_user}",
                "gists_url": "https://api.github.com/users/mattupstate/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/mattupstate/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mattupstate/subscriptions",
                "organizations_url": "https://api.github.com/users/mattupstate/orgs",
                "repos_url": "https://api.github.com/users/mattupstate/repos",
                "events_url": "https://api.github.com/users/mattupstate/events{/privacy}",
                "received_events_url": "https://api.github.com/users/mattupstate/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-08-02T13:28:55Z",
            "updated_at": "2015-08-02T13:28:55Z",
            "author_association": "CONTRIBUTOR",
            "body": "\"Just use JSON\"\u2122\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/127042418",
            "html_url": "https://github.com/pallets/flask/issues/1545#issuecomment-127042418",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1545",
            "id": 127042418,
            "node_id": "MDEyOklzc3VlQ29tbWVudDEyNzA0MjQxOA==",
            "user": {
                "login": "Lewiscowles1986",
                "id": 2605791,
                "node_id": "MDQ6VXNlcjI2MDU3OTE=",
                "avatar_url": "https://avatars3.githubusercontent.com/u/2605791?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/Lewiscowles1986",
                "html_url": "https://github.com/Lewiscowles1986",
                "followers_url": "https://api.github.com/users/Lewiscowles1986/followers",
                "following_url": "https://api.github.com/users/Lewiscowles1986/following{/other_user}",
                "gists_url": "https://api.github.com/users/Lewiscowles1986/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/Lewiscowles1986/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Lewiscowles1986/subscriptions",
                "organizations_url": "https://api.github.com/users/Lewiscowles1986/orgs",
                "repos_url": "https://api.github.com/users/Lewiscowles1986/repos",
                "events_url": "https://api.github.com/users/Lewiscowles1986/events{/privacy}",
                "received_events_url": "https://api.github.com/users/Lewiscowles1986/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-08-02T16:34:23Z",
            "updated_at": "2015-08-02T16:42:35Z",
            "author_association": "NONE",
            "body": "@RonnyPfannschmidt  I suspected so, the reason for not wanting form abstraction is that it still deals with known fields... Not good for rapid prototyping.\n\n@ThiefMaster The client is not \"deciding\", it is submitting data that has a clear form and structure, which I think would be nice for Flask to play along with.\n\n@mattupstate :+1: :smile: I do that in another flask example, where I literally send JSON to the server, but this is for something I want to try out using HTML forms, where generating JSON is not then a client-side problem. I have a functional demo in PHP, but meh, I prefer to use Flask as this is an experiment in rapid prototyping with Flask.\n\n> **N.B.** Thank you all for your help, I am not ready to give up on my concept yet, but I do appreciate your advice, and time, and patience.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/127042687",
            "html_url": "https://github.com/pallets/flask/issues/1545#issuecomment-127042687",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1545",
            "id": 127042687,
            "node_id": "MDEyOklzc3VlQ29tbWVudDEyNzA0MjY4Nw==",
            "user": {
                "login": "Lewiscowles1986",
                "id": 2605791,
                "node_id": "MDQ6VXNlcjI2MDU3OTE=",
                "avatar_url": "https://avatars3.githubusercontent.com/u/2605791?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/Lewiscowles1986",
                "html_url": "https://github.com/Lewiscowles1986",
                "followers_url": "https://api.github.com/users/Lewiscowles1986/followers",
                "following_url": "https://api.github.com/users/Lewiscowles1986/following{/other_user}",
                "gists_url": "https://api.github.com/users/Lewiscowles1986/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/Lewiscowles1986/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Lewiscowles1986/subscriptions",
                "organizations_url": "https://api.github.com/users/Lewiscowles1986/orgs",
                "repos_url": "https://api.github.com/users/Lewiscowles1986/repos",
                "events_url": "https://api.github.com/users/Lewiscowles1986/events{/privacy}",
                "received_events_url": "https://api.github.com/users/Lewiscowles1986/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-08-02T16:40:19Z",
            "updated_at": "2015-08-02T16:49:52Z",
            "author_association": "NONE",
            "body": "**_Update**_\n\nWent for a walk in the park with my wife, came home, answered comments, thought of another idea...\n\n``` python\nimport re\n\n'''\nParses depth, encoded names into a JSON'ish dictionary structure\n''' \ndef parse_to_dict_val( key, value, dict={} ):\n    patt = re.compile(r'(?P<name>.*?)[\\[](?P<key>.*?)[\\]](?P<remaining>.*?)$')\n    matcher = patt.match( key )\n    tmp = ( matcher.groupdict() if not matcher == None else { \"name\": key, \"remaining\": '' } )\n    if tmp[ 'remaining' ] == '':\n        dict[ tmp[ 'name' ] ] = value\n    else: # looks like we have more to do\n        fwdDict = ( dict[ tmp[ 'name' ] ] if tmp[ 'name' ] in dict else {} )\n        tmp2 = parse_to_dict_val( tmp[ 'key' ], value, fwdDict )\n        dict[ tmp[ 'name' ] ] = tmp2\n    return dict\n\n'''\nParses dictionary for encoded keys signifying depth\n'''\ndef parse_to_dict_vals( dictin ):\n    dictout = {}\n    for key, value in dictin.items():\n        parse_to_dict_val( key, value, dictout )\n    return dictout\n\nreq = {\"form\":{\"item[1][name]\":\"bob\",\"item[2][name]\":\"dylan\",\"nameflat\":\"jimmy\"}}\n\nparse_to_dict_vals( req[ 'form' ] )\n\n```\n\n> _it doesn't work yet, but it might get me and anyone else like me to a happy end-result_\n\n:blush: Looks like that code is solid. Again this is only for rapid prototyping, but I think, even if included as a utility, the parse_to_dict_vals function is a nice way of being able to model data structures in-browser.\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/127050690",
            "html_url": "https://github.com/pallets/flask/issues/1545#issuecomment-127050690",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1545",
            "id": 127050690,
            "node_id": "MDEyOklzc3VlQ29tbWVudDEyNzA1MDY5MA==",
            "user": {
                "login": "RonnyPfannschmidt",
                "id": 156838,
                "node_id": "MDQ6VXNlcjE1NjgzOA==",
                "avatar_url": "https://avatars1.githubusercontent.com/u/156838?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/RonnyPfannschmidt",
                "html_url": "https://github.com/RonnyPfannschmidt",
                "followers_url": "https://api.github.com/users/RonnyPfannschmidt/followers",
                "following_url": "https://api.github.com/users/RonnyPfannschmidt/following{/other_user}",
                "gists_url": "https://api.github.com/users/RonnyPfannschmidt/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/RonnyPfannschmidt/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/RonnyPfannschmidt/subscriptions",
                "organizations_url": "https://api.github.com/users/RonnyPfannschmidt/orgs",
                "repos_url": "https://api.github.com/users/RonnyPfannschmidt/repos",
                "events_url": "https://api.github.com/users/RonnyPfannschmidt/events{/privacy}",
                "received_events_url": "https://api.github.com/users/RonnyPfannschmidt/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-08-02T17:54:54Z",
            "updated_at": "2015-08-02T17:54:54Z",
            "author_association": "CONTRIBUTOR",
            "body": "again, there is no universal standard for such a structure, for structured data you should pass json from the browser, not form-encode with a \"interesting\" naming scheme and hope for the best\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/127053032",
            "html_url": "https://github.com/pallets/flask/issues/1545#issuecomment-127053032",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1545",
            "id": 127053032,
            "node_id": "MDEyOklzc3VlQ29tbWVudDEyNzA1MzAzMg==",
            "user": {
                "login": "Lewiscowles1986",
                "id": 2605791,
                "node_id": "MDQ6VXNlcjI2MDU3OTE=",
                "avatar_url": "https://avatars3.githubusercontent.com/u/2605791?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/Lewiscowles1986",
                "html_url": "https://github.com/Lewiscowles1986",
                "followers_url": "https://api.github.com/users/Lewiscowles1986/followers",
                "following_url": "https://api.github.com/users/Lewiscowles1986/following{/other_user}",
                "gists_url": "https://api.github.com/users/Lewiscowles1986/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/Lewiscowles1986/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Lewiscowles1986/subscriptions",
                "organizations_url": "https://api.github.com/users/Lewiscowles1986/orgs",
                "repos_url": "https://api.github.com/users/Lewiscowles1986/repos",
                "events_url": "https://api.github.com/users/Lewiscowles1986/events{/privacy}",
                "received_events_url": "https://api.github.com/users/Lewiscowles1986/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-08-02T18:43:59Z",
            "updated_at": "2015-08-02T18:43:59Z",
            "author_association": "NONE",
            "body": "@RonnyPfannschmidt with the greatest of respect, no standard exists, before it exists... If we simply threw our hands up in the air and used something that existed all the time, but was not a good fit, every time we wanted to do something new, we would loose out on a lot, and would likely still be feeding punch cards into a mainframe we have to book time on.\n\nThere are other languages that handle nested form data as I have mentioned, but I would like to use Flask and python. I do accept, it may not be for everyone, and may not be for the core of Flask, it seems others have strong opinions on this, but this is valid code...\n\nAnyway I have now completed the rapid prototyping hierarchical form data functions. \n\n**Objections and Answers I can think of**  \n- If someone throws data your app is not meant to be dealing with, you should not be using it! This is for working with known data, without abstracting HTML Forms in your app, not sending data directly to a database or anything insane. That is it; and is all I will be using it for...\n- If someone throws too much data (for recursion bomb attacks on nested structures etc), you should be able to easily add a fourth param as a counter, or reject the request if too large... JSON is likely as attackable as this format... A Simple fix is put nginx, or similar in front of the application nodes, and adjust their settings to reject the request before it reaches the app...\n- If you are worried about people sending the wrong data-types to properties, add checking to the properties you wish to check before operating on them...\n- If you would rather write more code to abstract a form, and / or use front-end to transform the data into JSON; be my guest! The front-end is not exactly the best place to be building payloads to pass to the back-end IMHO; and it is certainly not \"rapid development\", or \"lean\" to have to abstract every form, of every part of your app. Instead I would focus on building validation into the models, and classes you use themselves, so anything that writes to them follows a structured and mediated approach to modifying state (which is all WTForms achieves). You will spend less time building front-ends, and clients to an app with consistent data handling at lower-levels, and less time re-writing or dealing with edge-cases; pushing real _end-user_ benefits, as you can focus on adding more features...\n\nanyway https://gist.github.com/Lewiscowles1986/380425897b456a3f0d5b use-it, don't use it, I GPL'd it, so it's free free\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/127068619",
            "html_url": "https://github.com/pallets/flask/issues/1545#issuecomment-127068619",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1545",
            "id": 127068619,
            "node_id": "MDEyOklzc3VlQ29tbWVudDEyNzA2ODYxOQ==",
            "user": {
                "login": "RonnyPfannschmidt",
                "id": 156838,
                "node_id": "MDQ6VXNlcjE1NjgzOA==",
                "avatar_url": "https://avatars1.githubusercontent.com/u/156838?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/RonnyPfannschmidt",
                "html_url": "https://github.com/RonnyPfannschmidt",
                "followers_url": "https://api.github.com/users/RonnyPfannschmidt/followers",
                "following_url": "https://api.github.com/users/RonnyPfannschmidt/following{/other_user}",
                "gists_url": "https://api.github.com/users/RonnyPfannschmidt/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/RonnyPfannschmidt/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/RonnyPfannschmidt/subscriptions",
                "organizations_url": "https://api.github.com/users/RonnyPfannschmidt/orgs",
                "repos_url": "https://api.github.com/users/RonnyPfannschmidt/repos",
                "events_url": "https://api.github.com/users/RonnyPfannschmidt/events{/privacy}",
                "received_events_url": "https://api.github.com/users/RonnyPfannschmidt/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-08-02T20:39:20Z",
            "updated_at": "2015-08-02T20:39:20Z",
            "author_association": "CONTRIBUTOR",
            "body": "@Lewiscowles1986 its entirely valid to put this into a opinionated extension/custom lib and use it for the prototyping mechanism you came up\n\nthis is one of the reasons why flask does _not_ come with a standard tool for exact form handling,\nflexible extensions and libraries leave the experienced users so many more ways choose what they need for their use-cases\n\nthis is really important, since many use-cases and design choices can look wrong from a different and/or uninformed perspective.  \n\nhowever since json and fully blown form validation already have well working solutions for this as well,\nhaving a custom semi-standard format for it seems overbearing and a maintenance burden at the framework level _i_ don't see flask or werkzeug as place for this\n\nby now its a well accepted idea being well-accepting of \"anything\" instead of being strict leads to a plaque of semi-compatible messy implementations (the best example for such a mess is webdav and the related standards on top (caldav/carddav sync)\n\nwhile not being strict eases initial development and rapid experimentation it has immense costs for further evolution and inter-op\n\nthe loss that gradually incurs over time due to ever growing implementation complexity by far out-weights the potential for short term gains\n\nmy personal opinion these days is that anything that does not use well and strictly defined hierarchical data formats for prototyping of hierarchical structures will generate and immense maintenance cost\n\nas for rapid prototyping - my own experience is that automatically generating forms from annotated models and enriching those with custom behavior as the need grows tends, can easily win over prototyping from html\n\nhowever in such cases the auto-generated form handling already completely handles the un-flattening of the form as well as the rendering of the elements to html\n\nso from my point of view the structure you want to advocate is an intermediate development step that can easily be replaced by already existing well defined structural formats as well as already existing structure oriented unflattering based on more integrated data validation\n\nwith this i also end my day, its quite late\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/127074162",
            "html_url": "https://github.com/pallets/flask/issues/1545#issuecomment-127074162",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1545",
            "id": 127074162,
            "node_id": "MDEyOklzc3VlQ29tbWVudDEyNzA3NDE2Mg==",
            "user": {
                "login": "Lewiscowles1986",
                "id": 2605791,
                "node_id": "MDQ6VXNlcjI2MDU3OTE=",
                "avatar_url": "https://avatars3.githubusercontent.com/u/2605791?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/Lewiscowles1986",
                "html_url": "https://github.com/Lewiscowles1986",
                "followers_url": "https://api.github.com/users/Lewiscowles1986/followers",
                "following_url": "https://api.github.com/users/Lewiscowles1986/following{/other_user}",
                "gists_url": "https://api.github.com/users/Lewiscowles1986/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/Lewiscowles1986/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Lewiscowles1986/subscriptions",
                "organizations_url": "https://api.github.com/users/Lewiscowles1986/orgs",
                "repos_url": "https://api.github.com/users/Lewiscowles1986/repos",
                "events_url": "https://api.github.com/users/Lewiscowles1986/events{/privacy}",
                "received_events_url": "https://api.github.com/users/Lewiscowles1986/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-08-02T21:35:47Z",
            "updated_at": "2015-08-02T21:35:47Z",
            "author_association": "NONE",
            "body": "@RonnyPfannschmidt  :+1:  I am again, as I have already said, and now reiterating _again_ that I am not advocating accepting \"anything\", but rather making it easier to accept form data in a structured format without tooling lots of code to facilitate.  \n\n> being well-accepting of \"anything\" instead of being strict leads to a plaque of semi-compatible messy implementations\n\nHave a great night, I'm going to close this now anyway :wink: \n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/127144492",
            "html_url": "https://github.com/pallets/flask/issues/1545#issuecomment-127144492",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1545",
            "id": 127144492,
            "node_id": "MDEyOklzc3VlQ29tbWVudDEyNzE0NDQ5Mg==",
            "user": {
                "login": "RonnyPfannschmidt",
                "id": 156838,
                "node_id": "MDQ6VXNlcjE1NjgzOA==",
                "avatar_url": "https://avatars1.githubusercontent.com/u/156838?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/RonnyPfannschmidt",
                "html_url": "https://github.com/RonnyPfannschmidt",
                "followers_url": "https://api.github.com/users/RonnyPfannschmidt/followers",
                "following_url": "https://api.github.com/users/RonnyPfannschmidt/following{/other_user}",
                "gists_url": "https://api.github.com/users/RonnyPfannschmidt/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/RonnyPfannschmidt/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/RonnyPfannschmidt/subscriptions",
                "organizations_url": "https://api.github.com/users/RonnyPfannschmidt/orgs",
                "repos_url": "https://api.github.com/users/RonnyPfannschmidt/repos",
                "events_url": "https://api.github.com/users/RonnyPfannschmidt/events{/privacy}",
                "received_events_url": "https://api.github.com/users/RonnyPfannschmidt/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-08-03T07:03:55Z",
            "updated_at": "2015-08-03T07:03:55Z",
            "author_association": "CONTRIBUTOR",
            "body": "@Lewiscowles1986 by chance i stumbled upon https://darobin.github.io/formic/specs/json/ due to work this morning,\n\nso there already is a in browser standard to turn the structure you roughly describe into properly formed json documents for submission,\nand additionally it handles many edge-cases your code snipped doesn't even think of\n"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/127164076",
            "html_url": "https://github.com/pallets/flask/issues/1545#issuecomment-127164076",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1545",
            "id": 127164076,
            "node_id": "MDEyOklzc3VlQ29tbWVudDEyNzE2NDA3Ng==",
            "user": {
                "login": "Lewiscowles1986",
                "id": 2605791,
                "node_id": "MDQ6VXNlcjI2MDU3OTE=",
                "avatar_url": "https://avatars3.githubusercontent.com/u/2605791?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/Lewiscowles1986",
                "html_url": "https://github.com/Lewiscowles1986",
                "followers_url": "https://api.github.com/users/Lewiscowles1986/followers",
                "following_url": "https://api.github.com/users/Lewiscowles1986/following{/other_user}",
                "gists_url": "https://api.github.com/users/Lewiscowles1986/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/Lewiscowles1986/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Lewiscowles1986/subscriptions",
                "organizations_url": "https://api.github.com/users/Lewiscowles1986/orgs",
                "repos_url": "https://api.github.com/users/Lewiscowles1986/repos",
                "events_url": "https://api.github.com/users/Lewiscowles1986/events{/privacy}",
                "received_events_url": "https://api.github.com/users/Lewiscowles1986/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-08-03T08:35:53Z",
            "updated_at": "2015-08-03T08:35:53Z",
            "author_association": "NONE",
            "body": "@RonnyPfannschmidt thanks for the link! You know that is an unofficial draft sample that is inconsistent, unsupported (at least as far as my testing goes with Firefox and Chrome), and the only thing it adds other than inconsistency, I can see is file support, which due to chunked uploads etc should be abstracted in-browser where supported.\n\nYesterday everyone was so...\n\n> universal standard\n\nToday seems different. Why?\n\n`EXAMPLE 6: Such Deep` was more than a little worrying\n- that it would generate inconsistent output of tuple or object, depending upon non-numeric key, which is something my code does not have... keys where defined, shall be explicit\n  - so while I would not at present support \"people[][name]\"=\"bob\", there is very good reasoning for this. Given no key to link the [name] to specific siblings, the implementation would be forced to work on the understanding that \n    - the browser encodes, and transmits all form data in order of definition\n    - the front-end would then be structurally limited in this way\n    - this would also predicate that flask guarantees MultiDict & dict comply with order added for all keys, and decodes keys in order of sending. \n\nCall me crazy, but that doesn't seem nearly as useful as requiring explicit keying, and unique naming for all elements, not allowing sending of multiple elements without specified key for all, and overwriting of duplicate keys with latest parsed value (which cannot be guaranteed due to dict, but, should not come up in a good front-end implementation anyway).\n\nI think the confusion might be that my code is not for generating JSON. It generates a dictionary... I output JSON from a view, as there is standard tooling for this, and as with all innovation, I don't want to be completely off the reservation, and loose all ability to measure, so I can view the structure in a simple, clear format.\n\nAgain, this is not going into a production web-app or being sold to anyone, this is an experiment in rapid prototyping in flask, and I have closed the issue as I see it now more as a could have for applications, but it should not require additional W3C standards, or any additional front-end work, the idea is to keep lean on the front-end, and allow the back-end more logical format to work with...\n"
        }
    ]
}