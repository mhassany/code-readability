{
    "url": "https://api.github.com/repos/pallets/flask/issues/1253",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/1253/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/1253/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/1253/events",
    "html_url": "https://github.com/pallets/flask/pull/1253",
    "id": 49718858,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MjQ4NTE3ODY=",
    "number": 1253,
    "title": "solution for running context dependent attributes",
    "user": {
        "login": "mastier",
        "id": 1609672,
        "node_id": "MDQ6VXNlcjE2MDk2NzI=",
        "avatar_url": "https://avatars1.githubusercontent.com/u/1609672?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mastier",
        "html_url": "https://github.com/mastier",
        "followers_url": "https://api.github.com/users/mastier/followers",
        "following_url": "https://api.github.com/users/mastier/following{/other_user}",
        "gists_url": "https://api.github.com/users/mastier/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/mastier/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mastier/subscriptions",
        "organizations_url": "https://api.github.com/users/mastier/orgs",
        "repos_url": "https://api.github.com/users/mastier/repos",
        "events_url": "https://api.github.com/users/mastier/events{/privacy}",
        "received_events_url": "https://api.github.com/users/mastier/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2014-11-21T16:39:21Z",
    "updated_at": "2015-10-31T03:50:47Z",
    "closed_at": "2015-10-31T03:50:08Z",
    "author_association": "NONE",
    "pull_request": {
        "url": "https://api.github.com/repos/pallets/flask/pulls/1253",
        "html_url": "https://github.com/pallets/flask/pull/1253",
        "diff_url": "https://github.com/pallets/flask/pull/1253.diff",
        "patch_url": "https://github.com/pallets/flask/pull/1253.patch"
    },
    "body": "It's not the best solution. It's just a concept of running out from situation when I need to get context dependant data for almost every view.\n\n```\nclass MyView(BaseView):\n    methods = ['GET']\n    def dispatch_request(self):\n        super(MyView, self).dispatch_request()\n```\n\nto get some attributes, like items in navigation menu\n\n```\nclass BaseView(View):\n    \"\"\"\n    BaseView provides parent class for most of the other views\n    giving the content for navigation bar etc.\n    \"\"\"\n\n    content = {}\n    content['current_user'] = current_user\n\n    def dispatch_request(self):\n        \"\"\"\n        function dispatch_request is needed here, because db require\n        app context is provided only in the dispatch_request scope\n        \"\"\"\n        self.content['navigation_projects'] = sorted(get_project_mapping(db).keys())\n```\n\n`get_project_mapping is` is a reusable function\n\n```\ndef get_project_mapping(db):\n    projects_dict = {}\n    projects = db.session.query(Project).filter(Project.name != None)\n    for p in projects:\n        projects_dict[p.name] = {\n            'some_value: p.some_value,\n        }\n    return projects_dict\n```\n",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/152690311",
            "html_url": "https://github.com/pallets/flask/pull/1253#issuecomment-152690311",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/1253",
            "id": 152690311,
            "node_id": "MDEyOklzc3VlQ29tbWVudDE1MjY5MDMxMQ==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2015-10-31T03:50:08Z",
            "updated_at": "2015-10-31T03:50:47Z",
            "author_association": "MEMBER",
            "body": "I'm having trouble understanding the problem you're trying to solve here.  I have a feeling there's a better way to do what you want.  If you can explain with a complete example (or, better yet, test cases), I'll look into this again.  Closing for now.\n"
        }
    ]
}