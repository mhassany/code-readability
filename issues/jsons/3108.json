{
    "url": "https://api.github.com/repos/pallets/flask/issues/3108",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/3108/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/3108/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/3108/events",
    "html_url": "https://github.com/pallets/flask/issues/3108",
    "id": 415878424,
    "node_id": "MDU6SXNzdWU0MTU4Nzg0MjQ=",
    "number": 3108,
    "title": "config option for \"flask run\" (e.g. --dotenv/-e)",
    "user": {
        "login": "jab",
        "id": 64992,
        "node_id": "MDQ6VXNlcjY0OTky",
        "avatar_url": "https://avatars1.githubusercontent.com/u/64992?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jab",
        "html_url": "https://github.com/jab",
        "followers_url": "https://api.github.com/users/jab/followers",
        "following_url": "https://api.github.com/users/jab/following{/other_user}",
        "gists_url": "https://api.github.com/users/jab/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jab/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jab/subscriptions",
        "organizations_url": "https://api.github.com/users/jab/orgs",
        "repos_url": "https://api.github.com/users/jab/repos",
        "events_url": "https://api.github.com/users/jab/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jab/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 5,
    "created_at": "2019-02-28T23:58:09Z",
    "updated_at": "2019-10-23T09:58:01Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "body": "Would it make sense to allow passing a `--config/-c` option to `flask run`, that would then be exposed to users somehow for subsequent passing to e.g. `app.config.from_pyfile()`?\r\n\r\n(I'm imagining this done in a reusable way so that a \"flask gunicorn\" custom command (the likes of which I've already implemented) could accept and expose a `-c` value similarly, so that the app could be configured from this same provided path whether running in development or production.)\r\n\r\nThis would reduce the dependence on an environment variable to specify this. Reason I ask is that many of the Flask users I'm supporting are allergic to environment variables for the reasons mentioned in #3095, and have been missing some way to pass a CLI option to `flask run` to help configure their apps. Thanks \ud83d\ude0a",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/468521360",
            "html_url": "https://github.com/pallets/flask/issues/3108#issuecomment-468521360",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/3108",
            "id": 468521360,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ2ODUyMTM2MA==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2019-03-01T02:45:50Z",
            "updated_at": "2019-03-01T02:48:25Z",
            "author_association": "MEMBER",
            "body": "I think we might have to disagree about env vars to some degree. We did add support for python-dotenv to read a `.flaskenv` file so that you don't have to export the vars in your terminal, maybe that mitigates some of your concerns.\r\n\r\nThe issue I see with adding a config option is that it now dictates one way to configure the app that's not portable to how you'd be deploying to production. If users use this and then use mod_wsgi, for example, they'd have to read the config themselves anyway. It lends preference to `from_pyfile` as opposed to other functions in Flask or patterns in tutorials. It wouldn't solve the issue with `FLASK_APP` and `FLASK_ENV`, which aren't set from config.\r\n\r\nI think you might be looking for a custom run command that's more appropriate to your (and probably others) use cases. That might be a good fit for an extension that you'd then install for each of your projects. The docs on Flask's CLI document how extensions can register commands automatically. For example, you could register a `run` command that made assumptions about where the app is, and what its env and config are.\r\n\r\nYou could also create your own `FlaskGroup` in a `cli.py` file, and register your app with it instead of loading from `FLASK_APP`. You could add options and extra processing to this cli group. And if you're using setuptools, you can add an entry point to this as a `project` command instead of the `flask` command."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/476876946",
            "html_url": "https://github.com/pallets/flask/issues/3108#issuecomment-476876946",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/3108",
            "id": 476876946,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ3Njg3Njk0Ng==",
            "user": {
                "login": "jab",
                "id": 64992,
                "node_id": "MDQ6VXNlcjY0OTky",
                "avatar_url": "https://avatars1.githubusercontent.com/u/64992?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/jab",
                "html_url": "https://github.com/jab",
                "followers_url": "https://api.github.com/users/jab/followers",
                "following_url": "https://api.github.com/users/jab/following{/other_user}",
                "gists_url": "https://api.github.com/users/jab/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/jab/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jab/subscriptions",
                "organizations_url": "https://api.github.com/users/jab/orgs",
                "repos_url": "https://api.github.com/users/jab/repos",
                "events_url": "https://api.github.com/users/jab/events{/privacy}",
                "received_events_url": "https://api.github.com/users/jab/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2019-03-26T22:25:46Z",
            "updated_at": "2019-03-26T22:29:09Z",
            "author_association": "MEMBER",
            "body": "Thanks so much for the helpful reply, @davidism!\r\n\r\nI decided to embrace environment variables after all, in a very particular way. After deciding on dotenv as a configuration storage format, and finding Flask CLI's built-in dotenv support only able to get us part of the way there, here's what I did:\r\n\r\nI ended up subclassing `FlaskGroup` to add support for passing (one or more) `-e/--dotenv` paths as a Flask CLI option, which my lightly-customized `flask` CLI sources into the environment before then loading a user's app. This allows a user to configure and start their app with a command like `path/to/my/project/bin/flask -e qa.env run`, instead of something like `cd path/to/my/project; set -a; source qa.env; ./bin/flask run` (no more $PWD sensitivity!).\r\n\r\nUsers implement a `config_from_environ.py` which parses and exposes their app settings from `os.environ`, and then call `app.config.from_object('config_from_environ')`. By moving the logic of deciding which environment to read settings for (and then populate into the environment), into the outer `flask run` layer, it lets the app itself presume that the environ has already been populated and merely read from it.\r\n\r\nSince I also provide a `flask run-gunicorn` custom subcommand, this `-e` option does end up being portable to production. The tests likewise source a test.env into the environment before importing the app and running its tests. So there is parity in how the app is configured between dev, qa, prod, testing, etc. and there is no need for an app factory function! I should have made it clearer in the description that I agree that dev/prod parity should be a requirement for what this ticket is proposing. I can update the title / description with a better proposal if that makes sense.\r\n\r\nIf we add the constraint of merely improving Flask's existing dotenv support (in the case that dotenv is installed) to accept a similar `-e` option, rather than being limited to just sourcing a single, hidden .env file if it exists in the current directory, and given the existence of extensions like https://github.com/doobeh/flask-gunicorn that allow this approach to scale to production, do you think there might actually be some more-universal improvement to flask CLI's dotenv support that we could make here?\r\n\r\nThanks again for the FlaskGroup tip and for your consideration!"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/497957582",
            "html_url": "https://github.com/pallets/flask/issues/3108#issuecomment-497957582",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/3108",
            "id": 497957582,
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ5Nzk1NzU4Mg==",
            "user": {
                "login": "davidism",
                "id": 1242887,
                "node_id": "MDQ6VXNlcjEyNDI4ODc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/davidism",
                "html_url": "https://github.com/davidism",
                "followers_url": "https://api.github.com/users/davidism/followers",
                "following_url": "https://api.github.com/users/davidism/following{/other_user}",
                "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
                "organizations_url": "https://api.github.com/users/davidism/orgs",
                "repos_url": "https://api.github.com/users/davidism/repos",
                "events_url": "https://api.github.com/users/davidism/events{/privacy}",
                "received_events_url": "https://api.github.com/users/davidism/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2019-06-01T16:16:33Z",
            "updated_at": "2019-06-01T16:16:33Z",
            "author_association": "MEMBER",
            "body": "After discussion at the sprint, we're thinking of adding a `--dotenv` (or similarly named) option to change what dotenv file is loaded. This helps in situations where the current directory is above the the application directory, so autodetection doesn't work."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/529277709",
            "html_url": "https://github.com/pallets/flask/issues/3108#issuecomment-529277709",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/3108",
            "id": 529277709,
            "node_id": "MDEyOklzc3VlQ29tbWVudDUyOTI3NzcwOQ==",
            "user": {
                "login": "zhaoyongjie",
                "id": 2016594,
                "node_id": "MDQ6VXNlcjIwMTY1OTQ=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/2016594?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/zhaoyongjie",
                "html_url": "https://github.com/zhaoyongjie",
                "followers_url": "https://api.github.com/users/zhaoyongjie/followers",
                "following_url": "https://api.github.com/users/zhaoyongjie/following{/other_user}",
                "gists_url": "https://api.github.com/users/zhaoyongjie/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/zhaoyongjie/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zhaoyongjie/subscriptions",
                "organizations_url": "https://api.github.com/users/zhaoyongjie/orgs",
                "repos_url": "https://api.github.com/users/zhaoyongjie/repos",
                "events_url": "https://api.github.com/users/zhaoyongjie/events{/privacy}",
                "received_events_url": "https://api.github.com/users/zhaoyongjie/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2019-09-09T02:29:52Z",
            "updated_at": "2019-09-09T02:29:52Z",
            "author_association": "NONE",
            "body": "Can we provide a environment var to load specify file?"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/545366896",
            "html_url": "https://github.com/pallets/flask/issues/3108#issuecomment-545366896",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/3108",
            "id": 545366896,
            "node_id": "MDEyOklzc3VlQ29tbWVudDU0NTM2Njg5Ng==",
            "user": {
                "login": "qixiangyang",
                "id": 9353474,
                "node_id": "MDQ6VXNlcjkzNTM0NzQ=",
                "avatar_url": "https://avatars2.githubusercontent.com/u/9353474?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/qixiangyang",
                "html_url": "https://github.com/qixiangyang",
                "followers_url": "https://api.github.com/users/qixiangyang/followers",
                "following_url": "https://api.github.com/users/qixiangyang/following{/other_user}",
                "gists_url": "https://api.github.com/users/qixiangyang/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/qixiangyang/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/qixiangyang/subscriptions",
                "organizations_url": "https://api.github.com/users/qixiangyang/orgs",
                "repos_url": "https://api.github.com/users/qixiangyang/repos",
                "events_url": "https://api.github.com/users/qixiangyang/events{/privacy}",
                "received_events_url": "https://api.github.com/users/qixiangyang/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2019-10-23T09:58:00Z",
            "updated_at": "2019-10-23T09:58:00Z",
            "author_association": "NONE",
            "body": "Set environment variable (key=value).\r\n\r\nPass variables to the execution environment. Ex.:\r\n\r\n$ gunicorn -b 127.0.0.1:8000 --env FOO=1 test:app\r\nand test for the foo variable environment in your application.\r\n\r\nfrom: http://docs.gunicorn.org/en/stable/settings.html"
        }
    ]
}