{
    "url": "https://api.github.com/repos/pallets/flask/issues/3266",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/3266/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/3266/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/3266/events",
    "html_url": "https://github.com/pallets/flask/pull/3266",
    "id": 458257574,
    "node_id": "MDExOlB1bGxSZXF1ZXN0Mjg5OTA0NTMx",
    "number": 3266,
    "title": "always pass InternalServerError instance to 500 handler",
    "user": {
        "login": "davidism",
        "id": 1242887,
        "node_id": "MDQ6VXNlcjEyNDI4ODc=",
        "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidism",
        "html_url": "https://github.com/davidism",
        "followers_url": "https://api.github.com/users/davidism/followers",
        "following_url": "https://api.github.com/users/davidism/following{/other_user}",
        "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
        "organizations_url": "https://api.github.com/users/davidism/orgs",
        "repos_url": "https://api.github.com/users/davidism/repos",
        "events_url": "https://api.github.com/users/davidism/events{/privacy}",
        "received_events_url": "https://api.github.com/users/davidism/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": {
        "url": "https://api.github.com/repos/pallets/flask/milestones/3",
        "html_url": "https://github.com/pallets/flask/milestone/3",
        "labels_url": "https://api.github.com/repos/pallets/flask/milestones/3/labels",
        "id": 3093266,
        "node_id": "MDk6TWlsZXN0b25lMzA5MzI2Ng==",
        "number": 3,
        "title": "1.1.0",
        "description": "",
        "creator": {
            "login": "davidism",
            "id": 1242887,
            "node_id": "MDQ6VXNlcjEyNDI4ODc=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/davidism",
            "html_url": "https://github.com/davidism",
            "followers_url": "https://api.github.com/users/davidism/followers",
            "following_url": "https://api.github.com/users/davidism/following{/other_user}",
            "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/davidism/subscriptions",
            "organizations_url": "https://api.github.com/users/davidism/orgs",
            "repos_url": "https://api.github.com/users/davidism/repos",
            "events_url": "https://api.github.com/users/davidism/events{/privacy}",
            "received_events_url": "https://api.github.com/users/davidism/received_events",
            "type": "User",
            "site_admin": false
        },
        "open_issues": 0,
        "closed_issues": 48,
        "state": "closed",
        "created_at": "2018-02-06T16:14:43Z",
        "updated_at": "2019-07-06T22:03:23Z",
        "due_on": null,
        "closed_at": "2019-07-06T22:03:23Z"
    },
    "comments": 2,
    "created_at": "2019-06-19T22:43:12Z",
    "updated_at": "2019-06-21T15:34:04Z",
    "closed_at": "2019-06-21T15:34:00Z",
    "author_association": "MEMBER",
    "pull_request": {
        "url": "https://api.github.com/repos/pallets/flask/pulls/3266",
        "html_url": "https://github.com/pallets/flask/pull/3266",
        "diff_url": "https://github.com/pallets/flask/pull/3266.diff",
        "patch_url": "https://github.com/pallets/flask/pull/3266.patch"
    },
    "body": "Due to multiple PRs over the last 5 years, the error handler behavior has slowly changed with the goal of being more consistent. However, after #2314 was merged in 1.0.0, these changes all cascaded together to make some inconsistent behavior finally visible.\r\n\r\nAfter *extensive* discussion in #1281, #1291, and #1429, the goal was to make error handlers trigger for exceptions in MRO order, rather than registration order. It formalized the idea that HTTP exception classes and status codes were aliases. Registering a handler for `401` was the same as `Unauthorized`.\r\n\r\nHowever, it (unintentionally?) preserved some old behavior where user errors would only be looked up against a `500` error handler, not a `InternalServerError` handler, even though the goal was for these to be aliases.\r\n\r\n#2314 ensured a more consistent lookup order between blueprints and app error handlers for codes and exception classes. #2362 simplified the code even more, and made it more correct for subclass handling. A side effect of these refactors was that it fixed the preserved behavior, so 500 and `InternalServerError` handlers were equivalent.\r\n\r\nAll these changes had the goal of making error handler registration and triggering more intuitive, and making maintenance easier.\r\n\r\nWhen an unhandled exception is raised, `handle_exception` is triggered so that a final, generic internal server error is returned. Previously, the behavior was to pass the unhandled exception to the 500 error handler, rather than the generic `InternalServerError`. Now that 500 and `InternalServerError` were the same thing and were both considered as handlers for generic error, users who registered a handler for `InternalServerError` or the `HTTPException` base class were surprised to get other random exceptions passed to the handler, rather than strict subclasses (#2778, #2841).\r\n\r\nA fix was proposed in #2983 which continued to preserve the old behavior by making a handler for `500` receive any error, while a handler for `InternalServerError` only received `InternalServerError`. I think this made the code harder to reason about, both for maintainers and for app devs.\r\n\r\nInstead, I'm going the opposite direction and ensuring that those handlers only ever receive `InternalServerError` instances. For unhandled errors, the exception has a new `original_exception` attribute that has the original unhandled error. This will be formalized in Werkzeug 1.0.0, until then `getattr` can be used to check if the attribute is set. The upside of this is that it is safe to assume that all codes and classes are aliases, and will only receive matching classes of errors, which seems to have been the intention of previous discussions, and makes the most sense to me.\r\n\r\nThe downside is that there is no way for this to be 100% backwards compatible for 500 handlers that were written assuming any exception would be passed to them, and I couldn't think of a way to have a useful deprecation warning transition. `e` will always look like `InternalServerError`, possibly making existing generic error pages less useful. However, with the availability of `e.original_exception`, it should be straightforward to get the intended behavior back. Code shouldn't *fail* in the mean time, only be less specific. I think the benefit of more consistent behavior outweighs the drawback.\r\n\r\ncloses #2778 \r\ncloses #2841 \r\ncloses #2983 \r\n\r\nWhile fixing this, I noticed that `finalize_request` was only called if a 500 error handler was found. If no custom handler was registered, then an unhandled error would skip `after_request` functions, saving the session, and sending the `request_finished` signal. This is now fixed, so `finalize_request` is always called.\r\n\r\nTo clear up related confusion about very generic error handlers such as `HTTPException` and `Exception`, more docs have been added to the `errorhandling.rst` page. `handle_exception` has much clearer explanations of what it does too.",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/503913325",
            "html_url": "https://github.com/pallets/flask/pull/3266#issuecomment-503913325",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/3266",
            "id": 503913325,
            "node_id": "MDEyOklzc3VlQ29tbWVudDUwMzkxMzMyNQ==",
            "user": {
                "login": "ThiefMaster",
                "id": 179599,
                "node_id": "MDQ6VXNlcjE3OTU5OQ==",
                "avatar_url": "https://avatars1.githubusercontent.com/u/179599?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/ThiefMaster",
                "html_url": "https://github.com/ThiefMaster",
                "followers_url": "https://api.github.com/users/ThiefMaster/followers",
                "following_url": "https://api.github.com/users/ThiefMaster/following{/other_user}",
                "gists_url": "https://api.github.com/users/ThiefMaster/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/ThiefMaster/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ThiefMaster/subscriptions",
                "organizations_url": "https://api.github.com/users/ThiefMaster/orgs",
                "repos_url": "https://api.github.com/users/ThiefMaster/repos",
                "events_url": "https://api.github.com/users/ThiefMaster/events{/privacy}",
                "received_events_url": "https://api.github.com/users/ThiefMaster/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2019-06-20T07:35:16Z",
            "updated_at": "2019-06-20T07:35:16Z",
            "author_association": "MEMBER",
            "body": "Looks good to me!\r\n\r\nI think one thing worth clarifying is a case where an app registers both an `Exception` and `HTTPException` error handler, e.g. this:\r\n\r\n```python\r\n@app.errorhandler(HTTPException)\r\ndef handle_http_exception(exc):\r\n    if not (400 <= exc.code <= 599):\r\n        # if it's not an actual error, use it as a response.\r\n        # this is needed e.g. for the 301 redirects that are raised\r\n        # as routing exceptions and thus end up here\r\n        return exc\r\n    elif exc.response:\r\n        # if the exception has a custom response, we always use that\r\n        # one instead of showing the default error page\r\n        return exc\r\n    return custom_http_error(...)\r\n\r\n\r\n@app.errorhandler(Exception)\r\ndef handle_exception(exc, message=None):\r\n    return custom_unhandled_error(...)\r\n```\r\n\r\n\r\nIn that case I'd expect the second handler not being called for any HTTP error handled by the first one."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/504267422",
            "html_url": "https://github.com/pallets/flask/pull/3266#issuecomment-504267422",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/3266",
            "id": 504267422,
            "node_id": "MDEyOklzc3VlQ29tbWVudDUwNDI2NzQyMg==",
            "user": {
                "login": "taion",
                "id": 3112159,
                "node_id": "MDQ6VXNlcjMxMTIxNTk=",
                "avatar_url": "https://avatars0.githubusercontent.com/u/3112159?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/taion",
                "html_url": "https://github.com/taion",
                "followers_url": "https://api.github.com/users/taion/followers",
                "following_url": "https://api.github.com/users/taion/following{/other_user}",
                "gists_url": "https://api.github.com/users/taion/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/taion/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/taion/subscriptions",
                "organizations_url": "https://api.github.com/users/taion/orgs",
                "repos_url": "https://api.github.com/users/taion/repos",
                "events_url": "https://api.github.com/users/taion/events{/privacy}",
                "received_events_url": "https://api.github.com/users/taion/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2019-06-21T02:40:35Z",
            "updated_at": "2019-06-21T02:40:35Z",
            "author_association": "CONTRIBUTOR",
            "body": "FWIW, I do prefer this implementation to https://github.com/pallets/flask/pull/2983. I suggested #2983 because it was arguably not breaking, but all else being the same I'd rather have this implementation.\r\n\r\nThat said, how are you planning on handling the release to avoid breaking semver?"
        }
    ]
}