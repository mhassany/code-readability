{
    "url": "https://api.github.com/repos/pallets/flask/issues/2220",
    "repository_url": "https://api.github.com/repos/pallets/flask",
    "labels_url": "https://api.github.com/repos/pallets/flask/issues/2220/labels{/name}",
    "comments_url": "https://api.github.com/repos/pallets/flask/issues/2220/comments",
    "events_url": "https://api.github.com/repos/pallets/flask/issues/2220/events",
    "html_url": "https://github.com/pallets/flask/issues/2220",
    "id": 216386047,
    "node_id": "MDU6SXNzdWUyMTYzODYwNDc=",
    "number": 2220,
    "title": "app.run(port='5000', debug=True) error",
    "user": {
        "login": "trigremm",
        "id": 855504,
        "node_id": "MDQ6VXNlcjg1NTUwNA==",
        "avatar_url": "https://avatars3.githubusercontent.com/u/855504?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/trigremm",
        "html_url": "https://github.com/trigremm",
        "followers_url": "https://api.github.com/users/trigremm/followers",
        "following_url": "https://api.github.com/users/trigremm/following{/other_user}",
        "gists_url": "https://api.github.com/users/trigremm/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/trigremm/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/trigremm/subscriptions",
        "organizations_url": "https://api.github.com/users/trigremm/orgs",
        "repos_url": "https://api.github.com/users/trigremm/repos",
        "events_url": "https://api.github.com/users/trigremm/events{/privacy}",
        "received_events_url": "https://api.github.com/users/trigremm/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 7,
    "created_at": "2017-03-23T10:46:42Z",
    "updated_at": "2017-03-27T21:36:34Z",
    "closed_at": "2017-03-27T21:36:34Z",
    "author_association": "NONE",
    "body": "Inappropriate  behaviour in app.run function with debug set to True and False\r\n\r\n```app.run(port='5000', debug=False)``` runs perfectly \r\n\r\nhowever when debug=True\r\n\r\n```app.run(port='5000', debug=True)``` it throws error \r\n```python3 hello_world.py \r\nTraceback (most recent call last):\r\n  File \"hello_world.py\", line 13, in <module>\r\n    app.run(port='5000', debug=True)\r\n  File \"/usr/lib64/python3.5/site-packages/flask/app.py\", line 841, in run\r\n    run_simple(host, port, self, **options)\r\n  File \"/usr/lib/python3.5/site-packages/werkzeug/serving.py\", line 717, in run_simple\r\n    s.bind((hostname, port))\r\nTypeError: an integer is required (got type str)```\r\n\r\n",
    "comments_inline": [
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/288681772",
            "html_url": "https://github.com/pallets/flask/issues/2220#issuecomment-288681772",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2220",
            "id": 288681772,
            "node_id": "MDEyOklzc3VlQ29tbWVudDI4ODY4MTc3Mg==",
            "user": {
                "login": "ThiefMaster",
                "id": 179599,
                "node_id": "MDQ6VXNlcjE3OTU5OQ==",
                "avatar_url": "https://avatars1.githubusercontent.com/u/179599?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/ThiefMaster",
                "html_url": "https://github.com/ThiefMaster",
                "followers_url": "https://api.github.com/users/ThiefMaster/followers",
                "following_url": "https://api.github.com/users/ThiefMaster/following{/other_user}",
                "gists_url": "https://api.github.com/users/ThiefMaster/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/ThiefMaster/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ThiefMaster/subscriptions",
                "organizations_url": "https://api.github.com/users/ThiefMaster/orgs",
                "repos_url": "https://api.github.com/users/ThiefMaster/repos",
                "events_url": "https://api.github.com/users/ThiefMaster/events{/privacy}",
                "received_events_url": "https://api.github.com/users/ThiefMaster/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2017-03-23T10:47:58Z",
            "updated_at": "2017-03-23T10:47:58Z",
            "author_association": "MEMBER",
            "body": "Ports are numbers, not strings. However, I agree that it'd be nicer to fail in both cases."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/289013972",
            "html_url": "https://github.com/pallets/flask/issues/2220#issuecomment-289013972",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2220",
            "id": 289013972,
            "node_id": "MDEyOklzc3VlQ29tbWVudDI4OTAxMzk3Mg==",
            "user": {
                "login": "aaossa",
                "id": 10425834,
                "node_id": "MDQ6VXNlcjEwNDI1ODM0",
                "avatar_url": "https://avatars2.githubusercontent.com/u/10425834?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/aaossa",
                "html_url": "https://github.com/aaossa",
                "followers_url": "https://api.github.com/users/aaossa/followers",
                "following_url": "https://api.github.com/users/aaossa/following{/other_user}",
                "gists_url": "https://api.github.com/users/aaossa/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/aaossa/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aaossa/subscriptions",
                "organizations_url": "https://api.github.com/users/aaossa/orgs",
                "repos_url": "https://api.github.com/users/aaossa/repos",
                "events_url": "https://api.github.com/users/aaossa/events{/privacy}",
                "received_events_url": "https://api.github.com/users/aaossa/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2017-03-24T12:49:15Z",
            "updated_at": "2017-03-24T12:49:15Z",
            "author_association": "NONE",
            "body": "Can I submit a PR for this? I may have time this weekend. But, of course, if you want to do it you can go with it :) \r\n\r\nMaybe a good solution is to check types and raise TypeError?"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/289014260",
            "html_url": "https://github.com/pallets/flask/issues/2220#issuecomment-289014260",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2220",
            "id": 289014260,
            "node_id": "MDEyOklzc3VlQ29tbWVudDI4OTAxNDI2MA==",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2017-03-24T12:50:37Z",
            "updated_at": "2017-03-24T12:50:37Z",
            "author_association": "MEMBER",
            "body": "@aaossa Yes and yes. Also please add a test :)"
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/289170586",
            "html_url": "https://github.com/pallets/flask/issues/2220#issuecomment-289170586",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2220",
            "id": 289170586,
            "node_id": "MDEyOklzc3VlQ29tbWVudDI4OTE3MDU4Ng==",
            "user": {
                "login": "aaossa",
                "id": 10425834,
                "node_id": "MDQ6VXNlcjEwNDI1ODM0",
                "avatar_url": "https://avatars2.githubusercontent.com/u/10425834?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/aaossa",
                "html_url": "https://github.com/aaossa",
                "followers_url": "https://api.github.com/users/aaossa/followers",
                "following_url": "https://api.github.com/users/aaossa/following{/other_user}",
                "gists_url": "https://api.github.com/users/aaossa/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/aaossa/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aaossa/subscriptions",
                "organizations_url": "https://api.github.com/users/aaossa/orgs",
                "repos_url": "https://api.github.com/users/aaossa/repos",
                "events_url": "https://api.github.com/users/aaossa/events{/privacy}",
                "received_events_url": "https://api.github.com/users/aaossa/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2017-03-24T23:59:34Z",
            "updated_at": "2017-03-24T23:59:34Z",
            "author_association": "NONE",
            "body": "@untitaker, @ThiefMaster \r\n\r\nReading the source code, I thought, **is this Werkzeug or Flask responsability?** The error from the OP comment is raised from `werkzeug.serving`, because `run_simple` is from that module. We could check types after [flask/app.py#L843](https://github.com/pallets/flask/blob/master/flask/app.py#L843) to avoid this problem without relying in Werkzeug. But we have another option: apply the same check at the top of `run_simple` ([werkzeug/serving.py#L602](https://github.com/pallets/werkzeug/blob/master/werkzeug/serving.py#L602)) to (also) avoid the same error when using Werkzeug but not Flask.\r\n\r\n**Why does the same code work when using `debug=False`?** Because debug mode uses the reloader (so [`use_reloader` is set to `True`](https://github.com/pallets/werkzeug/blob/master/werkzeug/serving.py#L701)) and Werkzeug tries to [use a socket without explicitly converting `port` to `int`](https://github.com/pallets/werkzeug/blob/master/werkzeug/serving.py#L717). When using `debug=False`, `use_reloader` is `False` and Werkzeug [calls an inner function that uses `make_server`](https://github.com/pallets/werkzeug/blob/master/werkzeug/serving.py#L693). The difference in this behaviour is because [`BaseWSGIServer` uses  `int(port)`](https://github.com/pallets/werkzeug/blob/master/werkzeug/serving.py#L501), explicitly converting the `port` from `str` to `int`.\r\n\r\nIMO, if Werkzeug is suposed to allow using a string value in `port` then we should explicitly convert the `port` parameter, when possible, and raise an exception when needed. If Werkzeug is not supposed to allow this behaviour, then Flask should allow `int`s only (and Werkzeug should do it too)\r\n\r\n---\r\n\r\nPS: I could make a PR in both repositories if needed. I'm asking because you are maintainers of both projects and I think both projects deserve a good solution :ok_hand: "
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/289172044",
            "html_url": "https://github.com/pallets/flask/issues/2220#issuecomment-289172044",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2220",
            "id": 289172044,
            "node_id": "MDEyOklzc3VlQ29tbWVudDI4OTE3MjA0NA==",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2017-03-25T00:13:18Z",
            "updated_at": "2017-03-25T00:13:18Z",
            "author_association": "MEMBER",
            "body": "I think it would be good to do this check in Werkzeug's make_server such that it is independent of reloader.\n\nOn 25 March 2017 00:59:46 CET, Antonio Ossa <notifications@github.com> wrote:\n>@untitaker, @ThiefMaster \n>\n>Reading the source code, I thought, **is this Werkzeug or Flask\n>responsability?** The error from the OP comment is raised from\n>`werkzeug.serving`, because `run_simple` is from that module. We could\n>check types after\n>[flask/app.py#L843](https://github.com/pallets/flask/blob/master/flask/app.py#L843)\n>to avoid this problem without relying in Werkzeug. But we have another\n>option: apply the same check at the top of `run_simple`\n>([werkzeug/serving.py#L602](https://github.com/pallets/werkzeug/blob/master/werkzeug/serving.py#L602))\n>to (also) avoid the same error when using Werkzeug but not Flask.\n>\n>**Why does the same code work when using `debug=False`?** Because debug\n>mode uses the reloader (so [`use_reloader` is set to\n>`True`](https://github.com/pallets/werkzeug/blob/master/werkzeug/serving.py#L701))\n>and Werkzeug tries to [use a socket without explicitly converting\n>`port` to\n>`int`](https://github.com/pallets/werkzeug/blob/master/werkzeug/serving.py#L717).\n>When using `debug=False`, `use_reloader` is `False` and Werkzeug [calls\n>an inner function that uses\n>`make_server`](https://github.com/pallets/werkzeug/blob/master/werkzeug/serving.py#L693).\n>The difference in this behaviour is because [`BaseWSGIServer` uses \n>`int(port)`](https://github.com/pallets/werkzeug/blob/master/werkzeug/serving.py#L501),\n>explicitly converting the `port` from `str` to `int`.\n>\n>IMO, if Werkzeug is suposed to allow using a string value in `port`\n>then we should explicitly convert the `port` parameter, when possible,\n>and raise an exception when needed. If Werkzeug is not supposed to\n>allow this behaviour, then Flask should allow `int`s only (and Werkzeug\n>should do it too)\n>\n>---\n>\n>PS: I could make a PR in both repositories if needed. I'm asking\n>because you are maintainers of both projects and I think both projects\n>deserve a good solution :ok_hand: \n>\n>-- \n>You are receiving this because you were mentioned.\n>Reply to this email directly or view it on GitHub:\n>https://github.com/pallets/flask/issues/2220#issuecomment-289170586\n\n-- \nSent from my Android device with K-9 Mail. Please excuse my brevity."
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/289181741",
            "html_url": "https://github.com/pallets/flask/issues/2220#issuecomment-289181741",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2220",
            "id": 289181741,
            "node_id": "MDEyOklzc3VlQ29tbWVudDI4OTE4MTc0MQ==",
            "user": {
                "login": "aaossa",
                "id": 10425834,
                "node_id": "MDQ6VXNlcjEwNDI1ODM0",
                "avatar_url": "https://avatars2.githubusercontent.com/u/10425834?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/aaossa",
                "html_url": "https://github.com/aaossa",
                "followers_url": "https://api.github.com/users/aaossa/followers",
                "following_url": "https://api.github.com/users/aaossa/following{/other_user}",
                "gists_url": "https://api.github.com/users/aaossa/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/aaossa/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aaossa/subscriptions",
                "organizations_url": "https://api.github.com/users/aaossa/orgs",
                "repos_url": "https://api.github.com/users/aaossa/repos",
                "events_url": "https://api.github.com/users/aaossa/events{/privacy}",
                "received_events_url": "https://api.github.com/users/aaossa/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2017-03-25T02:18:56Z",
            "updated_at": "2017-03-25T02:18:56Z",
            "author_association": "NONE",
            "body": "But the problem is not in `make_server` only, a check here won't fix this. An exception in `make_server` will be raised only when using `debug=False`, but the behaviour with `debug=True` will be the same. I think we should add the check in Werkzeug's `run_simple`. "
        },
        {
            "url": "https://api.github.com/repos/pallets/flask/issues/comments/289236135",
            "html_url": "https://github.com/pallets/flask/issues/2220#issuecomment-289236135",
            "issue_url": "https://api.github.com/repos/pallets/flask/issues/2220",
            "id": 289236135,
            "node_id": "MDEyOklzc3VlQ29tbWVudDI4OTIzNjEzNQ==",
            "user": {
                "login": "untitaker",
                "id": 837573,
                "node_id": "MDQ6VXNlcjgzNzU3Mw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/untitaker",
                "html_url": "https://github.com/untitaker",
                "followers_url": "https://api.github.com/users/untitaker/followers",
                "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
                "organizations_url": "https://api.github.com/users/untitaker/orgs",
                "repos_url": "https://api.github.com/users/untitaker/repos",
                "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/untitaker/received_events",
                "type": "User",
                "site_admin": false
            },
            "created_at": "2017-03-25T20:06:59Z",
            "updated_at": "2017-03-25T20:06:59Z",
            "author_association": "MEMBER",
            "body": "Right, forgot about that! `run_simple` it is then."
        }
    ]
}